// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_comm.proto

#include "msg_comm.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace msg {
PROTOBUF_CONSTEXPR MsgHead::MsgHead(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.service_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.msg_size_)*/0
  , /*decltype(_impl_.msg_type_)*/0
  , /*decltype(_impl_.router_id_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MsgHeadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgHeadDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgHeadDefaultTypeInternal() {}
  union {
    MsgHead _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgHeadDefaultTypeInternal _MsgHead_default_instance_;
PROTOBUF_CONSTEXPR LoginReq::LoginReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.username_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LoginReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoginReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoginReqDefaultTypeInternal() {}
  union {
    LoginReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoginReqDefaultTypeInternal _LoginReq_default_instance_;
PROTOBUF_CONSTEXPR LoginRes::LoginRes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.desc_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LoginResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoginResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoginResDefaultTypeInternal() {}
  union {
    LoginRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoginResDefaultTypeInternal _LoginRes_default_instance_;
PROTOBUF_CONSTEXPR DirReq::DirReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DirReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DirReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DirReqDefaultTypeInternal() {}
  union {
    DirReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DirReqDefaultTypeInternal _DirReq_default_instance_;
PROTOBUF_CONSTEXPR DirRes_Dir::DirRes_Dir(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.filename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.filesize_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DirRes_DirDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DirRes_DirDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DirRes_DirDefaultTypeInternal() {}
  union {
    DirRes_Dir _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DirRes_DirDefaultTypeInternal _DirRes_Dir_default_instance_;
PROTOBUF_CONSTEXPR DirRes::DirRes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dirs_)*/{}
  , /*decltype(_impl_.desc_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DirResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DirResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DirResDefaultTypeInternal() {}
  union {
    DirRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DirResDefaultTypeInternal _DirRes_default_instance_;
PROTOBUF_CONSTEXPR RegisterReq::RegisterReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.port_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegisterReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegisterReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegisterReqDefaultTypeInternal() {}
  union {
    RegisterReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegisterReqDefaultTypeInternal _RegisterReq_default_instance_;
PROTOBUF_CONSTEXPR MessageRes::MessageRes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.desc_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.return__)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MessageResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageResDefaultTypeInternal() {}
  union {
    MessageRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageResDefaultTypeInternal _MessageRes_default_instance_;
PROTOBUF_CONSTEXPR ServiceMap_Service::ServiceMap_Service(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.port_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServiceMap_ServiceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServiceMap_ServiceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServiceMap_ServiceDefaultTypeInternal() {}
  union {
    ServiceMap_Service _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServiceMap_ServiceDefaultTypeInternal _ServiceMap_Service_default_instance_;
PROTOBUF_CONSTEXPR ServiceMap_ServiceList::ServiceMap_ServiceList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.service_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServiceMap_ServiceListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServiceMap_ServiceListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServiceMap_ServiceListDefaultTypeInternal() {}
  union {
    ServiceMap_ServiceList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServiceMap_ServiceListDefaultTypeInternal _ServiceMap_ServiceList_default_instance_;
PROTOBUF_CONSTEXPR ServiceMap_ServiceMapEntry_DoNotUse::ServiceMap_ServiceMapEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct ServiceMap_ServiceMapEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServiceMap_ServiceMapEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServiceMap_ServiceMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ServiceMap_ServiceMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServiceMap_ServiceMapEntry_DoNotUseDefaultTypeInternal _ServiceMap_ServiceMapEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR ServiceMap::ServiceMap(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.service_map_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServiceMapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServiceMapDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServiceMapDefaultTypeInternal() {}
  union {
    ServiceMap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServiceMapDefaultTypeInternal _ServiceMap_default_instance_;
PROTOBUF_CONSTEXPR GetServiceReq::GetServiceReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetServiceReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetServiceReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetServiceReqDefaultTypeInternal() {}
  union {
    GetServiceReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetServiceReqDefaultTypeInternal _GetServiceReq_default_instance_;
PROTOBUF_CONSTEXPR Config::Config(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.service_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.service_ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.private_pb_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.protocol_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.service_port_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfigDefaultTypeInternal() {}
  union {
    Config _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfigDefaultTypeInternal _Config_default_instance_;
PROTOBUF_CONSTEXPR LoadConfigReq::LoadConfigReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.service_ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.service_port_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LoadConfigReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoadConfigReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoadConfigReqDefaultTypeInternal() {}
  union {
    LoadConfigReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoadConfigReqDefaultTypeInternal _LoadConfigReq_default_instance_;
PROTOBUF_CONSTEXPR DirConfig::DirConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.root_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DirConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DirConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DirConfigDefaultTypeInternal() {}
  union {
    DirConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DirConfigDefaultTypeInternal _DirConfig_default_instance_;
PROTOBUF_CONSTEXPR LoadAllConfigReq::LoadAllConfigReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.page_)*/0
  , /*decltype(_impl_.page_count_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LoadAllConfigReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoadAllConfigReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoadAllConfigReqDefaultTypeInternal() {}
  union {
    LoadAllConfigReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoadAllConfigReqDefaultTypeInternal _LoadAllConfigReq_default_instance_;
PROTOBUF_CONSTEXPR ConfigList::ConfigList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.configs_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConfigListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfigListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfigListDefaultTypeInternal() {}
  union {
    ConfigList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfigListDefaultTypeInternal _ConfigList_default_instance_;
PROTOBUF_CONSTEXPR GatewayConfig::GatewayConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.crt_path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.key_path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ca_path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.is_ssl_)*/false
  , /*decltype(_impl_.server_port_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GatewayConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GatewayConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GatewayConfigDefaultTypeInternal() {}
  union {
    GatewayConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GatewayConfigDefaultTypeInternal _GatewayConfig_default_instance_;
}  // namespace msg
static ::_pb::Metadata file_level_metadata_msg_5fcomm_2eproto[19];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_msg_5fcomm_2eproto[4];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_msg_5fcomm_2eproto = nullptr;

const uint32_t TableStruct_msg_5fcomm_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::MsgHead, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::MsgHead, _impl_.msg_size_),
  PROTOBUF_FIELD_OFFSET(::msg::MsgHead, _impl_.msg_type_),
  PROTOBUF_FIELD_OFFSET(::msg::MsgHead, _impl_.token_),
  PROTOBUF_FIELD_OFFSET(::msg::MsgHead, _impl_.service_name_),
  PROTOBUF_FIELD_OFFSET(::msg::MsgHead, _impl_.router_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::LoginReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::LoginReq, _impl_.username_),
  PROTOBUF_FIELD_OFFSET(::msg::LoginReq, _impl_.password_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::LoginRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::LoginRes, _impl_.desc_),
  PROTOBUF_FIELD_OFFSET(::msg::LoginRes, _impl_.token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::DirReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::DirReq, _impl_.path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::DirRes_Dir, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::DirRes_Dir, _impl_.filename_),
  PROTOBUF_FIELD_OFFSET(::msg::DirRes_Dir, _impl_.filesize_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::DirRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::DirRes, _impl_.desc_),
  PROTOBUF_FIELD_OFFSET(::msg::DirRes, _impl_.dirs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::RegisterReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::RegisterReq, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::msg::RegisterReq, _impl_.ip_),
  PROTOBUF_FIELD_OFFSET(::msg::RegisterReq, _impl_.port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::MessageRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::MessageRes, _impl_.return__),
  PROTOBUF_FIELD_OFFSET(::msg::MessageRes, _impl_.desc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::ServiceMap_Service, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::ServiceMap_Service, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::msg::ServiceMap_Service, _impl_.ip_),
  PROTOBUF_FIELD_OFFSET(::msg::ServiceMap_Service, _impl_.port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::ServiceMap_ServiceList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::ServiceMap_ServiceList, _impl_.service_),
  PROTOBUF_FIELD_OFFSET(::msg::ServiceMap_ServiceMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::ServiceMap_ServiceMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::ServiceMap_ServiceMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::ServiceMap_ServiceMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::ServiceMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::ServiceMap, _impl_.service_map_),
  PROTOBUF_FIELD_OFFSET(::msg::ServiceMap, _impl_.response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::GetServiceReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::GetServiceReq, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::msg::GetServiceReq, _impl_.type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::Config, _impl_.service_name_),
  PROTOBUF_FIELD_OFFSET(::msg::Config, _impl_.service_port_),
  PROTOBUF_FIELD_OFFSET(::msg::Config, _impl_.service_ip_),
  PROTOBUF_FIELD_OFFSET(::msg::Config, _impl_.private_pb_),
  PROTOBUF_FIELD_OFFSET(::msg::Config, _impl_.protocol_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::LoadConfigReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::LoadConfigReq, _impl_.service_ip_),
  PROTOBUF_FIELD_OFFSET(::msg::LoadConfigReq, _impl_.service_port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::DirConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::DirConfig, _impl_.root_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::LoadAllConfigReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::LoadAllConfigReq, _impl_.page_),
  PROTOBUF_FIELD_OFFSET(::msg::LoadAllConfigReq, _impl_.page_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::ConfigList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::ConfigList, _impl_.configs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::GatewayConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::GatewayConfig, _impl_.is_ssl_),
  PROTOBUF_FIELD_OFFSET(::msg::GatewayConfig, _impl_.crt_path_),
  PROTOBUF_FIELD_OFFSET(::msg::GatewayConfig, _impl_.key_path_),
  PROTOBUF_FIELD_OFFSET(::msg::GatewayConfig, _impl_.ca_path_),
  PROTOBUF_FIELD_OFFSET(::msg::GatewayConfig, _impl_.server_port_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::msg::MsgHead)},
  { 11, -1, -1, sizeof(::msg::LoginReq)},
  { 19, -1, -1, sizeof(::msg::LoginRes)},
  { 27, -1, -1, sizeof(::msg::DirReq)},
  { 34, -1, -1, sizeof(::msg::DirRes_Dir)},
  { 42, -1, -1, sizeof(::msg::DirRes)},
  { 50, -1, -1, sizeof(::msg::RegisterReq)},
  { 59, -1, -1, sizeof(::msg::MessageRes)},
  { 67, -1, -1, sizeof(::msg::ServiceMap_Service)},
  { 76, -1, -1, sizeof(::msg::ServiceMap_ServiceList)},
  { 83, 91, -1, sizeof(::msg::ServiceMap_ServiceMapEntry_DoNotUse)},
  { 93, -1, -1, sizeof(::msg::ServiceMap)},
  { 101, -1, -1, sizeof(::msg::GetServiceReq)},
  { 109, -1, -1, sizeof(::msg::Config)},
  { 120, -1, -1, sizeof(::msg::LoadConfigReq)},
  { 128, -1, -1, sizeof(::msg::DirConfig)},
  { 135, -1, -1, sizeof(::msg::LoadAllConfigReq)},
  { 143, -1, -1, sizeof(::msg::ConfigList)},
  { 150, -1, -1, sizeof(::msg::GatewayConfig)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::msg::_MsgHead_default_instance_._instance,
  &::msg::_LoginReq_default_instance_._instance,
  &::msg::_LoginRes_default_instance_._instance,
  &::msg::_DirReq_default_instance_._instance,
  &::msg::_DirRes_Dir_default_instance_._instance,
  &::msg::_DirRes_default_instance_._instance,
  &::msg::_RegisterReq_default_instance_._instance,
  &::msg::_MessageRes_default_instance_._instance,
  &::msg::_ServiceMap_Service_default_instance_._instance,
  &::msg::_ServiceMap_ServiceList_default_instance_._instance,
  &::msg::_ServiceMap_ServiceMapEntry_DoNotUse_default_instance_._instance,
  &::msg::_ServiceMap_default_instance_._instance,
  &::msg::_GetServiceReq_default_instance_._instance,
  &::msg::_Config_default_instance_._instance,
  &::msg::_LoadConfigReq_default_instance_._instance,
  &::msg::_DirConfig_default_instance_._instance,
  &::msg::_LoadAllConfigReq_default_instance_._instance,
  &::msg::_ConfigList_default_instance_._instance,
  &::msg::_GatewayConfig_default_instance_._instance,
};

const char descriptor_table_protodef_msg_5fcomm_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016msg_comm.proto\022\003msg\032\016msg_type.proto\"s\n"
  "\007MsgHead\022\020\n\010msg_size\030\001 \001(\005\022\036\n\010msg_type\030\002"
  " \001(\0162\014.msg.MsgType\022\r\n\005token\030\003 \001(\t\022\024\n\014ser"
  "vice_name\030\004 \001(\t\022\021\n\trouter_id\030\005 \001(\003\".\n\010Lo"
  "ginReq\022\020\n\010username\030\001 \001(\t\022\020\n\010password\030\002 \001"
  "(\t\"r\n\010LoginRes\022(\n\004desc\030\001 \001(\0162\032.msg.Login"
  "Res.LoginResType\022\r\n\005token\030\002 \001(\t\"-\n\014Login"
  "ResType\022\006\n\002OK\020\000\022\t\n\005ERROR\020\001\022\n\n\006NOUSER\020\002\"\026"
  "\n\006DirReq\022\014\n\004path\030\001 \001(\t\"\244\001\n\006DirRes\022$\n\004des"
  "c\030\001 \001(\0162\026.msg.DirRes.DirResType\022\035\n\004dirs\030"
  "\002 \003(\0132\017.msg.DirRes.Dir\032)\n\003Dir\022\020\n\010filenam"
  "e\030\001 \001(\t\022\020\n\010filesize\030\002 \001(\005\"*\n\nDirResType\022"
  "\006\n\002OK\020\000\022\t\n\005ERROR\020\001\022\t\n\005NODIR\020\002\"5\n\013Registe"
  "rReq\022\014\n\004name\030\001 \001(\t\022\n\n\002ip\030\002 \001(\t\022\014\n\004port\030\003"
  " \001(\005\"_\n\nMessageRes\022&\n\006return\030\001 \001(\0162\026.msg"
  ".MessageRes.Return\022\014\n\004desc\030\002 \001(\014\"\033\n\006Retu"
  "rn\022\006\n\002OK\020\000\022\t\n\005ERROR\020\001\"\241\002\n\nServiceMap\0224\n\013"
  "service_map\030\001 \003(\0132\037.msg.ServiceMap.Servi"
  "ceMapEntry\022!\n\010response\030\002 \001(\0132\017.msg.Messa"
  "geRes\0321\n\007Service\022\014\n\004name\030\001 \001(\t\022\n\n\002ip\030\002 \001"
  "(\t\022\014\n\004port\030\003 \001(\005\0327\n\013ServiceList\022(\n\007servi"
  "ce\030\001 \003(\0132\027.msg.ServiceMap.Service\032N\n\017Ser"
  "viceMapEntry\022\013\n\003key\030\001 \001(\t\022*\n\005value\030\002 \001(\013"
  "2\033.msg.ServiceMap.ServiceList:\0028\001\"^\n\rGet"
  "ServiceReq\022\014\n\004name\030\001 \001(\t\022%\n\004type\030\002 \001(\0162\027"
  ".msg.GetServiceReq.Type\"\030\n\004Type\022\007\n\003ONE\020\000"
  "\022\007\n\003ALL\020\001\"n\n\006Config\022\024\n\014service_name\030\001 \001("
  "\t\022\024\n\014service_port\030\002 \001(\005\022\022\n\nservice_ip\030\003 "
  "\001(\t\022\022\n\nprivate_pb\030\004 \001(\014\022\020\n\010protocol\030\005 \001("
  "\014\"9\n\rLoadConfigReq\022\022\n\nservice_ip\030\001 \001(\t\022\024"
  "\n\014service_port\030\002 \001(\005\"\031\n\tDirConfig\022\014\n\004roo"
  "t\030\001 \001(\t\"4\n\020LoadAllConfigReq\022\014\n\004page\030\001 \001("
  "\005\022\022\n\npage_count\030\002 \001(\005\"*\n\nConfigList\022\034\n\007c"
  "onfigs\030\001 \003(\0132\013.msg.Config\"i\n\rGatewayConf"
  "ig\022\016\n\006is_ssl\030\001 \001(\010\022\020\n\010crt_path\030\002 \001(\t\022\020\n\010"
  "key_path\030\003 \001(\t\022\017\n\007ca_path\030\004 \001(\t\022\023\n\013serve"
  "r_port\030\005 \001(\005b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_msg_5fcomm_2eproto_deps[1] = {
  &::descriptor_table_msg_5ftype_2eproto,
};
static ::_pbi::once_flag descriptor_table_msg_5fcomm_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_msg_5fcomm_2eproto = {
    false, false, 1460, descriptor_table_protodef_msg_5fcomm_2eproto,
    "msg_comm.proto",
    &descriptor_table_msg_5fcomm_2eproto_once, descriptor_table_msg_5fcomm_2eproto_deps, 1, 19,
    schemas, file_default_instances, TableStruct_msg_5fcomm_2eproto::offsets,
    file_level_metadata_msg_5fcomm_2eproto, file_level_enum_descriptors_msg_5fcomm_2eproto,
    file_level_service_descriptors_msg_5fcomm_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_msg_5fcomm_2eproto_getter() {
  return &descriptor_table_msg_5fcomm_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_msg_5fcomm_2eproto(&descriptor_table_msg_5fcomm_2eproto);
namespace msg {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LoginRes_LoginResType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_5fcomm_2eproto);
  return file_level_enum_descriptors_msg_5fcomm_2eproto[0];
}
bool LoginRes_LoginResType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr LoginRes_LoginResType LoginRes::OK;
constexpr LoginRes_LoginResType LoginRes::ERROR;
constexpr LoginRes_LoginResType LoginRes::NOUSER;
constexpr LoginRes_LoginResType LoginRes::LoginResType_MIN;
constexpr LoginRes_LoginResType LoginRes::LoginResType_MAX;
constexpr int LoginRes::LoginResType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DirRes_DirResType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_5fcomm_2eproto);
  return file_level_enum_descriptors_msg_5fcomm_2eproto[1];
}
bool DirRes_DirResType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr DirRes_DirResType DirRes::OK;
constexpr DirRes_DirResType DirRes::ERROR;
constexpr DirRes_DirResType DirRes::NODIR;
constexpr DirRes_DirResType DirRes::DirResType_MIN;
constexpr DirRes_DirResType DirRes::DirResType_MAX;
constexpr int DirRes::DirResType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageRes_Return_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_5fcomm_2eproto);
  return file_level_enum_descriptors_msg_5fcomm_2eproto[2];
}
bool MessageRes_Return_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr MessageRes_Return MessageRes::OK;
constexpr MessageRes_Return MessageRes::ERROR;
constexpr MessageRes_Return MessageRes::Return_MIN;
constexpr MessageRes_Return MessageRes::Return_MAX;
constexpr int MessageRes::Return_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GetServiceReq_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_5fcomm_2eproto);
  return file_level_enum_descriptors_msg_5fcomm_2eproto[3];
}
bool GetServiceReq_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr GetServiceReq_Type GetServiceReq::ONE;
constexpr GetServiceReq_Type GetServiceReq::ALL;
constexpr GetServiceReq_Type GetServiceReq::Type_MIN;
constexpr GetServiceReq_Type GetServiceReq::Type_MAX;
constexpr int GetServiceReq::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class MsgHead::_Internal {
 public:
};

MsgHead::MsgHead(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.MsgHead)
}
MsgHead::MsgHead(const MsgHead& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgHead* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.token_){}
    , decltype(_impl_.service_name_){}
    , decltype(_impl_.msg_size_){}
    , decltype(_impl_.msg_type_){}
    , decltype(_impl_.router_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token().empty()) {
    _this->_impl_.token_.Set(from._internal_token(), 
      _this->GetArenaForAllocation());
  }
  _impl_.service_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_service_name().empty()) {
    _this->_impl_.service_name_.Set(from._internal_service_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.msg_size_, &from._impl_.msg_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.router_id_) -
    reinterpret_cast<char*>(&_impl_.msg_size_)) + sizeof(_impl_.router_id_));
  // @@protoc_insertion_point(copy_constructor:msg.MsgHead)
}

inline void MsgHead::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.token_){}
    , decltype(_impl_.service_name_){}
    , decltype(_impl_.msg_size_){0}
    , decltype(_impl_.msg_type_){0}
    , decltype(_impl_.router_id_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.service_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MsgHead::~MsgHead() {
  // @@protoc_insertion_point(destructor:msg.MsgHead)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgHead::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.token_.Destroy();
  _impl_.service_name_.Destroy();
}

void MsgHead::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgHead::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MsgHead)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.token_.ClearToEmpty();
  _impl_.service_name_.ClearToEmpty();
  ::memset(&_impl_.msg_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.router_id_) -
      reinterpret_cast<char*>(&_impl_.msg_size_)) + sizeof(_impl_.router_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgHead::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 msg_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.msg_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.MsgType msg_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_msg_type(static_cast<::msg::MsgType>(val));
        } else
          goto handle_unusual;
        continue;
      // string token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.MsgHead.token"));
        } else
          goto handle_unusual;
        continue;
      // string service_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_service_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.MsgHead.service_name"));
        } else
          goto handle_unusual;
        continue;
      // int64 router_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.router_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MsgHead::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MsgHead)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 msg_size = 1;
  if (this->_internal_msg_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_msg_size(), target);
  }

  // .msg.MsgType msg_type = 2;
  if (this->_internal_msg_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_msg_type(), target);
  }

  // string token = 3;
  if (!this->_internal_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.MsgHead.token");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_token(), target);
  }

  // string service_name = 4;
  if (!this->_internal_service_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_name().data(), static_cast<int>(this->_internal_service_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.MsgHead.service_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_service_name(), target);
  }

  // int64 router_id = 5;
  if (this->_internal_router_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_router_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MsgHead)
  return target;
}

size_t MsgHead::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MsgHead)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 3;
  if (!this->_internal_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // string service_name = 4;
  if (!this->_internal_service_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_name());
  }

  // int32 msg_size = 1;
  if (this->_internal_msg_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_msg_size());
  }

  // .msg.MsgType msg_type = 2;
  if (this->_internal_msg_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_msg_type());
  }

  // int64 router_id = 5;
  if (this->_internal_router_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_router_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgHead::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgHead::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgHead::GetClassData() const { return &_class_data_; }


void MsgHead::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgHead*>(&to_msg);
  auto& from = static_cast<const MsgHead&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.MsgHead)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_token().empty()) {
    _this->_internal_set_token(from._internal_token());
  }
  if (!from._internal_service_name().empty()) {
    _this->_internal_set_service_name(from._internal_service_name());
  }
  if (from._internal_msg_size() != 0) {
    _this->_internal_set_msg_size(from._internal_msg_size());
  }
  if (from._internal_msg_type() != 0) {
    _this->_internal_set_msg_type(from._internal_msg_type());
  }
  if (from._internal_router_id() != 0) {
    _this->_internal_set_router_id(from._internal_router_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgHead::CopyFrom(const MsgHead& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MsgHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgHead::IsInitialized() const {
  return true;
}

void MsgHead::InternalSwap(MsgHead* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.token_, lhs_arena,
      &other->_impl_.token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.service_name_, lhs_arena,
      &other->_impl_.service_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgHead, _impl_.router_id_)
      + sizeof(MsgHead::_impl_.router_id_)
      - PROTOBUF_FIELD_OFFSET(MsgHead, _impl_.msg_size_)>(
          reinterpret_cast<char*>(&_impl_.msg_size_),
          reinterpret_cast<char*>(&other->_impl_.msg_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgHead::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_5fcomm_2eproto_getter, &descriptor_table_msg_5fcomm_2eproto_once,
      file_level_metadata_msg_5fcomm_2eproto[0]);
}

// ===================================================================

class LoginReq::_Internal {
 public:
};

LoginReq::LoginReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.LoginReq)
}
LoginReq::LoginReq(const LoginReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LoginReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.username_){}
    , decltype(_impl_.password_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    _this->_impl_.username_.Set(from._internal_username(), 
      _this->GetArenaForAllocation());
  }
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    _this->_impl_.password_.Set(from._internal_password(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:msg.LoginReq)
}

inline void LoginReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.username_){}
    , decltype(_impl_.password_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LoginReq::~LoginReq() {
  // @@protoc_insertion_point(destructor:msg.LoginReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LoginReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.username_.Destroy();
  _impl_.password_.Destroy();
}

void LoginReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LoginReq::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.LoginReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.username_.ClearToEmpty();
  _impl_.password_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string username = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.LoginReq.username"));
        } else
          goto handle_unusual;
        continue;
      // string password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.LoginReq.password"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LoginReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.LoginReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.LoginReq.username");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_username(), target);
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.LoginReq.password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.LoginReq)
  return target;
}

size_t LoginReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.LoginReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 1;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoginReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LoginReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoginReq::GetClassData() const { return &_class_data_; }


void LoginReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LoginReq*>(&to_msg);
  auto& from = static_cast<const LoginReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.LoginReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_username().empty()) {
    _this->_internal_set_username(from._internal_username());
  }
  if (!from._internal_password().empty()) {
    _this->_internal_set_password(from._internal_password());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoginReq::CopyFrom(const LoginReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.LoginReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginReq::IsInitialized() const {
  return true;
}

void LoginReq::InternalSwap(LoginReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.username_, lhs_arena,
      &other->_impl_.username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.password_, lhs_arena,
      &other->_impl_.password_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_5fcomm_2eproto_getter, &descriptor_table_msg_5fcomm_2eproto_once,
      file_level_metadata_msg_5fcomm_2eproto[1]);
}

// ===================================================================

class LoginRes::_Internal {
 public:
};

LoginRes::LoginRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.LoginRes)
}
LoginRes::LoginRes(const LoginRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LoginRes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.token_){}
    , decltype(_impl_.desc_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token().empty()) {
    _this->_impl_.token_.Set(from._internal_token(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.desc_ = from._impl_.desc_;
  // @@protoc_insertion_point(copy_constructor:msg.LoginRes)
}

inline void LoginRes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.token_){}
    , decltype(_impl_.desc_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LoginRes::~LoginRes() {
  // @@protoc_insertion_point(destructor:msg.LoginRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LoginRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.token_.Destroy();
}

void LoginRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LoginRes::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.LoginRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.token_.ClearToEmpty();
  _impl_.desc_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .msg.LoginRes.LoginResType desc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_desc(static_cast<::msg::LoginRes_LoginResType>(val));
        } else
          goto handle_unusual;
        continue;
      // string token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.LoginRes.token"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LoginRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.LoginRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .msg.LoginRes.LoginResType desc = 1;
  if (this->_internal_desc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_desc(), target);
  }

  // string token = 2;
  if (!this->_internal_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.LoginRes.token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.LoginRes)
  return target;
}

size_t LoginRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.LoginRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 2;
  if (!this->_internal_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // .msg.LoginRes.LoginResType desc = 1;
  if (this->_internal_desc() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_desc());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoginRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LoginRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoginRes::GetClassData() const { return &_class_data_; }


void LoginRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LoginRes*>(&to_msg);
  auto& from = static_cast<const LoginRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.LoginRes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_token().empty()) {
    _this->_internal_set_token(from._internal_token());
  }
  if (from._internal_desc() != 0) {
    _this->_internal_set_desc(from._internal_desc());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoginRes::CopyFrom(const LoginRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.LoginRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRes::IsInitialized() const {
  return true;
}

void LoginRes::InternalSwap(LoginRes* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.token_, lhs_arena,
      &other->_impl_.token_, rhs_arena
  );
  swap(_impl_.desc_, other->_impl_.desc_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_5fcomm_2eproto_getter, &descriptor_table_msg_5fcomm_2eproto_once,
      file_level_metadata_msg_5fcomm_2eproto[2]);
}

// ===================================================================

class DirReq::_Internal {
 public:
};

DirReq::DirReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.DirReq)
}
DirReq::DirReq(const DirReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DirReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.path_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    _this->_impl_.path_.Set(from._internal_path(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:msg.DirReq)
}

inline void DirReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.path_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DirReq::~DirReq() {
  // @@protoc_insertion_point(destructor:msg.DirReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DirReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.path_.Destroy();
}

void DirReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DirReq::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.DirReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.path_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DirReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.DirReq.path"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DirReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.DirReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.DirReq.path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.DirReq)
  return target;
}

size_t DirReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.DirReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 1;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DirReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DirReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DirReq::GetClassData() const { return &_class_data_; }


void DirReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DirReq*>(&to_msg);
  auto& from = static_cast<const DirReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.DirReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_path().empty()) {
    _this->_internal_set_path(from._internal_path());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DirReq::CopyFrom(const DirReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.DirReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirReq::IsInitialized() const {
  return true;
}

void DirReq::InternalSwap(DirReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.path_, lhs_arena,
      &other->_impl_.path_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DirReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_5fcomm_2eproto_getter, &descriptor_table_msg_5fcomm_2eproto_once,
      file_level_metadata_msg_5fcomm_2eproto[3]);
}

// ===================================================================

class DirRes_Dir::_Internal {
 public:
};

DirRes_Dir::DirRes_Dir(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.DirRes.Dir)
}
DirRes_Dir::DirRes_Dir(const DirRes_Dir& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DirRes_Dir* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.filename_){}
    , decltype(_impl_.filesize_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_filename().empty()) {
    _this->_impl_.filename_.Set(from._internal_filename(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.filesize_ = from._impl_.filesize_;
  // @@protoc_insertion_point(copy_constructor:msg.DirRes.Dir)
}

inline void DirRes_Dir::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.filename_){}
    , decltype(_impl_.filesize_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DirRes_Dir::~DirRes_Dir() {
  // @@protoc_insertion_point(destructor:msg.DirRes.Dir)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DirRes_Dir::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.filename_.Destroy();
}

void DirRes_Dir::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DirRes_Dir::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.DirRes.Dir)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.filename_.ClearToEmpty();
  _impl_.filesize_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DirRes_Dir::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string filename = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_filename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.DirRes.Dir.filename"));
        } else
          goto handle_unusual;
        continue;
      // int32 filesize = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.filesize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DirRes_Dir::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.DirRes.Dir)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string filename = 1;
  if (!this->_internal_filename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.DirRes.Dir.filename");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filename(), target);
  }

  // int32 filesize = 2;
  if (this->_internal_filesize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_filesize(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.DirRes.Dir)
  return target;
}

size_t DirRes_Dir::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.DirRes.Dir)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string filename = 1;
  if (!this->_internal_filename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filename());
  }

  // int32 filesize = 2;
  if (this->_internal_filesize() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_filesize());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DirRes_Dir::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DirRes_Dir::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DirRes_Dir::GetClassData() const { return &_class_data_; }


void DirRes_Dir::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DirRes_Dir*>(&to_msg);
  auto& from = static_cast<const DirRes_Dir&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.DirRes.Dir)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_filename().empty()) {
    _this->_internal_set_filename(from._internal_filename());
  }
  if (from._internal_filesize() != 0) {
    _this->_internal_set_filesize(from._internal_filesize());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DirRes_Dir::CopyFrom(const DirRes_Dir& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.DirRes.Dir)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirRes_Dir::IsInitialized() const {
  return true;
}

void DirRes_Dir::InternalSwap(DirRes_Dir* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.filename_, lhs_arena,
      &other->_impl_.filename_, rhs_arena
  );
  swap(_impl_.filesize_, other->_impl_.filesize_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DirRes_Dir::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_5fcomm_2eproto_getter, &descriptor_table_msg_5fcomm_2eproto_once,
      file_level_metadata_msg_5fcomm_2eproto[4]);
}

// ===================================================================

class DirRes::_Internal {
 public:
};

DirRes::DirRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.DirRes)
}
DirRes::DirRes(const DirRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DirRes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dirs_){from._impl_.dirs_}
    , decltype(_impl_.desc_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.desc_ = from._impl_.desc_;
  // @@protoc_insertion_point(copy_constructor:msg.DirRes)
}

inline void DirRes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dirs_){arena}
    , decltype(_impl_.desc_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DirRes::~DirRes() {
  // @@protoc_insertion_point(destructor:msg.DirRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DirRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dirs_.~RepeatedPtrField();
}

void DirRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DirRes::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.DirRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dirs_.Clear();
  _impl_.desc_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DirRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .msg.DirRes.DirResType desc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_desc(static_cast<::msg::DirRes_DirResType>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.DirRes.Dir dirs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dirs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DirRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.DirRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .msg.DirRes.DirResType desc = 1;
  if (this->_internal_desc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_desc(), target);
  }

  // repeated .msg.DirRes.Dir dirs = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_dirs_size()); i < n; i++) {
    const auto& repfield = this->_internal_dirs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.DirRes)
  return target;
}

size_t DirRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.DirRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.DirRes.Dir dirs = 2;
  total_size += 1UL * this->_internal_dirs_size();
  for (const auto& msg : this->_impl_.dirs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .msg.DirRes.DirResType desc = 1;
  if (this->_internal_desc() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_desc());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DirRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DirRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DirRes::GetClassData() const { return &_class_data_; }


void DirRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DirRes*>(&to_msg);
  auto& from = static_cast<const DirRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.DirRes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.dirs_.MergeFrom(from._impl_.dirs_);
  if (from._internal_desc() != 0) {
    _this->_internal_set_desc(from._internal_desc());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DirRes::CopyFrom(const DirRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.DirRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirRes::IsInitialized() const {
  return true;
}

void DirRes::InternalSwap(DirRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.dirs_.InternalSwap(&other->_impl_.dirs_);
  swap(_impl_.desc_, other->_impl_.desc_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DirRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_5fcomm_2eproto_getter, &descriptor_table_msg_5fcomm_2eproto_once,
      file_level_metadata_msg_5fcomm_2eproto[5]);
}

// ===================================================================

class RegisterReq::_Internal {
 public:
};

RegisterReq::RegisterReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.RegisterReq)
}
RegisterReq::RegisterReq(const RegisterReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegisterReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.ip_){}
    , decltype(_impl_.port_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip().empty()) {
    _this->_impl_.ip_.Set(from._internal_ip(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.port_ = from._impl_.port_;
  // @@protoc_insertion_point(copy_constructor:msg.RegisterReq)
}

inline void RegisterReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.ip_){}
    , decltype(_impl_.port_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RegisterReq::~RegisterReq() {
  // @@protoc_insertion_point(destructor:msg.RegisterReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegisterReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.ip_.Destroy();
}

void RegisterReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegisterReq::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.RegisterReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.ip_.ClearToEmpty();
  _impl_.port_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.RegisterReq.name"));
        } else
          goto handle_unusual;
        continue;
      // string ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.RegisterReq.ip"));
        } else
          goto handle_unusual;
        continue;
      // int32 port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegisterReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.RegisterReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.RegisterReq.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string ip = 2;
  if (!this->_internal_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.RegisterReq.ip");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ip(), target);
  }

  // int32 port = 3;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.RegisterReq)
  return target;
}

size_t RegisterReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.RegisterReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string ip = 2;
  if (!this->_internal_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // int32 port = 3;
  if (this->_internal_port() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegisterReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterReq::GetClassData() const { return &_class_data_; }


void RegisterReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegisterReq*>(&to_msg);
  auto& from = static_cast<const RegisterReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.RegisterReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_ip().empty()) {
    _this->_internal_set_ip(from._internal_ip());
  }
  if (from._internal_port() != 0) {
    _this->_internal_set_port(from._internal_port());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterReq::CopyFrom(const RegisterReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.RegisterReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterReq::IsInitialized() const {
  return true;
}

void RegisterReq::InternalSwap(RegisterReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ip_, lhs_arena,
      &other->_impl_.ip_, rhs_arena
  );
  swap(_impl_.port_, other->_impl_.port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_5fcomm_2eproto_getter, &descriptor_table_msg_5fcomm_2eproto_once,
      file_level_metadata_msg_5fcomm_2eproto[6]);
}

// ===================================================================

class MessageRes::_Internal {
 public:
};

MessageRes::MessageRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.MessageRes)
}
MessageRes::MessageRes(const MessageRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MessageRes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.desc_){}
    , decltype(_impl_.return__){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.desc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_desc().empty()) {
    _this->_impl_.desc_.Set(from._internal_desc(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.return__ = from._impl_.return__;
  // @@protoc_insertion_point(copy_constructor:msg.MessageRes)
}

inline void MessageRes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.desc_){}
    , decltype(_impl_.return__){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.desc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MessageRes::~MessageRes() {
  // @@protoc_insertion_point(destructor:msg.MessageRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MessageRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.desc_.Destroy();
}

void MessageRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MessageRes::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MessageRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.desc_.ClearToEmpty();
  _impl_.return__ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .msg.MessageRes.Return return = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_return_(static_cast<::msg::MessageRes_Return>(val));
        } else
          goto handle_unusual;
        continue;
      // bytes desc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_desc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MessageRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MessageRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .msg.MessageRes.Return return = 1;
  if (this->_internal_return_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_return_(), target);
  }

  // bytes desc = 2;
  if (!this->_internal_desc().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_desc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MessageRes)
  return target;
}

size_t MessageRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MessageRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes desc = 2;
  if (!this->_internal_desc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_desc());
  }

  // .msg.MessageRes.Return return = 1;
  if (this->_internal_return_() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_return_());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MessageRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MessageRes::GetClassData() const { return &_class_data_; }


void MessageRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MessageRes*>(&to_msg);
  auto& from = static_cast<const MessageRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.MessageRes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_desc().empty()) {
    _this->_internal_set_desc(from._internal_desc());
  }
  if (from._internal_return_() != 0) {
    _this->_internal_set_return_(from._internal_return_());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MessageRes::CopyFrom(const MessageRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MessageRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageRes::IsInitialized() const {
  return true;
}

void MessageRes::InternalSwap(MessageRes* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.desc_, lhs_arena,
      &other->_impl_.desc_, rhs_arena
  );
  swap(_impl_.return__, other->_impl_.return__);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_5fcomm_2eproto_getter, &descriptor_table_msg_5fcomm_2eproto_once,
      file_level_metadata_msg_5fcomm_2eproto[7]);
}

// ===================================================================

class ServiceMap_Service::_Internal {
 public:
};

ServiceMap_Service::ServiceMap_Service(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.ServiceMap.Service)
}
ServiceMap_Service::ServiceMap_Service(const ServiceMap_Service& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServiceMap_Service* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.ip_){}
    , decltype(_impl_.port_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip().empty()) {
    _this->_impl_.ip_.Set(from._internal_ip(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.port_ = from._impl_.port_;
  // @@protoc_insertion_point(copy_constructor:msg.ServiceMap.Service)
}

inline void ServiceMap_Service::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.ip_){}
    , decltype(_impl_.port_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ServiceMap_Service::~ServiceMap_Service() {
  // @@protoc_insertion_point(destructor:msg.ServiceMap.Service)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServiceMap_Service::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.ip_.Destroy();
}

void ServiceMap_Service::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServiceMap_Service::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.ServiceMap.Service)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.ip_.ClearToEmpty();
  _impl_.port_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServiceMap_Service::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.ServiceMap.Service.name"));
        } else
          goto handle_unusual;
        continue;
      // string ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.ServiceMap.Service.ip"));
        } else
          goto handle_unusual;
        continue;
      // int32 port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServiceMap_Service::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.ServiceMap.Service)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.ServiceMap.Service.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string ip = 2;
  if (!this->_internal_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.ServiceMap.Service.ip");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ip(), target);
  }

  // int32 port = 3;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.ServiceMap.Service)
  return target;
}

size_t ServiceMap_Service::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.ServiceMap.Service)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string ip = 2;
  if (!this->_internal_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // int32 port = 3;
  if (this->_internal_port() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServiceMap_Service::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServiceMap_Service::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServiceMap_Service::GetClassData() const { return &_class_data_; }


void ServiceMap_Service::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServiceMap_Service*>(&to_msg);
  auto& from = static_cast<const ServiceMap_Service&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.ServiceMap.Service)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_ip().empty()) {
    _this->_internal_set_ip(from._internal_ip());
  }
  if (from._internal_port() != 0) {
    _this->_internal_set_port(from._internal_port());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServiceMap_Service::CopyFrom(const ServiceMap_Service& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.ServiceMap.Service)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceMap_Service::IsInitialized() const {
  return true;
}

void ServiceMap_Service::InternalSwap(ServiceMap_Service* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ip_, lhs_arena,
      &other->_impl_.ip_, rhs_arena
  );
  swap(_impl_.port_, other->_impl_.port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceMap_Service::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_5fcomm_2eproto_getter, &descriptor_table_msg_5fcomm_2eproto_once,
      file_level_metadata_msg_5fcomm_2eproto[8]);
}

// ===================================================================

class ServiceMap_ServiceList::_Internal {
 public:
};

ServiceMap_ServiceList::ServiceMap_ServiceList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.ServiceMap.ServiceList)
}
ServiceMap_ServiceList::ServiceMap_ServiceList(const ServiceMap_ServiceList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServiceMap_ServiceList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.service_){from._impl_.service_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.ServiceMap.ServiceList)
}

inline void ServiceMap_ServiceList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.service_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ServiceMap_ServiceList::~ServiceMap_ServiceList() {
  // @@protoc_insertion_point(destructor:msg.ServiceMap.ServiceList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServiceMap_ServiceList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.service_.~RepeatedPtrField();
}

void ServiceMap_ServiceList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServiceMap_ServiceList::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.ServiceMap.ServiceList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.service_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServiceMap_ServiceList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .msg.ServiceMap.Service service = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_service(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServiceMap_ServiceList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.ServiceMap.ServiceList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .msg.ServiceMap.Service service = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_service_size()); i < n; i++) {
    const auto& repfield = this->_internal_service(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.ServiceMap.ServiceList)
  return target;
}

size_t ServiceMap_ServiceList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.ServiceMap.ServiceList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.ServiceMap.Service service = 1;
  total_size += 1UL * this->_internal_service_size();
  for (const auto& msg : this->_impl_.service_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServiceMap_ServiceList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServiceMap_ServiceList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServiceMap_ServiceList::GetClassData() const { return &_class_data_; }


void ServiceMap_ServiceList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServiceMap_ServiceList*>(&to_msg);
  auto& from = static_cast<const ServiceMap_ServiceList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.ServiceMap.ServiceList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.service_.MergeFrom(from._impl_.service_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServiceMap_ServiceList::CopyFrom(const ServiceMap_ServiceList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.ServiceMap.ServiceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceMap_ServiceList::IsInitialized() const {
  return true;
}

void ServiceMap_ServiceList::InternalSwap(ServiceMap_ServiceList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.service_.InternalSwap(&other->_impl_.service_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceMap_ServiceList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_5fcomm_2eproto_getter, &descriptor_table_msg_5fcomm_2eproto_once,
      file_level_metadata_msg_5fcomm_2eproto[9]);
}

// ===================================================================

ServiceMap_ServiceMapEntry_DoNotUse::ServiceMap_ServiceMapEntry_DoNotUse() {}
ServiceMap_ServiceMapEntry_DoNotUse::ServiceMap_ServiceMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ServiceMap_ServiceMapEntry_DoNotUse::MergeFrom(const ServiceMap_ServiceMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ServiceMap_ServiceMapEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_5fcomm_2eproto_getter, &descriptor_table_msg_5fcomm_2eproto_once,
      file_level_metadata_msg_5fcomm_2eproto[10]);
}

// ===================================================================

class ServiceMap::_Internal {
 public:
  static const ::msg::MessageRes& response(const ServiceMap* msg);
};

const ::msg::MessageRes&
ServiceMap::_Internal::response(const ServiceMap* msg) {
  return *msg->_impl_.response_;
}
ServiceMap::ServiceMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &ServiceMap::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:msg.ServiceMap)
}
ServiceMap::ServiceMap(const ServiceMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServiceMap* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.service_map_)*/{}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.service_map_.MergeFrom(from._impl_.service_map_);
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::msg::MessageRes(*from._impl_.response_);
  }
  // @@protoc_insertion_point(copy_constructor:msg.ServiceMap)
}

inline void ServiceMap::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.service_map_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ServiceMap::~ServiceMap() {
  // @@protoc_insertion_point(destructor:msg.ServiceMap)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void ServiceMap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.service_map_.Destruct();
  _impl_.service_map_.~MapField();
  if (this != internal_default_instance()) delete _impl_.response_;
}

void ServiceMap::ArenaDtor(void* object) {
  ServiceMap* _this = reinterpret_cast< ServiceMap* >(object);
  _this->_impl_.service_map_.Destruct();
}
void ServiceMap::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServiceMap::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.ServiceMap)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.service_map_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServiceMap::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .msg.ServiceMap.ServiceList> service_map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.service_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .msg.MessageRes response = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServiceMap::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.ServiceMap)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .msg.ServiceMap.ServiceList> service_map = 1;
  if (!this->_internal_service_map().empty()) {
    using MapType = ::_pb::Map<std::string, ::msg::ServiceMap_ServiceList>;
    using WireHelper = ServiceMap_ServiceMapEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_service_map();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "msg.ServiceMap.ServiceMapEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // .msg.MessageRes response = 2;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.ServiceMap)
  return target;
}

size_t ServiceMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.ServiceMap)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .msg.ServiceMap.ServiceList> service_map = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_service_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::ServiceMap_ServiceList >::const_iterator
      it = this->_internal_service_map().begin();
      it != this->_internal_service_map().end(); ++it) {
    total_size += ServiceMap_ServiceMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .msg.MessageRes response = 2;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServiceMap::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServiceMap::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServiceMap::GetClassData() const { return &_class_data_; }


void ServiceMap::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServiceMap*>(&to_msg);
  auto& from = static_cast<const ServiceMap&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.ServiceMap)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.service_map_.MergeFrom(from._impl_.service_map_);
  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::msg::MessageRes::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServiceMap::CopyFrom(const ServiceMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.ServiceMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceMap::IsInitialized() const {
  return true;
}

void ServiceMap::InternalSwap(ServiceMap* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.service_map_.InternalSwap(&other->_impl_.service_map_);
  swap(_impl_.response_, other->_impl_.response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceMap::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_5fcomm_2eproto_getter, &descriptor_table_msg_5fcomm_2eproto_once,
      file_level_metadata_msg_5fcomm_2eproto[11]);
}

// ===================================================================

class GetServiceReq::_Internal {
 public:
};

GetServiceReq::GetServiceReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.GetServiceReq)
}
GetServiceReq::GetServiceReq(const GetServiceReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetServiceReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:msg.GetServiceReq)
}

inline void GetServiceReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetServiceReq::~GetServiceReq() {
  // @@protoc_insertion_point(destructor:msg.GetServiceReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetServiceReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void GetServiceReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetServiceReq::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.GetServiceReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetServiceReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.GetServiceReq.name"));
        } else
          goto handle_unusual;
        continue;
      // .msg.GetServiceReq.Type type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::msg::GetServiceReq_Type>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetServiceReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.GetServiceReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.GetServiceReq.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .msg.GetServiceReq.Type type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.GetServiceReq)
  return target;
}

size_t GetServiceReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.GetServiceReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .msg.GetServiceReq.Type type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetServiceReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetServiceReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetServiceReq::GetClassData() const { return &_class_data_; }


void GetServiceReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetServiceReq*>(&to_msg);
  auto& from = static_cast<const GetServiceReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.GetServiceReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetServiceReq::CopyFrom(const GetServiceReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.GetServiceReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServiceReq::IsInitialized() const {
  return true;
}

void GetServiceReq::InternalSwap(GetServiceReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetServiceReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_5fcomm_2eproto_getter, &descriptor_table_msg_5fcomm_2eproto_once,
      file_level_metadata_msg_5fcomm_2eproto[12]);
}

// ===================================================================

class Config::_Internal {
 public:
};

Config::Config(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.Config)
}
Config::Config(const Config& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Config* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.service_name_){}
    , decltype(_impl_.service_ip_){}
    , decltype(_impl_.private_pb_){}
    , decltype(_impl_.protocol_){}
    , decltype(_impl_.service_port_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.service_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_service_name().empty()) {
    _this->_impl_.service_name_.Set(from._internal_service_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.service_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_service_ip().empty()) {
    _this->_impl_.service_ip_.Set(from._internal_service_ip(), 
      _this->GetArenaForAllocation());
  }
  _impl_.private_pb_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.private_pb_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_private_pb().empty()) {
    _this->_impl_.private_pb_.Set(from._internal_private_pb(), 
      _this->GetArenaForAllocation());
  }
  _impl_.protocol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.protocol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_protocol().empty()) {
    _this->_impl_.protocol_.Set(from._internal_protocol(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.service_port_ = from._impl_.service_port_;
  // @@protoc_insertion_point(copy_constructor:msg.Config)
}

inline void Config::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.service_name_){}
    , decltype(_impl_.service_ip_){}
    , decltype(_impl_.private_pb_){}
    , decltype(_impl_.protocol_){}
    , decltype(_impl_.service_port_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.service_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.service_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.private_pb_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.private_pb_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.protocol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.protocol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Config::~Config() {
  // @@protoc_insertion_point(destructor:msg.Config)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Config::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.service_name_.Destroy();
  _impl_.service_ip_.Destroy();
  _impl_.private_pb_.Destroy();
  _impl_.protocol_.Destroy();
}

void Config::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Config::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.Config)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.service_name_.ClearToEmpty();
  _impl_.service_ip_.ClearToEmpty();
  _impl_.private_pb_.ClearToEmpty();
  _impl_.protocol_.ClearToEmpty();
  _impl_.service_port_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Config::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string service_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_service_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.Config.service_name"));
        } else
          goto handle_unusual;
        continue;
      // int32 service_port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.service_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string service_ip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_service_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.Config.service_ip"));
        } else
          goto handle_unusual;
        continue;
      // bytes private_pb = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_private_pb();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes protocol = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_protocol();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Config::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Config)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string service_name = 1;
  if (!this->_internal_service_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_name().data(), static_cast<int>(this->_internal_service_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.Config.service_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_service_name(), target);
  }

  // int32 service_port = 2;
  if (this->_internal_service_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_service_port(), target);
  }

  // string service_ip = 3;
  if (!this->_internal_service_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_ip().data(), static_cast<int>(this->_internal_service_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.Config.service_ip");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_service_ip(), target);
  }

  // bytes private_pb = 4;
  if (!this->_internal_private_pb().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_private_pb(), target);
  }

  // bytes protocol = 5;
  if (!this->_internal_protocol().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_protocol(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Config)
  return target;
}

size_t Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.Config)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string service_name = 1;
  if (!this->_internal_service_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_name());
  }

  // string service_ip = 3;
  if (!this->_internal_service_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_ip());
  }

  // bytes private_pb = 4;
  if (!this->_internal_private_pb().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_private_pb());
  }

  // bytes protocol = 5;
  if (!this->_internal_protocol().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_protocol());
  }

  // int32 service_port = 2;
  if (this->_internal_service_port() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_service_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Config::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Config::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Config::GetClassData() const { return &_class_data_; }


void Config::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Config*>(&to_msg);
  auto& from = static_cast<const Config&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.Config)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_service_name().empty()) {
    _this->_internal_set_service_name(from._internal_service_name());
  }
  if (!from._internal_service_ip().empty()) {
    _this->_internal_set_service_ip(from._internal_service_ip());
  }
  if (!from._internal_private_pb().empty()) {
    _this->_internal_set_private_pb(from._internal_private_pb());
  }
  if (!from._internal_protocol().empty()) {
    _this->_internal_set_protocol(from._internal_protocol());
  }
  if (from._internal_service_port() != 0) {
    _this->_internal_set_service_port(from._internal_service_port());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Config::CopyFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config::IsInitialized() const {
  return true;
}

void Config::InternalSwap(Config* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.service_name_, lhs_arena,
      &other->_impl_.service_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.service_ip_, lhs_arena,
      &other->_impl_.service_ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.private_pb_, lhs_arena,
      &other->_impl_.private_pb_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.protocol_, lhs_arena,
      &other->_impl_.protocol_, rhs_arena
  );
  swap(_impl_.service_port_, other->_impl_.service_port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Config::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_5fcomm_2eproto_getter, &descriptor_table_msg_5fcomm_2eproto_once,
      file_level_metadata_msg_5fcomm_2eproto[13]);
}

// ===================================================================

class LoadConfigReq::_Internal {
 public:
};

LoadConfigReq::LoadConfigReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.LoadConfigReq)
}
LoadConfigReq::LoadConfigReq(const LoadConfigReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LoadConfigReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.service_ip_){}
    , decltype(_impl_.service_port_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.service_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_service_ip().empty()) {
    _this->_impl_.service_ip_.Set(from._internal_service_ip(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.service_port_ = from._impl_.service_port_;
  // @@protoc_insertion_point(copy_constructor:msg.LoadConfigReq)
}

inline void LoadConfigReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.service_ip_){}
    , decltype(_impl_.service_port_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.service_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LoadConfigReq::~LoadConfigReq() {
  // @@protoc_insertion_point(destructor:msg.LoadConfigReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LoadConfigReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.service_ip_.Destroy();
}

void LoadConfigReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LoadConfigReq::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.LoadConfigReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.service_ip_.ClearToEmpty();
  _impl_.service_port_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoadConfigReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string service_ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_service_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.LoadConfigReq.service_ip"));
        } else
          goto handle_unusual;
        continue;
      // int32 service_port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.service_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LoadConfigReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.LoadConfigReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string service_ip = 1;
  if (!this->_internal_service_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_ip().data(), static_cast<int>(this->_internal_service_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.LoadConfigReq.service_ip");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_service_ip(), target);
  }

  // int32 service_port = 2;
  if (this->_internal_service_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_service_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.LoadConfigReq)
  return target;
}

size_t LoadConfigReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.LoadConfigReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string service_ip = 1;
  if (!this->_internal_service_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_ip());
  }

  // int32 service_port = 2;
  if (this->_internal_service_port() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_service_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoadConfigReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LoadConfigReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoadConfigReq::GetClassData() const { return &_class_data_; }


void LoadConfigReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LoadConfigReq*>(&to_msg);
  auto& from = static_cast<const LoadConfigReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.LoadConfigReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_service_ip().empty()) {
    _this->_internal_set_service_ip(from._internal_service_ip());
  }
  if (from._internal_service_port() != 0) {
    _this->_internal_set_service_port(from._internal_service_port());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoadConfigReq::CopyFrom(const LoadConfigReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.LoadConfigReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadConfigReq::IsInitialized() const {
  return true;
}

void LoadConfigReq::InternalSwap(LoadConfigReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.service_ip_, lhs_arena,
      &other->_impl_.service_ip_, rhs_arena
  );
  swap(_impl_.service_port_, other->_impl_.service_port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadConfigReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_5fcomm_2eproto_getter, &descriptor_table_msg_5fcomm_2eproto_once,
      file_level_metadata_msg_5fcomm_2eproto[14]);
}

// ===================================================================

class DirConfig::_Internal {
 public:
};

DirConfig::DirConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.DirConfig)
}
DirConfig::DirConfig(const DirConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DirConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.root_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.root_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_root().empty()) {
    _this->_impl_.root_.Set(from._internal_root(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:msg.DirConfig)
}

inline void DirConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.root_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.root_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DirConfig::~DirConfig() {
  // @@protoc_insertion_point(destructor:msg.DirConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DirConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.root_.Destroy();
}

void DirConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DirConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.DirConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.root_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DirConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string root = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_root();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.DirConfig.root"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DirConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.DirConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string root = 1;
  if (!this->_internal_root().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_root().data(), static_cast<int>(this->_internal_root().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.DirConfig.root");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_root(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.DirConfig)
  return target;
}

size_t DirConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.DirConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string root = 1;
  if (!this->_internal_root().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_root());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DirConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DirConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DirConfig::GetClassData() const { return &_class_data_; }


void DirConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DirConfig*>(&to_msg);
  auto& from = static_cast<const DirConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.DirConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_root().empty()) {
    _this->_internal_set_root(from._internal_root());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DirConfig::CopyFrom(const DirConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.DirConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirConfig::IsInitialized() const {
  return true;
}

void DirConfig::InternalSwap(DirConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.root_, lhs_arena,
      &other->_impl_.root_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DirConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_5fcomm_2eproto_getter, &descriptor_table_msg_5fcomm_2eproto_once,
      file_level_metadata_msg_5fcomm_2eproto[15]);
}

// ===================================================================

class LoadAllConfigReq::_Internal {
 public:
};

LoadAllConfigReq::LoadAllConfigReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.LoadAllConfigReq)
}
LoadAllConfigReq::LoadAllConfigReq(const LoadAllConfigReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LoadAllConfigReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.page_){}
    , decltype(_impl_.page_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.page_, &from._impl_.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.page_count_) -
    reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.page_count_));
  // @@protoc_insertion_point(copy_constructor:msg.LoadAllConfigReq)
}

inline void LoadAllConfigReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.page_){0}
    , decltype(_impl_.page_count_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LoadAllConfigReq::~LoadAllConfigReq() {
  // @@protoc_insertion_point(destructor:msg.LoadAllConfigReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LoadAllConfigReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LoadAllConfigReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LoadAllConfigReq::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.LoadAllConfigReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.page_count_) -
      reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.page_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoadAllConfigReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 page = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 page_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.page_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LoadAllConfigReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.LoadAllConfigReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 page = 1;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_page(), target);
  }

  // int32 page_count = 2;
  if (this->_internal_page_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_page_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.LoadAllConfigReq)
  return target;
}

size_t LoadAllConfigReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.LoadAllConfigReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 page = 1;
  if (this->_internal_page() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_page());
  }

  // int32 page_count = 2;
  if (this->_internal_page_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_page_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoadAllConfigReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LoadAllConfigReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoadAllConfigReq::GetClassData() const { return &_class_data_; }


void LoadAllConfigReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LoadAllConfigReq*>(&to_msg);
  auto& from = static_cast<const LoadAllConfigReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.LoadAllConfigReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_page() != 0) {
    _this->_internal_set_page(from._internal_page());
  }
  if (from._internal_page_count() != 0) {
    _this->_internal_set_page_count(from._internal_page_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoadAllConfigReq::CopyFrom(const LoadAllConfigReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.LoadAllConfigReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadAllConfigReq::IsInitialized() const {
  return true;
}

void LoadAllConfigReq::InternalSwap(LoadAllConfigReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoadAllConfigReq, _impl_.page_count_)
      + sizeof(LoadAllConfigReq::_impl_.page_count_)
      - PROTOBUF_FIELD_OFFSET(LoadAllConfigReq, _impl_.page_)>(
          reinterpret_cast<char*>(&_impl_.page_),
          reinterpret_cast<char*>(&other->_impl_.page_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadAllConfigReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_5fcomm_2eproto_getter, &descriptor_table_msg_5fcomm_2eproto_once,
      file_level_metadata_msg_5fcomm_2eproto[16]);
}

// ===================================================================

class ConfigList::_Internal {
 public:
};

ConfigList::ConfigList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.ConfigList)
}
ConfigList::ConfigList(const ConfigList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConfigList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.configs_){from._impl_.configs_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.ConfigList)
}

inline void ConfigList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.configs_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ConfigList::~ConfigList() {
  // @@protoc_insertion_point(destructor:msg.ConfigList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConfigList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.configs_.~RepeatedPtrField();
}

void ConfigList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConfigList::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.ConfigList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.configs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .msg.Config configs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_configs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConfigList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.ConfigList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .msg.Config configs = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_configs_size()); i < n; i++) {
    const auto& repfield = this->_internal_configs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.ConfigList)
  return target;
}

size_t ConfigList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.ConfigList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.Config configs = 1;
  total_size += 1UL * this->_internal_configs_size();
  for (const auto& msg : this->_impl_.configs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConfigList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConfigList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConfigList::GetClassData() const { return &_class_data_; }


void ConfigList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConfigList*>(&to_msg);
  auto& from = static_cast<const ConfigList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.ConfigList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.configs_.MergeFrom(from._impl_.configs_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigList::CopyFrom(const ConfigList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.ConfigList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigList::IsInitialized() const {
  return true;
}

void ConfigList::InternalSwap(ConfigList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.configs_.InternalSwap(&other->_impl_.configs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_5fcomm_2eproto_getter, &descriptor_table_msg_5fcomm_2eproto_once,
      file_level_metadata_msg_5fcomm_2eproto[17]);
}

// ===================================================================

class GatewayConfig::_Internal {
 public:
};

GatewayConfig::GatewayConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.GatewayConfig)
}
GatewayConfig::GatewayConfig(const GatewayConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GatewayConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.crt_path_){}
    , decltype(_impl_.key_path_){}
    , decltype(_impl_.ca_path_){}
    , decltype(_impl_.is_ssl_){}
    , decltype(_impl_.server_port_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.crt_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.crt_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_crt_path().empty()) {
    _this->_impl_.crt_path_.Set(from._internal_crt_path(), 
      _this->GetArenaForAllocation());
  }
  _impl_.key_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key_path().empty()) {
    _this->_impl_.key_path_.Set(from._internal_key_path(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ca_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ca_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ca_path().empty()) {
    _this->_impl_.ca_path_.Set(from._internal_ca_path(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.is_ssl_, &from._impl_.is_ssl_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.server_port_) -
    reinterpret_cast<char*>(&_impl_.is_ssl_)) + sizeof(_impl_.server_port_));
  // @@protoc_insertion_point(copy_constructor:msg.GatewayConfig)
}

inline void GatewayConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.crt_path_){}
    , decltype(_impl_.key_path_){}
    , decltype(_impl_.ca_path_){}
    , decltype(_impl_.is_ssl_){false}
    , decltype(_impl_.server_port_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.crt_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.crt_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.key_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ca_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ca_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GatewayConfig::~GatewayConfig() {
  // @@protoc_insertion_point(destructor:msg.GatewayConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GatewayConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.crt_path_.Destroy();
  _impl_.key_path_.Destroy();
  _impl_.ca_path_.Destroy();
}

void GatewayConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GatewayConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.GatewayConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.crt_path_.ClearToEmpty();
  _impl_.key_path_.ClearToEmpty();
  _impl_.ca_path_.ClearToEmpty();
  ::memset(&_impl_.is_ssl_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.server_port_) -
      reinterpret_cast<char*>(&_impl_.is_ssl_)) + sizeof(_impl_.server_port_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GatewayConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool is_ssl = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.is_ssl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string crt_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_crt_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.GatewayConfig.crt_path"));
        } else
          goto handle_unusual;
        continue;
      // string key_path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_key_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.GatewayConfig.key_path"));
        } else
          goto handle_unusual;
        continue;
      // string ca_path = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_ca_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.GatewayConfig.ca_path"));
        } else
          goto handle_unusual;
        continue;
      // int32 server_port = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.server_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GatewayConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.GatewayConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_ssl = 1;
  if (this->_internal_is_ssl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_is_ssl(), target);
  }

  // string crt_path = 2;
  if (!this->_internal_crt_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_crt_path().data(), static_cast<int>(this->_internal_crt_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.GatewayConfig.crt_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_crt_path(), target);
  }

  // string key_path = 3;
  if (!this->_internal_key_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key_path().data(), static_cast<int>(this->_internal_key_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.GatewayConfig.key_path");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_key_path(), target);
  }

  // string ca_path = 4;
  if (!this->_internal_ca_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ca_path().data(), static_cast<int>(this->_internal_ca_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.GatewayConfig.ca_path");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_ca_path(), target);
  }

  // int32 server_port = 5;
  if (this->_internal_server_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_server_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.GatewayConfig)
  return target;
}

size_t GatewayConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.GatewayConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string crt_path = 2;
  if (!this->_internal_crt_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_crt_path());
  }

  // string key_path = 3;
  if (!this->_internal_key_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key_path());
  }

  // string ca_path = 4;
  if (!this->_internal_ca_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ca_path());
  }

  // bool is_ssl = 1;
  if (this->_internal_is_ssl() != 0) {
    total_size += 1 + 1;
  }

  // int32 server_port = 5;
  if (this->_internal_server_port() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_server_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GatewayConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GatewayConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GatewayConfig::GetClassData() const { return &_class_data_; }


void GatewayConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GatewayConfig*>(&to_msg);
  auto& from = static_cast<const GatewayConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.GatewayConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_crt_path().empty()) {
    _this->_internal_set_crt_path(from._internal_crt_path());
  }
  if (!from._internal_key_path().empty()) {
    _this->_internal_set_key_path(from._internal_key_path());
  }
  if (!from._internal_ca_path().empty()) {
    _this->_internal_set_ca_path(from._internal_ca_path());
  }
  if (from._internal_is_ssl() != 0) {
    _this->_internal_set_is_ssl(from._internal_is_ssl());
  }
  if (from._internal_server_port() != 0) {
    _this->_internal_set_server_port(from._internal_server_port());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GatewayConfig::CopyFrom(const GatewayConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.GatewayConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GatewayConfig::IsInitialized() const {
  return true;
}

void GatewayConfig::InternalSwap(GatewayConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.crt_path_, lhs_arena,
      &other->_impl_.crt_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_path_, lhs_arena,
      &other->_impl_.key_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ca_path_, lhs_arena,
      &other->_impl_.ca_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GatewayConfig, _impl_.server_port_)
      + sizeof(GatewayConfig::_impl_.server_port_)
      - PROTOBUF_FIELD_OFFSET(GatewayConfig, _impl_.is_ssl_)>(
          reinterpret_cast<char*>(&_impl_.is_ssl_),
          reinterpret_cast<char*>(&other->_impl_.is_ssl_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GatewayConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_5fcomm_2eproto_getter, &descriptor_table_msg_5fcomm_2eproto_once,
      file_level_metadata_msg_5fcomm_2eproto[18]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace msg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::msg::MsgHead*
Arena::CreateMaybeMessage< ::msg::MsgHead >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::MsgHead >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::LoginReq*
Arena::CreateMaybeMessage< ::msg::LoginReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::LoginReq >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::LoginRes*
Arena::CreateMaybeMessage< ::msg::LoginRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::LoginRes >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::DirReq*
Arena::CreateMaybeMessage< ::msg::DirReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::DirReq >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::DirRes_Dir*
Arena::CreateMaybeMessage< ::msg::DirRes_Dir >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::DirRes_Dir >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::DirRes*
Arena::CreateMaybeMessage< ::msg::DirRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::DirRes >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::RegisterReq*
Arena::CreateMaybeMessage< ::msg::RegisterReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::RegisterReq >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MessageRes*
Arena::CreateMaybeMessage< ::msg::MessageRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::MessageRes >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::ServiceMap_Service*
Arena::CreateMaybeMessage< ::msg::ServiceMap_Service >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::ServiceMap_Service >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::ServiceMap_ServiceList*
Arena::CreateMaybeMessage< ::msg::ServiceMap_ServiceList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::ServiceMap_ServiceList >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::ServiceMap_ServiceMapEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::ServiceMap_ServiceMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::ServiceMap_ServiceMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::ServiceMap*
Arena::CreateMaybeMessage< ::msg::ServiceMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::ServiceMap >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::GetServiceReq*
Arena::CreateMaybeMessage< ::msg::GetServiceReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::GetServiceReq >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::Config*
Arena::CreateMaybeMessage< ::msg::Config >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::Config >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::LoadConfigReq*
Arena::CreateMaybeMessage< ::msg::LoadConfigReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::LoadConfigReq >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::DirConfig*
Arena::CreateMaybeMessage< ::msg::DirConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::DirConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::LoadAllConfigReq*
Arena::CreateMaybeMessage< ::msg::LoadAllConfigReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::LoadAllConfigReq >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::ConfigList*
Arena::CreateMaybeMessage< ::msg::ConfigList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::ConfigList >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::GatewayConfig*
Arena::CreateMaybeMessage< ::msg::GatewayConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::GatewayConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
