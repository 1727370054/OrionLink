// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_comm.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_msg_5fcomm_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_msg_5fcomm_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "msg_type.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_msg_5fcomm_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_msg_5fcomm_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msg_5fcomm_2eproto;
namespace msg {
class DirReq;
class DirReqDefaultTypeInternal;
extern DirReqDefaultTypeInternal _DirReq_default_instance_;
class DirRes;
class DirResDefaultTypeInternal;
extern DirResDefaultTypeInternal _DirRes_default_instance_;
class DirRes_Dir;
class DirRes_DirDefaultTypeInternal;
extern DirRes_DirDefaultTypeInternal _DirRes_Dir_default_instance_;
class LoginReq;
class LoginReqDefaultTypeInternal;
extern LoginReqDefaultTypeInternal _LoginReq_default_instance_;
class LoginRes;
class LoginResDefaultTypeInternal;
extern LoginResDefaultTypeInternal _LoginRes_default_instance_;
class MsgHead;
class MsgHeadDefaultTypeInternal;
extern MsgHeadDefaultTypeInternal _MsgHead_default_instance_;
class ServiceMap;
class ServiceMapDefaultTypeInternal;
extern ServiceMapDefaultTypeInternal _ServiceMap_default_instance_;
class ServiceMap_Service;
class ServiceMap_ServiceDefaultTypeInternal;
extern ServiceMap_ServiceDefaultTypeInternal _ServiceMap_Service_default_instance_;
class ServiceMap_ServiceList;
class ServiceMap_ServiceListDefaultTypeInternal;
extern ServiceMap_ServiceListDefaultTypeInternal _ServiceMap_ServiceList_default_instance_;
class ServiceMap_ServiceMapEntry_DoNotUse;
class ServiceMap_ServiceMapEntry_DoNotUseDefaultTypeInternal;
extern ServiceMap_ServiceMapEntry_DoNotUseDefaultTypeInternal _ServiceMap_ServiceMapEntry_DoNotUse_default_instance_;
}  // namespace msg
PROTOBUF_NAMESPACE_OPEN
template<> ::msg::DirReq* Arena::CreateMaybeMessage<::msg::DirReq>(Arena*);
template<> ::msg::DirRes* Arena::CreateMaybeMessage<::msg::DirRes>(Arena*);
template<> ::msg::DirRes_Dir* Arena::CreateMaybeMessage<::msg::DirRes_Dir>(Arena*);
template<> ::msg::LoginReq* Arena::CreateMaybeMessage<::msg::LoginReq>(Arena*);
template<> ::msg::LoginRes* Arena::CreateMaybeMessage<::msg::LoginRes>(Arena*);
template<> ::msg::MsgHead* Arena::CreateMaybeMessage<::msg::MsgHead>(Arena*);
template<> ::msg::ServiceMap* Arena::CreateMaybeMessage<::msg::ServiceMap>(Arena*);
template<> ::msg::ServiceMap_Service* Arena::CreateMaybeMessage<::msg::ServiceMap_Service>(Arena*);
template<> ::msg::ServiceMap_ServiceList* Arena::CreateMaybeMessage<::msg::ServiceMap_ServiceList>(Arena*);
template<> ::msg::ServiceMap_ServiceMapEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::ServiceMap_ServiceMapEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace msg {

enum LoginRes_LoginResType : int {
  LoginRes_LoginResType_OK = 0,
  LoginRes_LoginResType_ERROR = 1,
  LoginRes_LoginResType_NOUSER = 2,
  LoginRes_LoginResType_LoginRes_LoginResType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LoginRes_LoginResType_LoginRes_LoginResType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LoginRes_LoginResType_IsValid(int value);
constexpr LoginRes_LoginResType LoginRes_LoginResType_LoginResType_MIN = LoginRes_LoginResType_OK;
constexpr LoginRes_LoginResType LoginRes_LoginResType_LoginResType_MAX = LoginRes_LoginResType_NOUSER;
constexpr int LoginRes_LoginResType_LoginResType_ARRAYSIZE = LoginRes_LoginResType_LoginResType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LoginRes_LoginResType_descriptor();
template<typename T>
inline const std::string& LoginRes_LoginResType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LoginRes_LoginResType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LoginRes_LoginResType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LoginRes_LoginResType_descriptor(), enum_t_value);
}
inline bool LoginRes_LoginResType_Parse(
    const std::string& name, LoginRes_LoginResType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LoginRes_LoginResType>(
    LoginRes_LoginResType_descriptor(), name, value);
}
enum DirRes_DirResType : int {
  DirRes_DirResType_OK = 0,
  DirRes_DirResType_ERROR = 1,
  DirRes_DirResType_NODIR = 2,
  DirRes_DirResType_DirRes_DirResType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DirRes_DirResType_DirRes_DirResType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DirRes_DirResType_IsValid(int value);
constexpr DirRes_DirResType DirRes_DirResType_DirResType_MIN = DirRes_DirResType_OK;
constexpr DirRes_DirResType DirRes_DirResType_DirResType_MAX = DirRes_DirResType_NODIR;
constexpr int DirRes_DirResType_DirResType_ARRAYSIZE = DirRes_DirResType_DirResType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DirRes_DirResType_descriptor();
template<typename T>
inline const std::string& DirRes_DirResType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DirRes_DirResType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DirRes_DirResType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DirRes_DirResType_descriptor(), enum_t_value);
}
inline bool DirRes_DirResType_Parse(
    const std::string& name, DirRes_DirResType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DirRes_DirResType>(
    DirRes_DirResType_descriptor(), name, value);
}
// ===================================================================

class MsgHead :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.MsgHead) */ {
 public:
  MsgHead();
  virtual ~MsgHead();

  MsgHead(const MsgHead& from);
  MsgHead(MsgHead&& from) noexcept
    : MsgHead() {
    *this = ::std::move(from);
  }

  inline MsgHead& operator=(const MsgHead& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgHead& operator=(MsgHead&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgHead& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MsgHead* internal_default_instance() {
    return reinterpret_cast<const MsgHead*>(
               &_MsgHead_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MsgHead& a, MsgHead& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgHead* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgHead* New() const final {
    return CreateMaybeMessage<MsgHead>(nullptr);
  }

  MsgHead* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgHead>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgHead& from);
  void MergeFrom(const MsgHead& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgHead* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.MsgHead";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_5fcomm_2eproto);
    return ::descriptor_table_msg_5fcomm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 3,
    kServiceNameFieldNumber = 4,
    kMsgSizeFieldNumber = 1,
    kMsgTypeFieldNumber = 2,
    kRouterIdFieldNumber = 5,
  };
  // string token = 3;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // string service_name = 4;
  void clear_service_name();
  const std::string& service_name() const;
  void set_service_name(const std::string& value);
  void set_service_name(std::string&& value);
  void set_service_name(const char* value);
  void set_service_name(const char* value, size_t size);
  std::string* mutable_service_name();
  std::string* release_service_name();
  void set_allocated_service_name(std::string* service_name);
  private:
  const std::string& _internal_service_name() const;
  void _internal_set_service_name(const std::string& value);
  std::string* _internal_mutable_service_name();
  public:

  // int32 msg_size = 1;
  void clear_msg_size();
  ::PROTOBUF_NAMESPACE_ID::int32 msg_size() const;
  void set_msg_size(::PROTOBUF_NAMESPACE_ID::int32 value);

  // .msg.MsgType msg_type = 2;
  void clear_msg_type();
  ::msg::MsgType msg_type() const;
  void set_msg_type(::msg::MsgType value);

  // int64 router_id = 5;
  void clear_router_id();
  ::PROTOBUF_NAMESPACE_ID::int64 router_id() const;
  void set_router_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:msg.MsgHead)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 msg_size_;
  int msg_type_;
  ::PROTOBUF_NAMESPACE_ID::int64 router_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_5fcomm_2eproto;
};
// -------------------------------------------------------------------

class LoginReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.LoginReq) */ {
 public:
  LoginReq();
  virtual ~LoginReq();

  LoginReq(const LoginReq& from);
  LoginReq(LoginReq&& from) noexcept
    : LoginReq() {
    *this = ::std::move(from);
  }

  inline LoginReq& operator=(const LoginReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginReq& operator=(LoginReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginReq* internal_default_instance() {
    return reinterpret_cast<const LoginReq*>(
               &_LoginReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LoginReq& a, LoginReq& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginReq* New() const final {
    return CreateMaybeMessage<LoginReq>(nullptr);
  }

  LoginReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginReq& from);
  void MergeFrom(const LoginReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.LoginReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_5fcomm_2eproto);
    return ::descriptor_table_msg_5fcomm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:msg.LoginReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_5fcomm_2eproto;
};
// -------------------------------------------------------------------

class LoginRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.LoginRes) */ {
 public:
  LoginRes();
  virtual ~LoginRes();

  LoginRes(const LoginRes& from);
  LoginRes(LoginRes&& from) noexcept
    : LoginRes() {
    *this = ::std::move(from);
  }

  inline LoginRes& operator=(const LoginRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginRes& operator=(LoginRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginRes* internal_default_instance() {
    return reinterpret_cast<const LoginRes*>(
               &_LoginRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LoginRes& a, LoginRes& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginRes* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginRes* New() const final {
    return CreateMaybeMessage<LoginRes>(nullptr);
  }

  LoginRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginRes& from);
  void MergeFrom(const LoginRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.LoginRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_5fcomm_2eproto);
    return ::descriptor_table_msg_5fcomm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef LoginRes_LoginResType LoginResType;
  static constexpr LoginResType OK =
    LoginRes_LoginResType_OK;
  static constexpr LoginResType ERROR =
    LoginRes_LoginResType_ERROR;
  static constexpr LoginResType NOUSER =
    LoginRes_LoginResType_NOUSER;
  static inline bool LoginResType_IsValid(int value) {
    return LoginRes_LoginResType_IsValid(value);
  }
  static constexpr LoginResType LoginResType_MIN =
    LoginRes_LoginResType_LoginResType_MIN;
  static constexpr LoginResType LoginResType_MAX =
    LoginRes_LoginResType_LoginResType_MAX;
  static constexpr int LoginResType_ARRAYSIZE =
    LoginRes_LoginResType_LoginResType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  LoginResType_descriptor() {
    return LoginRes_LoginResType_descriptor();
  }
  template<typename T>
  static inline const std::string& LoginResType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, LoginResType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function LoginResType_Name.");
    return LoginRes_LoginResType_Name(enum_t_value);
  }
  static inline bool LoginResType_Parse(const std::string& name,
      LoginResType* value) {
    return LoginRes_LoginResType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 2,
    kDescFieldNumber = 1,
  };
  // string token = 2;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // .msg.LoginRes.LoginResType desc = 1;
  void clear_desc();
  ::msg::LoginRes_LoginResType desc() const;
  void set_desc(::msg::LoginRes_LoginResType value);

  // @@protoc_insertion_point(class_scope:msg.LoginRes)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  int desc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_5fcomm_2eproto;
};
// -------------------------------------------------------------------

class DirReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.DirReq) */ {
 public:
  DirReq();
  virtual ~DirReq();

  DirReq(const DirReq& from);
  DirReq(DirReq&& from) noexcept
    : DirReq() {
    *this = ::std::move(from);
  }

  inline DirReq& operator=(const DirReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline DirReq& operator=(DirReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DirReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DirReq* internal_default_instance() {
    return reinterpret_cast<const DirReq*>(
               &_DirReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DirReq& a, DirReq& b) {
    a.Swap(&b);
  }
  inline void Swap(DirReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DirReq* New() const final {
    return CreateMaybeMessage<DirReq>(nullptr);
  }

  DirReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DirReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DirReq& from);
  void MergeFrom(const DirReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DirReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.DirReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_5fcomm_2eproto);
    return ::descriptor_table_msg_5fcomm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
  };
  // string path = 1;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // @@protoc_insertion_point(class_scope:msg.DirReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_5fcomm_2eproto;
};
// -------------------------------------------------------------------

class DirRes_Dir :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.DirRes.Dir) */ {
 public:
  DirRes_Dir();
  virtual ~DirRes_Dir();

  DirRes_Dir(const DirRes_Dir& from);
  DirRes_Dir(DirRes_Dir&& from) noexcept
    : DirRes_Dir() {
    *this = ::std::move(from);
  }

  inline DirRes_Dir& operator=(const DirRes_Dir& from) {
    CopyFrom(from);
    return *this;
  }
  inline DirRes_Dir& operator=(DirRes_Dir&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DirRes_Dir& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DirRes_Dir* internal_default_instance() {
    return reinterpret_cast<const DirRes_Dir*>(
               &_DirRes_Dir_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DirRes_Dir& a, DirRes_Dir& b) {
    a.Swap(&b);
  }
  inline void Swap(DirRes_Dir* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DirRes_Dir* New() const final {
    return CreateMaybeMessage<DirRes_Dir>(nullptr);
  }

  DirRes_Dir* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DirRes_Dir>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DirRes_Dir& from);
  void MergeFrom(const DirRes_Dir& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DirRes_Dir* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.DirRes.Dir";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_5fcomm_2eproto);
    return ::descriptor_table_msg_5fcomm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilenameFieldNumber = 1,
    kFilesizeFieldNumber = 2,
  };
  // string filename = 1;
  void clear_filename();
  const std::string& filename() const;
  void set_filename(const std::string& value);
  void set_filename(std::string&& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  std::string* mutable_filename();
  std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // int32 filesize = 2;
  void clear_filesize();
  ::PROTOBUF_NAMESPACE_ID::int32 filesize() const;
  void set_filesize(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:msg.DirRes.Dir)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::PROTOBUF_NAMESPACE_ID::int32 filesize_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_5fcomm_2eproto;
};
// -------------------------------------------------------------------

class DirRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.DirRes) */ {
 public:
  DirRes();
  virtual ~DirRes();

  DirRes(const DirRes& from);
  DirRes(DirRes&& from) noexcept
    : DirRes() {
    *this = ::std::move(from);
  }

  inline DirRes& operator=(const DirRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline DirRes& operator=(DirRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DirRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DirRes* internal_default_instance() {
    return reinterpret_cast<const DirRes*>(
               &_DirRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DirRes& a, DirRes& b) {
    a.Swap(&b);
  }
  inline void Swap(DirRes* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DirRes* New() const final {
    return CreateMaybeMessage<DirRes>(nullptr);
  }

  DirRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DirRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DirRes& from);
  void MergeFrom(const DirRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DirRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.DirRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_5fcomm_2eproto);
    return ::descriptor_table_msg_5fcomm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef DirRes_Dir Dir;

  typedef DirRes_DirResType DirResType;
  static constexpr DirResType OK =
    DirRes_DirResType_OK;
  static constexpr DirResType ERROR =
    DirRes_DirResType_ERROR;
  static constexpr DirResType NODIR =
    DirRes_DirResType_NODIR;
  static inline bool DirResType_IsValid(int value) {
    return DirRes_DirResType_IsValid(value);
  }
  static constexpr DirResType DirResType_MIN =
    DirRes_DirResType_DirResType_MIN;
  static constexpr DirResType DirResType_MAX =
    DirRes_DirResType_DirResType_MAX;
  static constexpr int DirResType_ARRAYSIZE =
    DirRes_DirResType_DirResType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DirResType_descriptor() {
    return DirRes_DirResType_descriptor();
  }
  template<typename T>
  static inline const std::string& DirResType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DirResType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DirResType_Name.");
    return DirRes_DirResType_Name(enum_t_value);
  }
  static inline bool DirResType_Parse(const std::string& name,
      DirResType* value) {
    return DirRes_DirResType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDirsFieldNumber = 2,
    kDescFieldNumber = 1,
  };
  // repeated .msg.DirRes.Dir dirs = 2;
  int dirs_size() const;
  void clear_dirs();
  ::msg::DirRes_Dir* mutable_dirs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::DirRes_Dir >*
      mutable_dirs();
  const ::msg::DirRes_Dir& dirs(int index) const;
  ::msg::DirRes_Dir* add_dirs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::DirRes_Dir >&
      dirs() const;

  // .msg.DirRes.DirResType desc = 1;
  void clear_desc();
  ::msg::DirRes_DirResType desc() const;
  void set_desc(::msg::DirRes_DirResType value);

  // @@protoc_insertion_point(class_scope:msg.DirRes)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::DirRes_Dir > dirs_;
  int desc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_5fcomm_2eproto;
};
// -------------------------------------------------------------------

class ServiceMap_Service :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.ServiceMap.Service) */ {
 public:
  ServiceMap_Service();
  virtual ~ServiceMap_Service();

  ServiceMap_Service(const ServiceMap_Service& from);
  ServiceMap_Service(ServiceMap_Service&& from) noexcept
    : ServiceMap_Service() {
    *this = ::std::move(from);
  }

  inline ServiceMap_Service& operator=(const ServiceMap_Service& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceMap_Service& operator=(ServiceMap_Service&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServiceMap_Service& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceMap_Service* internal_default_instance() {
    return reinterpret_cast<const ServiceMap_Service*>(
               &_ServiceMap_Service_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ServiceMap_Service& a, ServiceMap_Service& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceMap_Service* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServiceMap_Service* New() const final {
    return CreateMaybeMessage<ServiceMap_Service>(nullptr);
  }

  ServiceMap_Service* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServiceMap_Service>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServiceMap_Service& from);
  void MergeFrom(const ServiceMap_Service& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceMap_Service* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.ServiceMap.Service";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_5fcomm_2eproto);
    return ::descriptor_table_msg_5fcomm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kIpFieldNumber = 2,
    kPortFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string ip = 2;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // int32 port = 3;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:msg.ServiceMap.Service)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_5fcomm_2eproto;
};
// -------------------------------------------------------------------

class ServiceMap_ServiceList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.ServiceMap.ServiceList) */ {
 public:
  ServiceMap_ServiceList();
  virtual ~ServiceMap_ServiceList();

  ServiceMap_ServiceList(const ServiceMap_ServiceList& from);
  ServiceMap_ServiceList(ServiceMap_ServiceList&& from) noexcept
    : ServiceMap_ServiceList() {
    *this = ::std::move(from);
  }

  inline ServiceMap_ServiceList& operator=(const ServiceMap_ServiceList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceMap_ServiceList& operator=(ServiceMap_ServiceList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServiceMap_ServiceList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceMap_ServiceList* internal_default_instance() {
    return reinterpret_cast<const ServiceMap_ServiceList*>(
               &_ServiceMap_ServiceList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ServiceMap_ServiceList& a, ServiceMap_ServiceList& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceMap_ServiceList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServiceMap_ServiceList* New() const final {
    return CreateMaybeMessage<ServiceMap_ServiceList>(nullptr);
  }

  ServiceMap_ServiceList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServiceMap_ServiceList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServiceMap_ServiceList& from);
  void MergeFrom(const ServiceMap_ServiceList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceMap_ServiceList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.ServiceMap.ServiceList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_5fcomm_2eproto);
    return ::descriptor_table_msg_5fcomm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceFieldNumber = 1,
  };
  // repeated .msg.ServiceMap.Service service = 1;
  int service_size() const;
  void clear_service();
  ::msg::ServiceMap_Service* mutable_service(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ServiceMap_Service >*
      mutable_service();
  const ::msg::ServiceMap_Service& service(int index) const;
  ::msg::ServiceMap_Service* add_service();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ServiceMap_Service >&
      service() const;

  // @@protoc_insertion_point(class_scope:msg.ServiceMap.ServiceList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ServiceMap_Service > service_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_5fcomm_2eproto;
};
// -------------------------------------------------------------------

class ServiceMap_ServiceMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ServiceMap_ServiceMapEntry_DoNotUse, 
    std::string, ::msg::ServiceMap_ServiceList,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ServiceMap_ServiceMapEntry_DoNotUse, 
    std::string, ::msg::ServiceMap_ServiceList,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  ServiceMap_ServiceMapEntry_DoNotUse();
  ServiceMap_ServiceMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ServiceMap_ServiceMapEntry_DoNotUse& other);
  static const ServiceMap_ServiceMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ServiceMap_ServiceMapEntry_DoNotUse*>(&_ServiceMap_ServiceMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "msg.ServiceMap.ServiceMapEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_5fcomm_2eproto);
    return ::descriptor_table_msg_5fcomm_2eproto.file_level_metadata[8];
  }

  public:
};

// -------------------------------------------------------------------

class ServiceMap :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.ServiceMap) */ {
 public:
  ServiceMap();
  virtual ~ServiceMap();

  ServiceMap(const ServiceMap& from);
  ServiceMap(ServiceMap&& from) noexcept
    : ServiceMap() {
    *this = ::std::move(from);
  }

  inline ServiceMap& operator=(const ServiceMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceMap& operator=(ServiceMap&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServiceMap& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceMap* internal_default_instance() {
    return reinterpret_cast<const ServiceMap*>(
               &_ServiceMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ServiceMap& a, ServiceMap& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceMap* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServiceMap* New() const final {
    return CreateMaybeMessage<ServiceMap>(nullptr);
  }

  ServiceMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServiceMap>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServiceMap& from);
  void MergeFrom(const ServiceMap& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceMap* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.ServiceMap";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_5fcomm_2eproto);
    return ::descriptor_table_msg_5fcomm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ServiceMap_Service Service;
  typedef ServiceMap_ServiceList ServiceList;

  // accessors -------------------------------------------------------

  enum : int {
    kServiceMapFieldNumber = 1,
  };
  // map<string, .msg.ServiceMap.ServiceList> service_map = 1;
  int service_map_size() const;
  void clear_service_map();
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::ServiceMap_ServiceList >&
      service_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::ServiceMap_ServiceList >*
      mutable_service_map();

  // @@protoc_insertion_point(class_scope:msg.ServiceMap)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ServiceMap_ServiceMapEntry_DoNotUse,
      std::string, ::msg::ServiceMap_ServiceList,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > service_map_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_5fcomm_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MsgHead

// int32 msg_size = 1;
inline void MsgHead::clear_msg_size() {
  msg_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgHead::msg_size() const {
  // @@protoc_insertion_point(field_get:msg.MsgHead.msg_size)
  return msg_size_;
}
inline void MsgHead::set_msg_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  msg_size_ = value;
  // @@protoc_insertion_point(field_set:msg.MsgHead.msg_size)
}

// .msg.MsgType msg_type = 2;
inline void MsgHead::clear_msg_type() {
  msg_type_ = 0;
}
inline ::msg::MsgType MsgHead::msg_type() const {
  // @@protoc_insertion_point(field_get:msg.MsgHead.msg_type)
  return static_cast< ::msg::MsgType >(msg_type_);
}
inline void MsgHead::set_msg_type(::msg::MsgType value) {
  
  msg_type_ = value;
  // @@protoc_insertion_point(field_set:msg.MsgHead.msg_type)
}

// string token = 3;
inline void MsgHead::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MsgHead::token() const {
  // @@protoc_insertion_point(field_get:msg.MsgHead.token)
  return _internal_token();
}
inline void MsgHead::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:msg.MsgHead.token)
}
inline std::string* MsgHead::mutable_token() {
  // @@protoc_insertion_point(field_mutable:msg.MsgHead.token)
  return _internal_mutable_token();
}
inline const std::string& MsgHead::_internal_token() const {
  return token_.GetNoArena();
}
inline void MsgHead::_internal_set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MsgHead::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:msg.MsgHead.token)
}
inline void MsgHead::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:msg.MsgHead.token)
}
inline void MsgHead::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:msg.MsgHead.token)
}
inline std::string* MsgHead::_internal_mutable_token() {
  
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MsgHead::release_token() {
  // @@protoc_insertion_point(field_release:msg.MsgHead.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MsgHead::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:msg.MsgHead.token)
}

// string service_name = 4;
inline void MsgHead::clear_service_name() {
  service_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MsgHead::service_name() const {
  // @@protoc_insertion_point(field_get:msg.MsgHead.service_name)
  return _internal_service_name();
}
inline void MsgHead::set_service_name(const std::string& value) {
  _internal_set_service_name(value);
  // @@protoc_insertion_point(field_set:msg.MsgHead.service_name)
}
inline std::string* MsgHead::mutable_service_name() {
  // @@protoc_insertion_point(field_mutable:msg.MsgHead.service_name)
  return _internal_mutable_service_name();
}
inline const std::string& MsgHead::_internal_service_name() const {
  return service_name_.GetNoArena();
}
inline void MsgHead::_internal_set_service_name(const std::string& value) {
  
  service_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MsgHead::set_service_name(std::string&& value) {
  
  service_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:msg.MsgHead.service_name)
}
inline void MsgHead::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  service_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:msg.MsgHead.service_name)
}
inline void MsgHead::set_service_name(const char* value, size_t size) {
  
  service_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:msg.MsgHead.service_name)
}
inline std::string* MsgHead::_internal_mutable_service_name() {
  
  return service_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MsgHead::release_service_name() {
  // @@protoc_insertion_point(field_release:msg.MsgHead.service_name)
  
  return service_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MsgHead::set_allocated_service_name(std::string* service_name) {
  if (service_name != nullptr) {
    
  } else {
    
  }
  service_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service_name);
  // @@protoc_insertion_point(field_set_allocated:msg.MsgHead.service_name)
}

// int64 router_id = 5;
inline void MsgHead::clear_router_id() {
  router_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgHead::router_id() const {
  // @@protoc_insertion_point(field_get:msg.MsgHead.router_id)
  return router_id_;
}
inline void MsgHead::set_router_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  router_id_ = value;
  // @@protoc_insertion_point(field_set:msg.MsgHead.router_id)
}

// -------------------------------------------------------------------

// LoginReq

// string username = 1;
inline void LoginReq::clear_username() {
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginReq::username() const {
  // @@protoc_insertion_point(field_get:msg.LoginReq.username)
  return _internal_username();
}
inline void LoginReq::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:msg.LoginReq.username)
}
inline std::string* LoginReq::mutable_username() {
  // @@protoc_insertion_point(field_mutable:msg.LoginReq.username)
  return _internal_mutable_username();
}
inline const std::string& LoginReq::_internal_username() const {
  return username_.GetNoArena();
}
inline void LoginReq::_internal_set_username(const std::string& value) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LoginReq::set_username(std::string&& value) {
  
  username_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:msg.LoginReq.username)
}
inline void LoginReq::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:msg.LoginReq.username)
}
inline void LoginReq::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:msg.LoginReq.username)
}
inline std::string* LoginReq::_internal_mutable_username() {
  
  return username_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginReq::release_username() {
  // @@protoc_insertion_point(field_release:msg.LoginReq.username)
  
  return username_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginReq::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:msg.LoginReq.username)
}

// string password = 2;
inline void LoginReq::clear_password() {
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginReq::password() const {
  // @@protoc_insertion_point(field_get:msg.LoginReq.password)
  return _internal_password();
}
inline void LoginReq::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:msg.LoginReq.password)
}
inline std::string* LoginReq::mutable_password() {
  // @@protoc_insertion_point(field_mutable:msg.LoginReq.password)
  return _internal_mutable_password();
}
inline const std::string& LoginReq::_internal_password() const {
  return password_.GetNoArena();
}
inline void LoginReq::_internal_set_password(const std::string& value) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LoginReq::set_password(std::string&& value) {
  
  password_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:msg.LoginReq.password)
}
inline void LoginReq::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:msg.LoginReq.password)
}
inline void LoginReq::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:msg.LoginReq.password)
}
inline std::string* LoginReq::_internal_mutable_password() {
  
  return password_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginReq::release_password() {
  // @@protoc_insertion_point(field_release:msg.LoginReq.password)
  
  return password_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginReq::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:msg.LoginReq.password)
}

// -------------------------------------------------------------------

// LoginRes

// .msg.LoginRes.LoginResType desc = 1;
inline void LoginRes::clear_desc() {
  desc_ = 0;
}
inline ::msg::LoginRes_LoginResType LoginRes::desc() const {
  // @@protoc_insertion_point(field_get:msg.LoginRes.desc)
  return static_cast< ::msg::LoginRes_LoginResType >(desc_);
}
inline void LoginRes::set_desc(::msg::LoginRes_LoginResType value) {
  
  desc_ = value;
  // @@protoc_insertion_point(field_set:msg.LoginRes.desc)
}

// string token = 2;
inline void LoginRes::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginRes::token() const {
  // @@protoc_insertion_point(field_get:msg.LoginRes.token)
  return _internal_token();
}
inline void LoginRes::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:msg.LoginRes.token)
}
inline std::string* LoginRes::mutable_token() {
  // @@protoc_insertion_point(field_mutable:msg.LoginRes.token)
  return _internal_mutable_token();
}
inline const std::string& LoginRes::_internal_token() const {
  return token_.GetNoArena();
}
inline void LoginRes::_internal_set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LoginRes::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:msg.LoginRes.token)
}
inline void LoginRes::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:msg.LoginRes.token)
}
inline void LoginRes::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:msg.LoginRes.token)
}
inline std::string* LoginRes::_internal_mutable_token() {
  
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginRes::release_token() {
  // @@protoc_insertion_point(field_release:msg.LoginRes.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRes::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:msg.LoginRes.token)
}

// -------------------------------------------------------------------

// DirReq

// string path = 1;
inline void DirReq::clear_path() {
  path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DirReq::path() const {
  // @@protoc_insertion_point(field_get:msg.DirReq.path)
  return _internal_path();
}
inline void DirReq::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:msg.DirReq.path)
}
inline std::string* DirReq::mutable_path() {
  // @@protoc_insertion_point(field_mutable:msg.DirReq.path)
  return _internal_mutable_path();
}
inline const std::string& DirReq::_internal_path() const {
  return path_.GetNoArena();
}
inline void DirReq::_internal_set_path(const std::string& value) {
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DirReq::set_path(std::string&& value) {
  
  path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:msg.DirReq.path)
}
inline void DirReq::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:msg.DirReq.path)
}
inline void DirReq::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:msg.DirReq.path)
}
inline std::string* DirReq::_internal_mutable_path() {
  
  return path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DirReq::release_path() {
  // @@protoc_insertion_point(field_release:msg.DirReq.path)
  
  return path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DirReq::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:msg.DirReq.path)
}

// -------------------------------------------------------------------

// DirRes_Dir

// string filename = 1;
inline void DirRes_Dir::clear_filename() {
  filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DirRes_Dir::filename() const {
  // @@protoc_insertion_point(field_get:msg.DirRes.Dir.filename)
  return _internal_filename();
}
inline void DirRes_Dir::set_filename(const std::string& value) {
  _internal_set_filename(value);
  // @@protoc_insertion_point(field_set:msg.DirRes.Dir.filename)
}
inline std::string* DirRes_Dir::mutable_filename() {
  // @@protoc_insertion_point(field_mutable:msg.DirRes.Dir.filename)
  return _internal_mutable_filename();
}
inline const std::string& DirRes_Dir::_internal_filename() const {
  return filename_.GetNoArena();
}
inline void DirRes_Dir::_internal_set_filename(const std::string& value) {
  
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DirRes_Dir::set_filename(std::string&& value) {
  
  filename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:msg.DirRes.Dir.filename)
}
inline void DirRes_Dir::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:msg.DirRes.Dir.filename)
}
inline void DirRes_Dir::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:msg.DirRes.Dir.filename)
}
inline std::string* DirRes_Dir::_internal_mutable_filename() {
  
  return filename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DirRes_Dir::release_filename() {
  // @@protoc_insertion_point(field_release:msg.DirRes.Dir.filename)
  
  return filename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DirRes_Dir::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:msg.DirRes.Dir.filename)
}

// int32 filesize = 2;
inline void DirRes_Dir::clear_filesize() {
  filesize_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DirRes_Dir::filesize() const {
  // @@protoc_insertion_point(field_get:msg.DirRes.Dir.filesize)
  return filesize_;
}
inline void DirRes_Dir::set_filesize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  filesize_ = value;
  // @@protoc_insertion_point(field_set:msg.DirRes.Dir.filesize)
}

// -------------------------------------------------------------------

// DirRes

// .msg.DirRes.DirResType desc = 1;
inline void DirRes::clear_desc() {
  desc_ = 0;
}
inline ::msg::DirRes_DirResType DirRes::desc() const {
  // @@protoc_insertion_point(field_get:msg.DirRes.desc)
  return static_cast< ::msg::DirRes_DirResType >(desc_);
}
inline void DirRes::set_desc(::msg::DirRes_DirResType value) {
  
  desc_ = value;
  // @@protoc_insertion_point(field_set:msg.DirRes.desc)
}

// repeated .msg.DirRes.Dir dirs = 2;
inline int DirRes::dirs_size() const {
  return dirs_.size();
}
inline void DirRes::clear_dirs() {
  dirs_.Clear();
}
inline ::msg::DirRes_Dir* DirRes::mutable_dirs(int index) {
  // @@protoc_insertion_point(field_mutable:msg.DirRes.dirs)
  return dirs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::DirRes_Dir >*
DirRes::mutable_dirs() {
  // @@protoc_insertion_point(field_mutable_list:msg.DirRes.dirs)
  return &dirs_;
}
inline const ::msg::DirRes_Dir& DirRes::dirs(int index) const {
  // @@protoc_insertion_point(field_get:msg.DirRes.dirs)
  return dirs_.Get(index);
}
inline ::msg::DirRes_Dir* DirRes::add_dirs() {
  // @@protoc_insertion_point(field_add:msg.DirRes.dirs)
  return dirs_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::DirRes_Dir >&
DirRes::dirs() const {
  // @@protoc_insertion_point(field_list:msg.DirRes.dirs)
  return dirs_;
}

// -------------------------------------------------------------------

// ServiceMap_Service

// string name = 1;
inline void ServiceMap_Service::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ServiceMap_Service::name() const {
  // @@protoc_insertion_point(field_get:msg.ServiceMap.Service.name)
  return _internal_name();
}
inline void ServiceMap_Service::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:msg.ServiceMap.Service.name)
}
inline std::string* ServiceMap_Service::mutable_name() {
  // @@protoc_insertion_point(field_mutable:msg.ServiceMap.Service.name)
  return _internal_mutable_name();
}
inline const std::string& ServiceMap_Service::_internal_name() const {
  return name_.GetNoArena();
}
inline void ServiceMap_Service::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ServiceMap_Service::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:msg.ServiceMap.Service.name)
}
inline void ServiceMap_Service::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:msg.ServiceMap.Service.name)
}
inline void ServiceMap_Service::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:msg.ServiceMap.Service.name)
}
inline std::string* ServiceMap_Service::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServiceMap_Service::release_name() {
  // @@protoc_insertion_point(field_release:msg.ServiceMap.Service.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceMap_Service::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:msg.ServiceMap.Service.name)
}

// string ip = 2;
inline void ServiceMap_Service::clear_ip() {
  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ServiceMap_Service::ip() const {
  // @@protoc_insertion_point(field_get:msg.ServiceMap.Service.ip)
  return _internal_ip();
}
inline void ServiceMap_Service::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:msg.ServiceMap.Service.ip)
}
inline std::string* ServiceMap_Service::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:msg.ServiceMap.Service.ip)
  return _internal_mutable_ip();
}
inline const std::string& ServiceMap_Service::_internal_ip() const {
  return ip_.GetNoArena();
}
inline void ServiceMap_Service::_internal_set_ip(const std::string& value) {
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ServiceMap_Service::set_ip(std::string&& value) {
  
  ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:msg.ServiceMap.Service.ip)
}
inline void ServiceMap_Service::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:msg.ServiceMap.Service.ip)
}
inline void ServiceMap_Service::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:msg.ServiceMap.Service.ip)
}
inline std::string* ServiceMap_Service::_internal_mutable_ip() {
  
  return ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServiceMap_Service::release_ip() {
  // @@protoc_insertion_point(field_release:msg.ServiceMap.Service.ip)
  
  return ip_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceMap_Service::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:msg.ServiceMap.Service.ip)
}

// int32 port = 3;
inline void ServiceMap_Service::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServiceMap_Service::port() const {
  // @@protoc_insertion_point(field_get:msg.ServiceMap.Service.port)
  return port_;
}
inline void ServiceMap_Service::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:msg.ServiceMap.Service.port)
}

// -------------------------------------------------------------------

// ServiceMap_ServiceList

// repeated .msg.ServiceMap.Service service = 1;
inline int ServiceMap_ServiceList::service_size() const {
  return service_.size();
}
inline void ServiceMap_ServiceList::clear_service() {
  service_.Clear();
}
inline ::msg::ServiceMap_Service* ServiceMap_ServiceList::mutable_service(int index) {
  // @@protoc_insertion_point(field_mutable:msg.ServiceMap.ServiceList.service)
  return service_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ServiceMap_Service >*
ServiceMap_ServiceList::mutable_service() {
  // @@protoc_insertion_point(field_mutable_list:msg.ServiceMap.ServiceList.service)
  return &service_;
}
inline const ::msg::ServiceMap_Service& ServiceMap_ServiceList::service(int index) const {
  // @@protoc_insertion_point(field_get:msg.ServiceMap.ServiceList.service)
  return service_.Get(index);
}
inline ::msg::ServiceMap_Service* ServiceMap_ServiceList::add_service() {
  // @@protoc_insertion_point(field_add:msg.ServiceMap.ServiceList.service)
  return service_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ServiceMap_Service >&
ServiceMap_ServiceList::service() const {
  // @@protoc_insertion_point(field_list:msg.ServiceMap.ServiceList.service)
  return service_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ServiceMap

// map<string, .msg.ServiceMap.ServiceList> service_map = 1;
inline int ServiceMap::service_map_size() const {
  return service_map_.size();
}
inline void ServiceMap::clear_service_map() {
  service_map_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::ServiceMap_ServiceList >&
ServiceMap::service_map() const {
  // @@protoc_insertion_point(field_map:msg.ServiceMap.service_map)
  return service_map_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::ServiceMap_ServiceList >*
ServiceMap::mutable_service_map() {
  // @@protoc_insertion_point(field_mutable_map:msg.ServiceMap.service_map)
  return service_map_.MutableMap();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace msg

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::msg::LoginRes_LoginResType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::LoginRes_LoginResType>() {
  return ::msg::LoginRes_LoginResType_descriptor();
}
template <> struct is_proto_enum< ::msg::DirRes_DirResType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::DirRes_DirResType>() {
  return ::msg::DirRes_DirResType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_msg_5fcomm_2eproto
