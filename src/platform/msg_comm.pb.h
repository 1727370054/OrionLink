// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_comm.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_msg_5fcomm_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_msg_5fcomm_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021011 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "msg_type.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_msg_5fcomm_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_msg_5fcomm_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msg_5fcomm_2eproto;
namespace msg {
class Config;
struct ConfigDefaultTypeInternal;
extern ConfigDefaultTypeInternal _Config_default_instance_;
class ConfigList;
struct ConfigListDefaultTypeInternal;
extern ConfigListDefaultTypeInternal _ConfigList_default_instance_;
class DirConfig;
struct DirConfigDefaultTypeInternal;
extern DirConfigDefaultTypeInternal _DirConfig_default_instance_;
class DirReq;
struct DirReqDefaultTypeInternal;
extern DirReqDefaultTypeInternal _DirReq_default_instance_;
class DirRes;
struct DirResDefaultTypeInternal;
extern DirResDefaultTypeInternal _DirRes_default_instance_;
class DirRes_Dir;
struct DirRes_DirDefaultTypeInternal;
extern DirRes_DirDefaultTypeInternal _DirRes_Dir_default_instance_;
class GatewayConfig;
struct GatewayConfigDefaultTypeInternal;
extern GatewayConfigDefaultTypeInternal _GatewayConfig_default_instance_;
class GetServiceReq;
struct GetServiceReqDefaultTypeInternal;
extern GetServiceReqDefaultTypeInternal _GetServiceReq_default_instance_;
class LoadAllConfigReq;
struct LoadAllConfigReqDefaultTypeInternal;
extern LoadAllConfigReqDefaultTypeInternal _LoadAllConfigReq_default_instance_;
class LoadConfigReq;
struct LoadConfigReqDefaultTypeInternal;
extern LoadConfigReqDefaultTypeInternal _LoadConfigReq_default_instance_;
class LoginReq;
struct LoginReqDefaultTypeInternal;
extern LoginReqDefaultTypeInternal _LoginReq_default_instance_;
class LoginRes;
struct LoginResDefaultTypeInternal;
extern LoginResDefaultTypeInternal _LoginRes_default_instance_;
class MessageRes;
struct MessageResDefaultTypeInternal;
extern MessageResDefaultTypeInternal _MessageRes_default_instance_;
class MsgHead;
struct MsgHeadDefaultTypeInternal;
extern MsgHeadDefaultTypeInternal _MsgHead_default_instance_;
class RegisterReq;
struct RegisterReqDefaultTypeInternal;
extern RegisterReqDefaultTypeInternal _RegisterReq_default_instance_;
class ServiceMap;
struct ServiceMapDefaultTypeInternal;
extern ServiceMapDefaultTypeInternal _ServiceMap_default_instance_;
class ServiceMap_Service;
struct ServiceMap_ServiceDefaultTypeInternal;
extern ServiceMap_ServiceDefaultTypeInternal _ServiceMap_Service_default_instance_;
class ServiceMap_ServiceList;
struct ServiceMap_ServiceListDefaultTypeInternal;
extern ServiceMap_ServiceListDefaultTypeInternal _ServiceMap_ServiceList_default_instance_;
class ServiceMap_ServiceMapEntry_DoNotUse;
struct ServiceMap_ServiceMapEntry_DoNotUseDefaultTypeInternal;
extern ServiceMap_ServiceMapEntry_DoNotUseDefaultTypeInternal _ServiceMap_ServiceMapEntry_DoNotUse_default_instance_;
}  // namespace msg
PROTOBUF_NAMESPACE_OPEN
template<> ::msg::Config* Arena::CreateMaybeMessage<::msg::Config>(Arena*);
template<> ::msg::ConfigList* Arena::CreateMaybeMessage<::msg::ConfigList>(Arena*);
template<> ::msg::DirConfig* Arena::CreateMaybeMessage<::msg::DirConfig>(Arena*);
template<> ::msg::DirReq* Arena::CreateMaybeMessage<::msg::DirReq>(Arena*);
template<> ::msg::DirRes* Arena::CreateMaybeMessage<::msg::DirRes>(Arena*);
template<> ::msg::DirRes_Dir* Arena::CreateMaybeMessage<::msg::DirRes_Dir>(Arena*);
template<> ::msg::GatewayConfig* Arena::CreateMaybeMessage<::msg::GatewayConfig>(Arena*);
template<> ::msg::GetServiceReq* Arena::CreateMaybeMessage<::msg::GetServiceReq>(Arena*);
template<> ::msg::LoadAllConfigReq* Arena::CreateMaybeMessage<::msg::LoadAllConfigReq>(Arena*);
template<> ::msg::LoadConfigReq* Arena::CreateMaybeMessage<::msg::LoadConfigReq>(Arena*);
template<> ::msg::LoginReq* Arena::CreateMaybeMessage<::msg::LoginReq>(Arena*);
template<> ::msg::LoginRes* Arena::CreateMaybeMessage<::msg::LoginRes>(Arena*);
template<> ::msg::MessageRes* Arena::CreateMaybeMessage<::msg::MessageRes>(Arena*);
template<> ::msg::MsgHead* Arena::CreateMaybeMessage<::msg::MsgHead>(Arena*);
template<> ::msg::RegisterReq* Arena::CreateMaybeMessage<::msg::RegisterReq>(Arena*);
template<> ::msg::ServiceMap* Arena::CreateMaybeMessage<::msg::ServiceMap>(Arena*);
template<> ::msg::ServiceMap_Service* Arena::CreateMaybeMessage<::msg::ServiceMap_Service>(Arena*);
template<> ::msg::ServiceMap_ServiceList* Arena::CreateMaybeMessage<::msg::ServiceMap_ServiceList>(Arena*);
template<> ::msg::ServiceMap_ServiceMapEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::ServiceMap_ServiceMapEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace msg {

enum LoginRes_LoginResType : int {
  LoginRes_LoginResType_OK = 0,
  LoginRes_LoginResType_ERROR = 1,
  LoginRes_LoginResType_NOUSER = 2,
  LoginRes_LoginResType_LoginRes_LoginResType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  LoginRes_LoginResType_LoginRes_LoginResType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool LoginRes_LoginResType_IsValid(int value);
constexpr LoginRes_LoginResType LoginRes_LoginResType_LoginResType_MIN = LoginRes_LoginResType_OK;
constexpr LoginRes_LoginResType LoginRes_LoginResType_LoginResType_MAX = LoginRes_LoginResType_NOUSER;
constexpr int LoginRes_LoginResType_LoginResType_ARRAYSIZE = LoginRes_LoginResType_LoginResType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LoginRes_LoginResType_descriptor();
template<typename T>
inline const std::string& LoginRes_LoginResType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LoginRes_LoginResType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LoginRes_LoginResType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LoginRes_LoginResType_descriptor(), enum_t_value);
}
inline bool LoginRes_LoginResType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LoginRes_LoginResType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LoginRes_LoginResType>(
    LoginRes_LoginResType_descriptor(), name, value);
}
enum DirRes_DirResType : int {
  DirRes_DirResType_OK = 0,
  DirRes_DirResType_ERROR = 1,
  DirRes_DirResType_NODIR = 2,
  DirRes_DirResType_DirRes_DirResType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  DirRes_DirResType_DirRes_DirResType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool DirRes_DirResType_IsValid(int value);
constexpr DirRes_DirResType DirRes_DirResType_DirResType_MIN = DirRes_DirResType_OK;
constexpr DirRes_DirResType DirRes_DirResType_DirResType_MAX = DirRes_DirResType_NODIR;
constexpr int DirRes_DirResType_DirResType_ARRAYSIZE = DirRes_DirResType_DirResType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DirRes_DirResType_descriptor();
template<typename T>
inline const std::string& DirRes_DirResType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DirRes_DirResType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DirRes_DirResType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DirRes_DirResType_descriptor(), enum_t_value);
}
inline bool DirRes_DirResType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DirRes_DirResType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DirRes_DirResType>(
    DirRes_DirResType_descriptor(), name, value);
}
enum MessageRes_Return : int {
  MessageRes_Return_OK = 0,
  MessageRes_Return_ERROR = 1,
  MessageRes_Return_MessageRes_Return_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MessageRes_Return_MessageRes_Return_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MessageRes_Return_IsValid(int value);
constexpr MessageRes_Return MessageRes_Return_Return_MIN = MessageRes_Return_OK;
constexpr MessageRes_Return MessageRes_Return_Return_MAX = MessageRes_Return_ERROR;
constexpr int MessageRes_Return_Return_ARRAYSIZE = MessageRes_Return_Return_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageRes_Return_descriptor();
template<typename T>
inline const std::string& MessageRes_Return_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MessageRes_Return>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MessageRes_Return_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MessageRes_Return_descriptor(), enum_t_value);
}
inline bool MessageRes_Return_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MessageRes_Return* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MessageRes_Return>(
    MessageRes_Return_descriptor(), name, value);
}
enum GetServiceReq_Type : int {
  GetServiceReq_Type_ONE = 0,
  GetServiceReq_Type_ALL = 1,
  GetServiceReq_Type_GetServiceReq_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  GetServiceReq_Type_GetServiceReq_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool GetServiceReq_Type_IsValid(int value);
constexpr GetServiceReq_Type GetServiceReq_Type_Type_MIN = GetServiceReq_Type_ONE;
constexpr GetServiceReq_Type GetServiceReq_Type_Type_MAX = GetServiceReq_Type_ALL;
constexpr int GetServiceReq_Type_Type_ARRAYSIZE = GetServiceReq_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GetServiceReq_Type_descriptor();
template<typename T>
inline const std::string& GetServiceReq_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GetServiceReq_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GetServiceReq_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GetServiceReq_Type_descriptor(), enum_t_value);
}
inline bool GetServiceReq_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GetServiceReq_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GetServiceReq_Type>(
    GetServiceReq_Type_descriptor(), name, value);
}
// ===================================================================

class MsgHead final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.MsgHead) */ {
 public:
  inline MsgHead() : MsgHead(nullptr) {}
  ~MsgHead() override;
  explicit PROTOBUF_CONSTEXPR MsgHead(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgHead(const MsgHead& from);
  MsgHead(MsgHead&& from) noexcept
    : MsgHead() {
    *this = ::std::move(from);
  }

  inline MsgHead& operator=(const MsgHead& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgHead& operator=(MsgHead&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgHead& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgHead* internal_default_instance() {
    return reinterpret_cast<const MsgHead*>(
               &_MsgHead_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MsgHead& a, MsgHead& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgHead* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgHead* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgHead* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgHead>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgHead& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgHead& from) {
    MsgHead::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgHead* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.MsgHead";
  }
  protected:
  explicit MsgHead(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 3,
    kServiceNameFieldNumber = 4,
    kMsgSizeFieldNumber = 1,
    kMsgTypeFieldNumber = 2,
    kRouterIdFieldNumber = 5,
  };
  // string token = 3;
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // string service_name = 4;
  void clear_service_name();
  const std::string& service_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_service_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_service_name();
  PROTOBUF_NODISCARD std::string* release_service_name();
  void set_allocated_service_name(std::string* service_name);
  private:
  const std::string& _internal_service_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service_name(const std::string& value);
  std::string* _internal_mutable_service_name();
  public:

  // int32 msg_size = 1;
  void clear_msg_size();
  int32_t msg_size() const;
  void set_msg_size(int32_t value);
  private:
  int32_t _internal_msg_size() const;
  void _internal_set_msg_size(int32_t value);
  public:

  // .msg.MsgType msg_type = 2;
  void clear_msg_type();
  ::msg::MsgType msg_type() const;
  void set_msg_type(::msg::MsgType value);
  private:
  ::msg::MsgType _internal_msg_type() const;
  void _internal_set_msg_type(::msg::MsgType value);
  public:

  // int64 router_id = 5;
  void clear_router_id();
  int64_t router_id() const;
  void set_router_id(int64_t value);
  private:
  int64_t _internal_router_id() const;
  void _internal_set_router_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.MsgHead)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_name_;
    int32_t msg_size_;
    int msg_type_;
    int64_t router_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_5fcomm_2eproto;
};
// -------------------------------------------------------------------

class LoginReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.LoginReq) */ {
 public:
  inline LoginReq() : LoginReq(nullptr) {}
  ~LoginReq() override;
  explicit PROTOBUF_CONSTEXPR LoginReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginReq(const LoginReq& from);
  LoginReq(LoginReq&& from) noexcept
    : LoginReq() {
    *this = ::std::move(from);
  }

  inline LoginReq& operator=(const LoginReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginReq& operator=(LoginReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginReq* internal_default_instance() {
    return reinterpret_cast<const LoginReq*>(
               &_LoginReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LoginReq& a, LoginReq& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoginReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoginReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoginReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LoginReq& from) {
    LoginReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.LoginReq";
  }
  protected:
  explicit LoginReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:msg.LoginReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_5fcomm_2eproto;
};
// -------------------------------------------------------------------

class LoginRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.LoginRes) */ {
 public:
  inline LoginRes() : LoginRes(nullptr) {}
  ~LoginRes() override;
  explicit PROTOBUF_CONSTEXPR LoginRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginRes(const LoginRes& from);
  LoginRes(LoginRes&& from) noexcept
    : LoginRes() {
    *this = ::std::move(from);
  }

  inline LoginRes& operator=(const LoginRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginRes& operator=(LoginRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginRes* internal_default_instance() {
    return reinterpret_cast<const LoginRes*>(
               &_LoginRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LoginRes& a, LoginRes& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoginRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoginRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoginRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LoginRes& from) {
    LoginRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.LoginRes";
  }
  protected:
  explicit LoginRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LoginRes_LoginResType LoginResType;
  static constexpr LoginResType OK =
    LoginRes_LoginResType_OK;
  static constexpr LoginResType ERROR =
    LoginRes_LoginResType_ERROR;
  static constexpr LoginResType NOUSER =
    LoginRes_LoginResType_NOUSER;
  static inline bool LoginResType_IsValid(int value) {
    return LoginRes_LoginResType_IsValid(value);
  }
  static constexpr LoginResType LoginResType_MIN =
    LoginRes_LoginResType_LoginResType_MIN;
  static constexpr LoginResType LoginResType_MAX =
    LoginRes_LoginResType_LoginResType_MAX;
  static constexpr int LoginResType_ARRAYSIZE =
    LoginRes_LoginResType_LoginResType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  LoginResType_descriptor() {
    return LoginRes_LoginResType_descriptor();
  }
  template<typename T>
  static inline const std::string& LoginResType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, LoginResType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function LoginResType_Name.");
    return LoginRes_LoginResType_Name(enum_t_value);
  }
  static inline bool LoginResType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      LoginResType* value) {
    return LoginRes_LoginResType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 2,
    kDescFieldNumber = 1,
  };
  // string token = 2;
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // .msg.LoginRes.LoginResType desc = 1;
  void clear_desc();
  ::msg::LoginRes_LoginResType desc() const;
  void set_desc(::msg::LoginRes_LoginResType value);
  private:
  ::msg::LoginRes_LoginResType _internal_desc() const;
  void _internal_set_desc(::msg::LoginRes_LoginResType value);
  public:

  // @@protoc_insertion_point(class_scope:msg.LoginRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
    int desc_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_5fcomm_2eproto;
};
// -------------------------------------------------------------------

class DirReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.DirReq) */ {
 public:
  inline DirReq() : DirReq(nullptr) {}
  ~DirReq() override;
  explicit PROTOBUF_CONSTEXPR DirReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DirReq(const DirReq& from);
  DirReq(DirReq&& from) noexcept
    : DirReq() {
    *this = ::std::move(from);
  }

  inline DirReq& operator=(const DirReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline DirReq& operator=(DirReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DirReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const DirReq* internal_default_instance() {
    return reinterpret_cast<const DirReq*>(
               &_DirReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DirReq& a, DirReq& b) {
    a.Swap(&b);
  }
  inline void Swap(DirReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DirReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DirReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DirReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DirReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DirReq& from) {
    DirReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DirReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.DirReq";
  }
  protected:
  explicit DirReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
  };
  // string path = 1;
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // @@protoc_insertion_point(class_scope:msg.DirReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_5fcomm_2eproto;
};
// -------------------------------------------------------------------

class DirRes_Dir final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.DirRes.Dir) */ {
 public:
  inline DirRes_Dir() : DirRes_Dir(nullptr) {}
  ~DirRes_Dir() override;
  explicit PROTOBUF_CONSTEXPR DirRes_Dir(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DirRes_Dir(const DirRes_Dir& from);
  DirRes_Dir(DirRes_Dir&& from) noexcept
    : DirRes_Dir() {
    *this = ::std::move(from);
  }

  inline DirRes_Dir& operator=(const DirRes_Dir& from) {
    CopyFrom(from);
    return *this;
  }
  inline DirRes_Dir& operator=(DirRes_Dir&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DirRes_Dir& default_instance() {
    return *internal_default_instance();
  }
  static inline const DirRes_Dir* internal_default_instance() {
    return reinterpret_cast<const DirRes_Dir*>(
               &_DirRes_Dir_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DirRes_Dir& a, DirRes_Dir& b) {
    a.Swap(&b);
  }
  inline void Swap(DirRes_Dir* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DirRes_Dir* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DirRes_Dir* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DirRes_Dir>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DirRes_Dir& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DirRes_Dir& from) {
    DirRes_Dir::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DirRes_Dir* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.DirRes.Dir";
  }
  protected:
  explicit DirRes_Dir(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilenameFieldNumber = 1,
    kFilesizeFieldNumber = 2,
  };
  // string filename = 1;
  void clear_filename();
  const std::string& filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // int32 filesize = 2;
  void clear_filesize();
  int32_t filesize() const;
  void set_filesize(int32_t value);
  private:
  int32_t _internal_filesize() const;
  void _internal_set_filesize(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.DirRes.Dir)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
    int32_t filesize_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_5fcomm_2eproto;
};
// -------------------------------------------------------------------

class DirRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.DirRes) */ {
 public:
  inline DirRes() : DirRes(nullptr) {}
  ~DirRes() override;
  explicit PROTOBUF_CONSTEXPR DirRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DirRes(const DirRes& from);
  DirRes(DirRes&& from) noexcept
    : DirRes() {
    *this = ::std::move(from);
  }

  inline DirRes& operator=(const DirRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline DirRes& operator=(DirRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DirRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const DirRes* internal_default_instance() {
    return reinterpret_cast<const DirRes*>(
               &_DirRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DirRes& a, DirRes& b) {
    a.Swap(&b);
  }
  inline void Swap(DirRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DirRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DirRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DirRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DirRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DirRes& from) {
    DirRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DirRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.DirRes";
  }
  protected:
  explicit DirRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DirRes_Dir Dir;

  typedef DirRes_DirResType DirResType;
  static constexpr DirResType OK =
    DirRes_DirResType_OK;
  static constexpr DirResType ERROR =
    DirRes_DirResType_ERROR;
  static constexpr DirResType NODIR =
    DirRes_DirResType_NODIR;
  static inline bool DirResType_IsValid(int value) {
    return DirRes_DirResType_IsValid(value);
  }
  static constexpr DirResType DirResType_MIN =
    DirRes_DirResType_DirResType_MIN;
  static constexpr DirResType DirResType_MAX =
    DirRes_DirResType_DirResType_MAX;
  static constexpr int DirResType_ARRAYSIZE =
    DirRes_DirResType_DirResType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DirResType_descriptor() {
    return DirRes_DirResType_descriptor();
  }
  template<typename T>
  static inline const std::string& DirResType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DirResType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DirResType_Name.");
    return DirRes_DirResType_Name(enum_t_value);
  }
  static inline bool DirResType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DirResType* value) {
    return DirRes_DirResType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDirsFieldNumber = 2,
    kDescFieldNumber = 1,
  };
  // repeated .msg.DirRes.Dir dirs = 2;
  int dirs_size() const;
  private:
  int _internal_dirs_size() const;
  public:
  void clear_dirs();
  ::msg::DirRes_Dir* mutable_dirs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::DirRes_Dir >*
      mutable_dirs();
  private:
  const ::msg::DirRes_Dir& _internal_dirs(int index) const;
  ::msg::DirRes_Dir* _internal_add_dirs();
  public:
  const ::msg::DirRes_Dir& dirs(int index) const;
  ::msg::DirRes_Dir* add_dirs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::DirRes_Dir >&
      dirs() const;

  // .msg.DirRes.DirResType desc = 1;
  void clear_desc();
  ::msg::DirRes_DirResType desc() const;
  void set_desc(::msg::DirRes_DirResType value);
  private:
  ::msg::DirRes_DirResType _internal_desc() const;
  void _internal_set_desc(::msg::DirRes_DirResType value);
  public:

  // @@protoc_insertion_point(class_scope:msg.DirRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::DirRes_Dir > dirs_;
    int desc_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_5fcomm_2eproto;
};
// -------------------------------------------------------------------

class RegisterReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.RegisterReq) */ {
 public:
  inline RegisterReq() : RegisterReq(nullptr) {}
  ~RegisterReq() override;
  explicit PROTOBUF_CONSTEXPR RegisterReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisterReq(const RegisterReq& from);
  RegisterReq(RegisterReq&& from) noexcept
    : RegisterReq() {
    *this = ::std::move(from);
  }

  inline RegisterReq& operator=(const RegisterReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterReq& operator=(RegisterReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterReq* internal_default_instance() {
    return reinterpret_cast<const RegisterReq*>(
               &_RegisterReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RegisterReq& a, RegisterReq& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegisterReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegisterReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegisterReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RegisterReq& from) {
    RegisterReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.RegisterReq";
  }
  protected:
  explicit RegisterReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kIpFieldNumber = 2,
    kPortFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string ip = 2;
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // int32 port = 3;
  void clear_port();
  int32_t port() const;
  void set_port(int32_t value);
  private:
  int32_t _internal_port() const;
  void _internal_set_port(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.RegisterReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
    int32_t port_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_5fcomm_2eproto;
};
// -------------------------------------------------------------------

class MessageRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.MessageRes) */ {
 public:
  inline MessageRes() : MessageRes(nullptr) {}
  ~MessageRes() override;
  explicit PROTOBUF_CONSTEXPR MessageRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MessageRes(const MessageRes& from);
  MessageRes(MessageRes&& from) noexcept
    : MessageRes() {
    *this = ::std::move(from);
  }

  inline MessageRes& operator=(const MessageRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageRes& operator=(MessageRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MessageRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const MessageRes* internal_default_instance() {
    return reinterpret_cast<const MessageRes*>(
               &_MessageRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MessageRes& a, MessageRes& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MessageRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MessageRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MessageRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MessageRes& from) {
    MessageRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.MessageRes";
  }
  protected:
  explicit MessageRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MessageRes_Return Return;
  static constexpr Return OK =
    MessageRes_Return_OK;
  static constexpr Return ERROR =
    MessageRes_Return_ERROR;
  static inline bool Return_IsValid(int value) {
    return MessageRes_Return_IsValid(value);
  }
  static constexpr Return Return_MIN =
    MessageRes_Return_Return_MIN;
  static constexpr Return Return_MAX =
    MessageRes_Return_Return_MAX;
  static constexpr int Return_ARRAYSIZE =
    MessageRes_Return_Return_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Return_descriptor() {
    return MessageRes_Return_descriptor();
  }
  template<typename T>
  static inline const std::string& Return_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Return>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Return_Name.");
    return MessageRes_Return_Name(enum_t_value);
  }
  static inline bool Return_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Return* value) {
    return MessageRes_Return_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDescFieldNumber = 2,
    kReturnFieldNumber = 1,
  };
  // bytes desc = 2;
  void clear_desc();
  const std::string& desc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_desc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_desc();
  PROTOBUF_NODISCARD std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // .msg.MessageRes.Return return = 1;
  void clear_return_();
  ::msg::MessageRes_Return return_() const;
  void set_return_(::msg::MessageRes_Return value);
  private:
  ::msg::MessageRes_Return _internal_return_() const;
  void _internal_set_return_(::msg::MessageRes_Return value);
  public:

  // @@protoc_insertion_point(class_scope:msg.MessageRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
    int return__;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_5fcomm_2eproto;
};
// -------------------------------------------------------------------

class ServiceMap_Service final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.ServiceMap.Service) */ {
 public:
  inline ServiceMap_Service() : ServiceMap_Service(nullptr) {}
  ~ServiceMap_Service() override;
  explicit PROTOBUF_CONSTEXPR ServiceMap_Service(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServiceMap_Service(const ServiceMap_Service& from);
  ServiceMap_Service(ServiceMap_Service&& from) noexcept
    : ServiceMap_Service() {
    *this = ::std::move(from);
  }

  inline ServiceMap_Service& operator=(const ServiceMap_Service& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceMap_Service& operator=(ServiceMap_Service&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServiceMap_Service& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServiceMap_Service* internal_default_instance() {
    return reinterpret_cast<const ServiceMap_Service*>(
               &_ServiceMap_Service_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ServiceMap_Service& a, ServiceMap_Service& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceMap_Service* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServiceMap_Service* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServiceMap_Service* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServiceMap_Service>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServiceMap_Service& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ServiceMap_Service& from) {
    ServiceMap_Service::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceMap_Service* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.ServiceMap.Service";
  }
  protected:
  explicit ServiceMap_Service(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kIpFieldNumber = 2,
    kPortFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string ip = 2;
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // int32 port = 3;
  void clear_port();
  int32_t port() const;
  void set_port(int32_t value);
  private:
  int32_t _internal_port() const;
  void _internal_set_port(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.ServiceMap.Service)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
    int32_t port_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_5fcomm_2eproto;
};
// -------------------------------------------------------------------

class ServiceMap_ServiceList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.ServiceMap.ServiceList) */ {
 public:
  inline ServiceMap_ServiceList() : ServiceMap_ServiceList(nullptr) {}
  ~ServiceMap_ServiceList() override;
  explicit PROTOBUF_CONSTEXPR ServiceMap_ServiceList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServiceMap_ServiceList(const ServiceMap_ServiceList& from);
  ServiceMap_ServiceList(ServiceMap_ServiceList&& from) noexcept
    : ServiceMap_ServiceList() {
    *this = ::std::move(from);
  }

  inline ServiceMap_ServiceList& operator=(const ServiceMap_ServiceList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceMap_ServiceList& operator=(ServiceMap_ServiceList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServiceMap_ServiceList& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServiceMap_ServiceList* internal_default_instance() {
    return reinterpret_cast<const ServiceMap_ServiceList*>(
               &_ServiceMap_ServiceList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ServiceMap_ServiceList& a, ServiceMap_ServiceList& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceMap_ServiceList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServiceMap_ServiceList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServiceMap_ServiceList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServiceMap_ServiceList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServiceMap_ServiceList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ServiceMap_ServiceList& from) {
    ServiceMap_ServiceList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceMap_ServiceList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.ServiceMap.ServiceList";
  }
  protected:
  explicit ServiceMap_ServiceList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceFieldNumber = 1,
  };
  // repeated .msg.ServiceMap.Service service = 1;
  int service_size() const;
  private:
  int _internal_service_size() const;
  public:
  void clear_service();
  ::msg::ServiceMap_Service* mutable_service(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ServiceMap_Service >*
      mutable_service();
  private:
  const ::msg::ServiceMap_Service& _internal_service(int index) const;
  ::msg::ServiceMap_Service* _internal_add_service();
  public:
  const ::msg::ServiceMap_Service& service(int index) const;
  ::msg::ServiceMap_Service* add_service();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ServiceMap_Service >&
      service() const;

  // @@protoc_insertion_point(class_scope:msg.ServiceMap.ServiceList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ServiceMap_Service > service_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_5fcomm_2eproto;
};
// -------------------------------------------------------------------

class ServiceMap_ServiceMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ServiceMap_ServiceMapEntry_DoNotUse, 
    std::string, ::msg::ServiceMap_ServiceList,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ServiceMap_ServiceMapEntry_DoNotUse, 
    std::string, ::msg::ServiceMap_ServiceList,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  ServiceMap_ServiceMapEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR ServiceMap_ServiceMapEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit ServiceMap_ServiceMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ServiceMap_ServiceMapEntry_DoNotUse& other);
  static const ServiceMap_ServiceMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ServiceMap_ServiceMapEntry_DoNotUse*>(&_ServiceMap_ServiceMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "msg.ServiceMap.ServiceMapEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_msg_5fcomm_2eproto;
};

// -------------------------------------------------------------------

class ServiceMap final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.ServiceMap) */ {
 public:
  inline ServiceMap() : ServiceMap(nullptr) {}
  ~ServiceMap() override;
  explicit PROTOBUF_CONSTEXPR ServiceMap(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServiceMap(const ServiceMap& from);
  ServiceMap(ServiceMap&& from) noexcept
    : ServiceMap() {
    *this = ::std::move(from);
  }

  inline ServiceMap& operator=(const ServiceMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceMap& operator=(ServiceMap&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServiceMap& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServiceMap* internal_default_instance() {
    return reinterpret_cast<const ServiceMap*>(
               &_ServiceMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ServiceMap& a, ServiceMap& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceMap* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServiceMap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServiceMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServiceMap>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServiceMap& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ServiceMap& from) {
    ServiceMap::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceMap* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.ServiceMap";
  }
  protected:
  explicit ServiceMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ServiceMap_Service Service;
  typedef ServiceMap_ServiceList ServiceList;

  // accessors -------------------------------------------------------

  enum : int {
    kServiceMapFieldNumber = 1,
    kResponseFieldNumber = 2,
  };
  // map<string, .msg.ServiceMap.ServiceList> service_map = 1;
  int service_map_size() const;
  private:
  int _internal_service_map_size() const;
  public:
  void clear_service_map();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::ServiceMap_ServiceList >&
      _internal_service_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::ServiceMap_ServiceList >*
      _internal_mutable_service_map();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::ServiceMap_ServiceList >&
      service_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::ServiceMap_ServiceList >*
      mutable_service_map();

  // .msg.MessageRes response = 2;
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  const ::msg::MessageRes& response() const;
  PROTOBUF_NODISCARD ::msg::MessageRes* release_response();
  ::msg::MessageRes* mutable_response();
  void set_allocated_response(::msg::MessageRes* response);
  private:
  const ::msg::MessageRes& _internal_response() const;
  ::msg::MessageRes* _internal_mutable_response();
  public:
  void unsafe_arena_set_allocated_response(
      ::msg::MessageRes* response);
  ::msg::MessageRes* unsafe_arena_release_response();

  // @@protoc_insertion_point(class_scope:msg.ServiceMap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        ServiceMap_ServiceMapEntry_DoNotUse,
        std::string, ::msg::ServiceMap_ServiceList,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> service_map_;
    ::msg::MessageRes* response_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_5fcomm_2eproto;
};
// -------------------------------------------------------------------

class GetServiceReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.GetServiceReq) */ {
 public:
  inline GetServiceReq() : GetServiceReq(nullptr) {}
  ~GetServiceReq() override;
  explicit PROTOBUF_CONSTEXPR GetServiceReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetServiceReq(const GetServiceReq& from);
  GetServiceReq(GetServiceReq&& from) noexcept
    : GetServiceReq() {
    *this = ::std::move(from);
  }

  inline GetServiceReq& operator=(const GetServiceReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServiceReq& operator=(GetServiceReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetServiceReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetServiceReq* internal_default_instance() {
    return reinterpret_cast<const GetServiceReq*>(
               &_GetServiceReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GetServiceReq& a, GetServiceReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServiceReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetServiceReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetServiceReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetServiceReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetServiceReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetServiceReq& from) {
    GetServiceReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServiceReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.GetServiceReq";
  }
  protected:
  explicit GetServiceReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GetServiceReq_Type Type;
  static constexpr Type ONE =
    GetServiceReq_Type_ONE;
  static constexpr Type ALL =
    GetServiceReq_Type_ALL;
  static inline bool Type_IsValid(int value) {
    return GetServiceReq_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    GetServiceReq_Type_Type_MIN;
  static constexpr Type Type_MAX =
    GetServiceReq_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    GetServiceReq_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return GetServiceReq_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return GetServiceReq_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return GetServiceReq_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .msg.GetServiceReq.Type type = 2;
  void clear_type();
  ::msg::GetServiceReq_Type type() const;
  void set_type(::msg::GetServiceReq_Type value);
  private:
  ::msg::GetServiceReq_Type _internal_type() const;
  void _internal_set_type(::msg::GetServiceReq_Type value);
  public:

  // @@protoc_insertion_point(class_scope:msg.GetServiceReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_5fcomm_2eproto;
};
// -------------------------------------------------------------------

class Config final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.Config) */ {
 public:
  inline Config() : Config(nullptr) {}
  ~Config() override;
  explicit PROTOBUF_CONSTEXPR Config(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Config(const Config& from);
  Config(Config&& from) noexcept
    : Config() {
    *this = ::std::move(from);
  }

  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }
  inline Config& operator=(Config&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Config& default_instance() {
    return *internal_default_instance();
  }
  static inline const Config* internal_default_instance() {
    return reinterpret_cast<const Config*>(
               &_Config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Config& a, Config& b) {
    a.Swap(&b);
  }
  inline void Swap(Config* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Config* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Config>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Config& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Config& from) {
    Config::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Config* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.Config";
  }
  protected:
  explicit Config(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceNameFieldNumber = 1,
    kServiceIpFieldNumber = 3,
    kPrivatePbFieldNumber = 4,
    kProtocolFieldNumber = 5,
    kServicePortFieldNumber = 2,
  };
  // string service_name = 1;
  void clear_service_name();
  const std::string& service_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_service_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_service_name();
  PROTOBUF_NODISCARD std::string* release_service_name();
  void set_allocated_service_name(std::string* service_name);
  private:
  const std::string& _internal_service_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service_name(const std::string& value);
  std::string* _internal_mutable_service_name();
  public:

  // string service_ip = 3;
  void clear_service_ip();
  const std::string& service_ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_service_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_service_ip();
  PROTOBUF_NODISCARD std::string* release_service_ip();
  void set_allocated_service_ip(std::string* service_ip);
  private:
  const std::string& _internal_service_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service_ip(const std::string& value);
  std::string* _internal_mutable_service_ip();
  public:

  // bytes private_pb = 4;
  void clear_private_pb();
  const std::string& private_pb() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_private_pb(ArgT0&& arg0, ArgT... args);
  std::string* mutable_private_pb();
  PROTOBUF_NODISCARD std::string* release_private_pb();
  void set_allocated_private_pb(std::string* private_pb);
  private:
  const std::string& _internal_private_pb() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_private_pb(const std::string& value);
  std::string* _internal_mutable_private_pb();
  public:

  // bytes protocol = 5;
  void clear_protocol();
  const std::string& protocol() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_protocol(ArgT0&& arg0, ArgT... args);
  std::string* mutable_protocol();
  PROTOBUF_NODISCARD std::string* release_protocol();
  void set_allocated_protocol(std::string* protocol);
  private:
  const std::string& _internal_protocol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_protocol(const std::string& value);
  std::string* _internal_mutable_protocol();
  public:

  // int32 service_port = 2;
  void clear_service_port();
  int32_t service_port() const;
  void set_service_port(int32_t value);
  private:
  int32_t _internal_service_port() const;
  void _internal_set_service_port(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.Config)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_ip_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr private_pb_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr protocol_;
    int32_t service_port_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_5fcomm_2eproto;
};
// -------------------------------------------------------------------

class LoadConfigReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.LoadConfigReq) */ {
 public:
  inline LoadConfigReq() : LoadConfigReq(nullptr) {}
  ~LoadConfigReq() override;
  explicit PROTOBUF_CONSTEXPR LoadConfigReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoadConfigReq(const LoadConfigReq& from);
  LoadConfigReq(LoadConfigReq&& from) noexcept
    : LoadConfigReq() {
    *this = ::std::move(from);
  }

  inline LoadConfigReq& operator=(const LoadConfigReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadConfigReq& operator=(LoadConfigReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoadConfigReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoadConfigReq* internal_default_instance() {
    return reinterpret_cast<const LoadConfigReq*>(
               &_LoadConfigReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(LoadConfigReq& a, LoadConfigReq& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadConfigReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadConfigReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoadConfigReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoadConfigReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoadConfigReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LoadConfigReq& from) {
    LoadConfigReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadConfigReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.LoadConfigReq";
  }
  protected:
  explicit LoadConfigReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceIpFieldNumber = 1,
    kServicePortFieldNumber = 2,
  };
  // string service_ip = 1;
  void clear_service_ip();
  const std::string& service_ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_service_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_service_ip();
  PROTOBUF_NODISCARD std::string* release_service_ip();
  void set_allocated_service_ip(std::string* service_ip);
  private:
  const std::string& _internal_service_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service_ip(const std::string& value);
  std::string* _internal_mutable_service_ip();
  public:

  // int32 service_port = 2;
  void clear_service_port();
  int32_t service_port() const;
  void set_service_port(int32_t value);
  private:
  int32_t _internal_service_port() const;
  void _internal_set_service_port(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.LoadConfigReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_ip_;
    int32_t service_port_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_5fcomm_2eproto;
};
// -------------------------------------------------------------------

class DirConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.DirConfig) */ {
 public:
  inline DirConfig() : DirConfig(nullptr) {}
  ~DirConfig() override;
  explicit PROTOBUF_CONSTEXPR DirConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DirConfig(const DirConfig& from);
  DirConfig(DirConfig&& from) noexcept
    : DirConfig() {
    *this = ::std::move(from);
  }

  inline DirConfig& operator=(const DirConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline DirConfig& operator=(DirConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DirConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const DirConfig* internal_default_instance() {
    return reinterpret_cast<const DirConfig*>(
               &_DirConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(DirConfig& a, DirConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(DirConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DirConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DirConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DirConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DirConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DirConfig& from) {
    DirConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DirConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.DirConfig";
  }
  protected:
  explicit DirConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRootFieldNumber = 1,
  };
  // string root = 1;
  void clear_root();
  const std::string& root() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_root(ArgT0&& arg0, ArgT... args);
  std::string* mutable_root();
  PROTOBUF_NODISCARD std::string* release_root();
  void set_allocated_root(std::string* root);
  private:
  const std::string& _internal_root() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_root(const std::string& value);
  std::string* _internal_mutable_root();
  public:

  // @@protoc_insertion_point(class_scope:msg.DirConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr root_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_5fcomm_2eproto;
};
// -------------------------------------------------------------------

class LoadAllConfigReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.LoadAllConfigReq) */ {
 public:
  inline LoadAllConfigReq() : LoadAllConfigReq(nullptr) {}
  ~LoadAllConfigReq() override;
  explicit PROTOBUF_CONSTEXPR LoadAllConfigReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoadAllConfigReq(const LoadAllConfigReq& from);
  LoadAllConfigReq(LoadAllConfigReq&& from) noexcept
    : LoadAllConfigReq() {
    *this = ::std::move(from);
  }

  inline LoadAllConfigReq& operator=(const LoadAllConfigReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadAllConfigReq& operator=(LoadAllConfigReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoadAllConfigReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoadAllConfigReq* internal_default_instance() {
    return reinterpret_cast<const LoadAllConfigReq*>(
               &_LoadAllConfigReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(LoadAllConfigReq& a, LoadAllConfigReq& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadAllConfigReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadAllConfigReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoadAllConfigReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoadAllConfigReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoadAllConfigReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LoadAllConfigReq& from) {
    LoadAllConfigReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadAllConfigReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.LoadAllConfigReq";
  }
  protected:
  explicit LoadAllConfigReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPageFieldNumber = 1,
    kPageCountFieldNumber = 2,
  };
  // int32 page = 1;
  void clear_page();
  int32_t page() const;
  void set_page(int32_t value);
  private:
  int32_t _internal_page() const;
  void _internal_set_page(int32_t value);
  public:

  // int32 page_count = 2;
  void clear_page_count();
  int32_t page_count() const;
  void set_page_count(int32_t value);
  private:
  int32_t _internal_page_count() const;
  void _internal_set_page_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.LoadAllConfigReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t page_;
    int32_t page_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_5fcomm_2eproto;
};
// -------------------------------------------------------------------

class ConfigList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.ConfigList) */ {
 public:
  inline ConfigList() : ConfigList(nullptr) {}
  ~ConfigList() override;
  explicit PROTOBUF_CONSTEXPR ConfigList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConfigList(const ConfigList& from);
  ConfigList(ConfigList&& from) noexcept
    : ConfigList() {
    *this = ::std::move(from);
  }

  inline ConfigList& operator=(const ConfigList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigList& operator=(ConfigList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConfigList& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConfigList* internal_default_instance() {
    return reinterpret_cast<const ConfigList*>(
               &_ConfigList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ConfigList& a, ConfigList& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConfigList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConfigList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConfigList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConfigList& from) {
    ConfigList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.ConfigList";
  }
  protected:
  explicit ConfigList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigsFieldNumber = 1,
  };
  // repeated .msg.Config configs = 1;
  int configs_size() const;
  private:
  int _internal_configs_size() const;
  public:
  void clear_configs();
  ::msg::Config* mutable_configs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Config >*
      mutable_configs();
  private:
  const ::msg::Config& _internal_configs(int index) const;
  ::msg::Config* _internal_add_configs();
  public:
  const ::msg::Config& configs(int index) const;
  ::msg::Config* add_configs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Config >&
      configs() const;

  // @@protoc_insertion_point(class_scope:msg.ConfigList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Config > configs_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_5fcomm_2eproto;
};
// -------------------------------------------------------------------

class GatewayConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.GatewayConfig) */ {
 public:
  inline GatewayConfig() : GatewayConfig(nullptr) {}
  ~GatewayConfig() override;
  explicit PROTOBUF_CONSTEXPR GatewayConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GatewayConfig(const GatewayConfig& from);
  GatewayConfig(GatewayConfig&& from) noexcept
    : GatewayConfig() {
    *this = ::std::move(from);
  }

  inline GatewayConfig& operator=(const GatewayConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline GatewayConfig& operator=(GatewayConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GatewayConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const GatewayConfig* internal_default_instance() {
    return reinterpret_cast<const GatewayConfig*>(
               &_GatewayConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(GatewayConfig& a, GatewayConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(GatewayConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GatewayConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GatewayConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GatewayConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GatewayConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GatewayConfig& from) {
    GatewayConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GatewayConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.GatewayConfig";
  }
  protected:
  explicit GatewayConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCrtPathFieldNumber = 2,
    kKeyPathFieldNumber = 3,
    kCaPathFieldNumber = 4,
    kIsSslFieldNumber = 1,
    kServerPortFieldNumber = 5,
  };
  // string crt_path = 2;
  void clear_crt_path();
  const std::string& crt_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_crt_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_crt_path();
  PROTOBUF_NODISCARD std::string* release_crt_path();
  void set_allocated_crt_path(std::string* crt_path);
  private:
  const std::string& _internal_crt_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_crt_path(const std::string& value);
  std::string* _internal_mutable_crt_path();
  public:

  // string key_path = 3;
  void clear_key_path();
  const std::string& key_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key_path();
  PROTOBUF_NODISCARD std::string* release_key_path();
  void set_allocated_key_path(std::string* key_path);
  private:
  const std::string& _internal_key_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key_path(const std::string& value);
  std::string* _internal_mutable_key_path();
  public:

  // string ca_path = 4;
  void clear_ca_path();
  const std::string& ca_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ca_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ca_path();
  PROTOBUF_NODISCARD std::string* release_ca_path();
  void set_allocated_ca_path(std::string* ca_path);
  private:
  const std::string& _internal_ca_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ca_path(const std::string& value);
  std::string* _internal_mutable_ca_path();
  public:

  // bool is_ssl = 1;
  void clear_is_ssl();
  bool is_ssl() const;
  void set_is_ssl(bool value);
  private:
  bool _internal_is_ssl() const;
  void _internal_set_is_ssl(bool value);
  public:

  // int32 server_port = 5;
  void clear_server_port();
  int32_t server_port() const;
  void set_server_port(int32_t value);
  private:
  int32_t _internal_server_port() const;
  void _internal_set_server_port(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.GatewayConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr crt_path_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_path_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ca_path_;
    bool is_ssl_;
    int32_t server_port_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_5fcomm_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MsgHead

// int32 msg_size = 1;
inline void MsgHead::clear_msg_size() {
  _impl_.msg_size_ = 0;
}
inline int32_t MsgHead::_internal_msg_size() const {
  return _impl_.msg_size_;
}
inline int32_t MsgHead::msg_size() const {
  // @@protoc_insertion_point(field_get:msg.MsgHead.msg_size)
  return _internal_msg_size();
}
inline void MsgHead::_internal_set_msg_size(int32_t value) {
  
  _impl_.msg_size_ = value;
}
inline void MsgHead::set_msg_size(int32_t value) {
  _internal_set_msg_size(value);
  // @@protoc_insertion_point(field_set:msg.MsgHead.msg_size)
}

// .msg.MsgType msg_type = 2;
inline void MsgHead::clear_msg_type() {
  _impl_.msg_type_ = 0;
}
inline ::msg::MsgType MsgHead::_internal_msg_type() const {
  return static_cast< ::msg::MsgType >(_impl_.msg_type_);
}
inline ::msg::MsgType MsgHead::msg_type() const {
  // @@protoc_insertion_point(field_get:msg.MsgHead.msg_type)
  return _internal_msg_type();
}
inline void MsgHead::_internal_set_msg_type(::msg::MsgType value) {
  
  _impl_.msg_type_ = value;
}
inline void MsgHead::set_msg_type(::msg::MsgType value) {
  _internal_set_msg_type(value);
  // @@protoc_insertion_point(field_set:msg.MsgHead.msg_type)
}

// string token = 3;
inline void MsgHead::clear_token() {
  _impl_.token_.ClearToEmpty();
}
inline const std::string& MsgHead::token() const {
  // @@protoc_insertion_point(field_get:msg.MsgHead.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MsgHead::set_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.MsgHead.token)
}
inline std::string* MsgHead::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:msg.MsgHead.token)
  return _s;
}
inline const std::string& MsgHead::_internal_token() const {
  return _impl_.token_.Get();
}
inline void MsgHead::_internal_set_token(const std::string& value) {
  
  _impl_.token_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgHead::_internal_mutable_token() {
  
  return _impl_.token_.Mutable(GetArenaForAllocation());
}
inline std::string* MsgHead::release_token() {
  // @@protoc_insertion_point(field_release:msg.MsgHead.token)
  return _impl_.token_.Release();
}
inline void MsgHead::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  _impl_.token_.SetAllocated(token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.token_.IsDefault()) {
    _impl_.token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.MsgHead.token)
}

// string service_name = 4;
inline void MsgHead::clear_service_name() {
  _impl_.service_name_.ClearToEmpty();
}
inline const std::string& MsgHead::service_name() const {
  // @@protoc_insertion_point(field_get:msg.MsgHead.service_name)
  return _internal_service_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MsgHead::set_service_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.service_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.MsgHead.service_name)
}
inline std::string* MsgHead::mutable_service_name() {
  std::string* _s = _internal_mutable_service_name();
  // @@protoc_insertion_point(field_mutable:msg.MsgHead.service_name)
  return _s;
}
inline const std::string& MsgHead::_internal_service_name() const {
  return _impl_.service_name_.Get();
}
inline void MsgHead::_internal_set_service_name(const std::string& value) {
  
  _impl_.service_name_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgHead::_internal_mutable_service_name() {
  
  return _impl_.service_name_.Mutable(GetArenaForAllocation());
}
inline std::string* MsgHead::release_service_name() {
  // @@protoc_insertion_point(field_release:msg.MsgHead.service_name)
  return _impl_.service_name_.Release();
}
inline void MsgHead::set_allocated_service_name(std::string* service_name) {
  if (service_name != nullptr) {
    
  } else {
    
  }
  _impl_.service_name_.SetAllocated(service_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.service_name_.IsDefault()) {
    _impl_.service_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.MsgHead.service_name)
}

// int64 router_id = 5;
inline void MsgHead::clear_router_id() {
  _impl_.router_id_ = int64_t{0};
}
inline int64_t MsgHead::_internal_router_id() const {
  return _impl_.router_id_;
}
inline int64_t MsgHead::router_id() const {
  // @@protoc_insertion_point(field_get:msg.MsgHead.router_id)
  return _internal_router_id();
}
inline void MsgHead::_internal_set_router_id(int64_t value) {
  
  _impl_.router_id_ = value;
}
inline void MsgHead::set_router_id(int64_t value) {
  _internal_set_router_id(value);
  // @@protoc_insertion_point(field_set:msg.MsgHead.router_id)
}

// -------------------------------------------------------------------

// LoginReq

// string username = 1;
inline void LoginReq::clear_username() {
  _impl_.username_.ClearToEmpty();
}
inline const std::string& LoginReq::username() const {
  // @@protoc_insertion_point(field_get:msg.LoginReq.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginReq::set_username(ArgT0&& arg0, ArgT... args) {
 
 _impl_.username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.LoginReq.username)
}
inline std::string* LoginReq::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:msg.LoginReq.username)
  return _s;
}
inline const std::string& LoginReq::_internal_username() const {
  return _impl_.username_.Get();
}
inline void LoginReq::_internal_set_username(const std::string& value) {
  
  _impl_.username_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginReq::_internal_mutable_username() {
  
  return _impl_.username_.Mutable(GetArenaForAllocation());
}
inline std::string* LoginReq::release_username() {
  // @@protoc_insertion_point(field_release:msg.LoginReq.username)
  return _impl_.username_.Release();
}
inline void LoginReq::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  _impl_.username_.SetAllocated(username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.LoginReq.username)
}

// string password = 2;
inline void LoginReq::clear_password() {
  _impl_.password_.ClearToEmpty();
}
inline const std::string& LoginReq::password() const {
  // @@protoc_insertion_point(field_get:msg.LoginReq.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginReq::set_password(ArgT0&& arg0, ArgT... args) {
 
 _impl_.password_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.LoginReq.password)
}
inline std::string* LoginReq::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:msg.LoginReq.password)
  return _s;
}
inline const std::string& LoginReq::_internal_password() const {
  return _impl_.password_.Get();
}
inline void LoginReq::_internal_set_password(const std::string& value) {
  
  _impl_.password_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginReq::_internal_mutable_password() {
  
  return _impl_.password_.Mutable(GetArenaForAllocation());
}
inline std::string* LoginReq::release_password() {
  // @@protoc_insertion_point(field_release:msg.LoginReq.password)
  return _impl_.password_.Release();
}
inline void LoginReq::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  _impl_.password_.SetAllocated(password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.LoginReq.password)
}

// -------------------------------------------------------------------

// LoginRes

// .msg.LoginRes.LoginResType desc = 1;
inline void LoginRes::clear_desc() {
  _impl_.desc_ = 0;
}
inline ::msg::LoginRes_LoginResType LoginRes::_internal_desc() const {
  return static_cast< ::msg::LoginRes_LoginResType >(_impl_.desc_);
}
inline ::msg::LoginRes_LoginResType LoginRes::desc() const {
  // @@protoc_insertion_point(field_get:msg.LoginRes.desc)
  return _internal_desc();
}
inline void LoginRes::_internal_set_desc(::msg::LoginRes_LoginResType value) {
  
  _impl_.desc_ = value;
}
inline void LoginRes::set_desc(::msg::LoginRes_LoginResType value) {
  _internal_set_desc(value);
  // @@protoc_insertion_point(field_set:msg.LoginRes.desc)
}

// string token = 2;
inline void LoginRes::clear_token() {
  _impl_.token_.ClearToEmpty();
}
inline const std::string& LoginRes::token() const {
  // @@protoc_insertion_point(field_get:msg.LoginRes.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginRes::set_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.LoginRes.token)
}
inline std::string* LoginRes::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:msg.LoginRes.token)
  return _s;
}
inline const std::string& LoginRes::_internal_token() const {
  return _impl_.token_.Get();
}
inline void LoginRes::_internal_set_token(const std::string& value) {
  
  _impl_.token_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginRes::_internal_mutable_token() {
  
  return _impl_.token_.Mutable(GetArenaForAllocation());
}
inline std::string* LoginRes::release_token() {
  // @@protoc_insertion_point(field_release:msg.LoginRes.token)
  return _impl_.token_.Release();
}
inline void LoginRes::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  _impl_.token_.SetAllocated(token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.token_.IsDefault()) {
    _impl_.token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.LoginRes.token)
}

// -------------------------------------------------------------------

// DirReq

// string path = 1;
inline void DirReq::clear_path() {
  _impl_.path_.ClearToEmpty();
}
inline const std::string& DirReq::path() const {
  // @@protoc_insertion_point(field_get:msg.DirReq.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DirReq::set_path(ArgT0&& arg0, ArgT... args) {
 
 _impl_.path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.DirReq.path)
}
inline std::string* DirReq::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:msg.DirReq.path)
  return _s;
}
inline const std::string& DirReq::_internal_path() const {
  return _impl_.path_.Get();
}
inline void DirReq::_internal_set_path(const std::string& value) {
  
  _impl_.path_.Set(value, GetArenaForAllocation());
}
inline std::string* DirReq::_internal_mutable_path() {
  
  return _impl_.path_.Mutable(GetArenaForAllocation());
}
inline std::string* DirReq::release_path() {
  // @@protoc_insertion_point(field_release:msg.DirReq.path)
  return _impl_.path_.Release();
}
inline void DirReq::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  _impl_.path_.SetAllocated(path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.path_.IsDefault()) {
    _impl_.path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.DirReq.path)
}

// -------------------------------------------------------------------

// DirRes_Dir

// string filename = 1;
inline void DirRes_Dir::clear_filename() {
  _impl_.filename_.ClearToEmpty();
}
inline const std::string& DirRes_Dir::filename() const {
  // @@protoc_insertion_point(field_get:msg.DirRes.Dir.filename)
  return _internal_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DirRes_Dir::set_filename(ArgT0&& arg0, ArgT... args) {
 
 _impl_.filename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.DirRes.Dir.filename)
}
inline std::string* DirRes_Dir::mutable_filename() {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:msg.DirRes.Dir.filename)
  return _s;
}
inline const std::string& DirRes_Dir::_internal_filename() const {
  return _impl_.filename_.Get();
}
inline void DirRes_Dir::_internal_set_filename(const std::string& value) {
  
  _impl_.filename_.Set(value, GetArenaForAllocation());
}
inline std::string* DirRes_Dir::_internal_mutable_filename() {
  
  return _impl_.filename_.Mutable(GetArenaForAllocation());
}
inline std::string* DirRes_Dir::release_filename() {
  // @@protoc_insertion_point(field_release:msg.DirRes.Dir.filename)
  return _impl_.filename_.Release();
}
inline void DirRes_Dir::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  _impl_.filename_.SetAllocated(filename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.filename_.IsDefault()) {
    _impl_.filename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.DirRes.Dir.filename)
}

// int32 filesize = 2;
inline void DirRes_Dir::clear_filesize() {
  _impl_.filesize_ = 0;
}
inline int32_t DirRes_Dir::_internal_filesize() const {
  return _impl_.filesize_;
}
inline int32_t DirRes_Dir::filesize() const {
  // @@protoc_insertion_point(field_get:msg.DirRes.Dir.filesize)
  return _internal_filesize();
}
inline void DirRes_Dir::_internal_set_filesize(int32_t value) {
  
  _impl_.filesize_ = value;
}
inline void DirRes_Dir::set_filesize(int32_t value) {
  _internal_set_filesize(value);
  // @@protoc_insertion_point(field_set:msg.DirRes.Dir.filesize)
}

// -------------------------------------------------------------------

// DirRes

// .msg.DirRes.DirResType desc = 1;
inline void DirRes::clear_desc() {
  _impl_.desc_ = 0;
}
inline ::msg::DirRes_DirResType DirRes::_internal_desc() const {
  return static_cast< ::msg::DirRes_DirResType >(_impl_.desc_);
}
inline ::msg::DirRes_DirResType DirRes::desc() const {
  // @@protoc_insertion_point(field_get:msg.DirRes.desc)
  return _internal_desc();
}
inline void DirRes::_internal_set_desc(::msg::DirRes_DirResType value) {
  
  _impl_.desc_ = value;
}
inline void DirRes::set_desc(::msg::DirRes_DirResType value) {
  _internal_set_desc(value);
  // @@protoc_insertion_point(field_set:msg.DirRes.desc)
}

// repeated .msg.DirRes.Dir dirs = 2;
inline int DirRes::_internal_dirs_size() const {
  return _impl_.dirs_.size();
}
inline int DirRes::dirs_size() const {
  return _internal_dirs_size();
}
inline void DirRes::clear_dirs() {
  _impl_.dirs_.Clear();
}
inline ::msg::DirRes_Dir* DirRes::mutable_dirs(int index) {
  // @@protoc_insertion_point(field_mutable:msg.DirRes.dirs)
  return _impl_.dirs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::DirRes_Dir >*
DirRes::mutable_dirs() {
  // @@protoc_insertion_point(field_mutable_list:msg.DirRes.dirs)
  return &_impl_.dirs_;
}
inline const ::msg::DirRes_Dir& DirRes::_internal_dirs(int index) const {
  return _impl_.dirs_.Get(index);
}
inline const ::msg::DirRes_Dir& DirRes::dirs(int index) const {
  // @@protoc_insertion_point(field_get:msg.DirRes.dirs)
  return _internal_dirs(index);
}
inline ::msg::DirRes_Dir* DirRes::_internal_add_dirs() {
  return _impl_.dirs_.Add();
}
inline ::msg::DirRes_Dir* DirRes::add_dirs() {
  ::msg::DirRes_Dir* _add = _internal_add_dirs();
  // @@protoc_insertion_point(field_add:msg.DirRes.dirs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::DirRes_Dir >&
DirRes::dirs() const {
  // @@protoc_insertion_point(field_list:msg.DirRes.dirs)
  return _impl_.dirs_;
}

// -------------------------------------------------------------------

// RegisterReq

// string name = 1;
inline void RegisterReq::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& RegisterReq::name() const {
  // @@protoc_insertion_point(field_get:msg.RegisterReq.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegisterReq::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.RegisterReq.name)
}
inline std::string* RegisterReq::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:msg.RegisterReq.name)
  return _s;
}
inline const std::string& RegisterReq::_internal_name() const {
  return _impl_.name_.Get();
}
inline void RegisterReq::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* RegisterReq::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* RegisterReq::release_name() {
  // @@protoc_insertion_point(field_release:msg.RegisterReq.name)
  return _impl_.name_.Release();
}
inline void RegisterReq::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.RegisterReq.name)
}

// string ip = 2;
inline void RegisterReq::clear_ip() {
  _impl_.ip_.ClearToEmpty();
}
inline const std::string& RegisterReq::ip() const {
  // @@protoc_insertion_point(field_get:msg.RegisterReq.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegisterReq::set_ip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.RegisterReq.ip)
}
inline std::string* RegisterReq::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:msg.RegisterReq.ip)
  return _s;
}
inline const std::string& RegisterReq::_internal_ip() const {
  return _impl_.ip_.Get();
}
inline void RegisterReq::_internal_set_ip(const std::string& value) {
  
  _impl_.ip_.Set(value, GetArenaForAllocation());
}
inline std::string* RegisterReq::_internal_mutable_ip() {
  
  return _impl_.ip_.Mutable(GetArenaForAllocation());
}
inline std::string* RegisterReq::release_ip() {
  // @@protoc_insertion_point(field_release:msg.RegisterReq.ip)
  return _impl_.ip_.Release();
}
inline void RegisterReq::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  _impl_.ip_.SetAllocated(ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ip_.IsDefault()) {
    _impl_.ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.RegisterReq.ip)
}

// int32 port = 3;
inline void RegisterReq::clear_port() {
  _impl_.port_ = 0;
}
inline int32_t RegisterReq::_internal_port() const {
  return _impl_.port_;
}
inline int32_t RegisterReq::port() const {
  // @@protoc_insertion_point(field_get:msg.RegisterReq.port)
  return _internal_port();
}
inline void RegisterReq::_internal_set_port(int32_t value) {
  
  _impl_.port_ = value;
}
inline void RegisterReq::set_port(int32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:msg.RegisterReq.port)
}

// -------------------------------------------------------------------

// MessageRes

// .msg.MessageRes.Return return = 1;
inline void MessageRes::clear_return_() {
  _impl_.return__ = 0;
}
inline ::msg::MessageRes_Return MessageRes::_internal_return_() const {
  return static_cast< ::msg::MessageRes_Return >(_impl_.return__);
}
inline ::msg::MessageRes_Return MessageRes::return_() const {
  // @@protoc_insertion_point(field_get:msg.MessageRes.return)
  return _internal_return_();
}
inline void MessageRes::_internal_set_return_(::msg::MessageRes_Return value) {
  
  _impl_.return__ = value;
}
inline void MessageRes::set_return_(::msg::MessageRes_Return value) {
  _internal_set_return_(value);
  // @@protoc_insertion_point(field_set:msg.MessageRes.return)
}

// bytes desc = 2;
inline void MessageRes::clear_desc() {
  _impl_.desc_.ClearToEmpty();
}
inline const std::string& MessageRes::desc() const {
  // @@protoc_insertion_point(field_get:msg.MessageRes.desc)
  return _internal_desc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MessageRes::set_desc(ArgT0&& arg0, ArgT... args) {
 
 _impl_.desc_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.MessageRes.desc)
}
inline std::string* MessageRes::mutable_desc() {
  std::string* _s = _internal_mutable_desc();
  // @@protoc_insertion_point(field_mutable:msg.MessageRes.desc)
  return _s;
}
inline const std::string& MessageRes::_internal_desc() const {
  return _impl_.desc_.Get();
}
inline void MessageRes::_internal_set_desc(const std::string& value) {
  
  _impl_.desc_.Set(value, GetArenaForAllocation());
}
inline std::string* MessageRes::_internal_mutable_desc() {
  
  return _impl_.desc_.Mutable(GetArenaForAllocation());
}
inline std::string* MessageRes::release_desc() {
  // @@protoc_insertion_point(field_release:msg.MessageRes.desc)
  return _impl_.desc_.Release();
}
inline void MessageRes::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    
  } else {
    
  }
  _impl_.desc_.SetAllocated(desc, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.desc_.IsDefault()) {
    _impl_.desc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.MessageRes.desc)
}

// -------------------------------------------------------------------

// ServiceMap_Service

// string name = 1;
inline void ServiceMap_Service::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ServiceMap_Service::name() const {
  // @@protoc_insertion_point(field_get:msg.ServiceMap.Service.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServiceMap_Service::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.ServiceMap.Service.name)
}
inline std::string* ServiceMap_Service::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:msg.ServiceMap.Service.name)
  return _s;
}
inline const std::string& ServiceMap_Service::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ServiceMap_Service::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ServiceMap_Service::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ServiceMap_Service::release_name() {
  // @@protoc_insertion_point(field_release:msg.ServiceMap.Service.name)
  return _impl_.name_.Release();
}
inline void ServiceMap_Service::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.ServiceMap.Service.name)
}

// string ip = 2;
inline void ServiceMap_Service::clear_ip() {
  _impl_.ip_.ClearToEmpty();
}
inline const std::string& ServiceMap_Service::ip() const {
  // @@protoc_insertion_point(field_get:msg.ServiceMap.Service.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServiceMap_Service::set_ip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.ServiceMap.Service.ip)
}
inline std::string* ServiceMap_Service::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:msg.ServiceMap.Service.ip)
  return _s;
}
inline const std::string& ServiceMap_Service::_internal_ip() const {
  return _impl_.ip_.Get();
}
inline void ServiceMap_Service::_internal_set_ip(const std::string& value) {
  
  _impl_.ip_.Set(value, GetArenaForAllocation());
}
inline std::string* ServiceMap_Service::_internal_mutable_ip() {
  
  return _impl_.ip_.Mutable(GetArenaForAllocation());
}
inline std::string* ServiceMap_Service::release_ip() {
  // @@protoc_insertion_point(field_release:msg.ServiceMap.Service.ip)
  return _impl_.ip_.Release();
}
inline void ServiceMap_Service::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  _impl_.ip_.SetAllocated(ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ip_.IsDefault()) {
    _impl_.ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.ServiceMap.Service.ip)
}

// int32 port = 3;
inline void ServiceMap_Service::clear_port() {
  _impl_.port_ = 0;
}
inline int32_t ServiceMap_Service::_internal_port() const {
  return _impl_.port_;
}
inline int32_t ServiceMap_Service::port() const {
  // @@protoc_insertion_point(field_get:msg.ServiceMap.Service.port)
  return _internal_port();
}
inline void ServiceMap_Service::_internal_set_port(int32_t value) {
  
  _impl_.port_ = value;
}
inline void ServiceMap_Service::set_port(int32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:msg.ServiceMap.Service.port)
}

// -------------------------------------------------------------------

// ServiceMap_ServiceList

// repeated .msg.ServiceMap.Service service = 1;
inline int ServiceMap_ServiceList::_internal_service_size() const {
  return _impl_.service_.size();
}
inline int ServiceMap_ServiceList::service_size() const {
  return _internal_service_size();
}
inline void ServiceMap_ServiceList::clear_service() {
  _impl_.service_.Clear();
}
inline ::msg::ServiceMap_Service* ServiceMap_ServiceList::mutable_service(int index) {
  // @@protoc_insertion_point(field_mutable:msg.ServiceMap.ServiceList.service)
  return _impl_.service_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ServiceMap_Service >*
ServiceMap_ServiceList::mutable_service() {
  // @@protoc_insertion_point(field_mutable_list:msg.ServiceMap.ServiceList.service)
  return &_impl_.service_;
}
inline const ::msg::ServiceMap_Service& ServiceMap_ServiceList::_internal_service(int index) const {
  return _impl_.service_.Get(index);
}
inline const ::msg::ServiceMap_Service& ServiceMap_ServiceList::service(int index) const {
  // @@protoc_insertion_point(field_get:msg.ServiceMap.ServiceList.service)
  return _internal_service(index);
}
inline ::msg::ServiceMap_Service* ServiceMap_ServiceList::_internal_add_service() {
  return _impl_.service_.Add();
}
inline ::msg::ServiceMap_Service* ServiceMap_ServiceList::add_service() {
  ::msg::ServiceMap_Service* _add = _internal_add_service();
  // @@protoc_insertion_point(field_add:msg.ServiceMap.ServiceList.service)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ServiceMap_Service >&
ServiceMap_ServiceList::service() const {
  // @@protoc_insertion_point(field_list:msg.ServiceMap.ServiceList.service)
  return _impl_.service_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ServiceMap

// map<string, .msg.ServiceMap.ServiceList> service_map = 1;
inline int ServiceMap::_internal_service_map_size() const {
  return _impl_.service_map_.size();
}
inline int ServiceMap::service_map_size() const {
  return _internal_service_map_size();
}
inline void ServiceMap::clear_service_map() {
  _impl_.service_map_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::ServiceMap_ServiceList >&
ServiceMap::_internal_service_map() const {
  return _impl_.service_map_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::ServiceMap_ServiceList >&
ServiceMap::service_map() const {
  // @@protoc_insertion_point(field_map:msg.ServiceMap.service_map)
  return _internal_service_map();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::ServiceMap_ServiceList >*
ServiceMap::_internal_mutable_service_map() {
  return _impl_.service_map_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::ServiceMap_ServiceList >*
ServiceMap::mutable_service_map() {
  // @@protoc_insertion_point(field_mutable_map:msg.ServiceMap.service_map)
  return _internal_mutable_service_map();
}

// .msg.MessageRes response = 2;
inline bool ServiceMap::_internal_has_response() const {
  return this != internal_default_instance() && _impl_.response_ != nullptr;
}
inline bool ServiceMap::has_response() const {
  return _internal_has_response();
}
inline void ServiceMap::clear_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
}
inline const ::msg::MessageRes& ServiceMap::_internal_response() const {
  const ::msg::MessageRes* p = _impl_.response_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::MessageRes&>(
      ::msg::_MessageRes_default_instance_);
}
inline const ::msg::MessageRes& ServiceMap::response() const {
  // @@protoc_insertion_point(field_get:msg.ServiceMap.response)
  return _internal_response();
}
inline void ServiceMap::unsafe_arena_set_allocated_response(
    ::msg::MessageRes* response) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.response_);
  }
  _impl_.response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.ServiceMap.response)
}
inline ::msg::MessageRes* ServiceMap::release_response() {
  
  ::msg::MessageRes* temp = _impl_.response_;
  _impl_.response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::MessageRes* ServiceMap::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_release:msg.ServiceMap.response)
  
  ::msg::MessageRes* temp = _impl_.response_;
  _impl_.response_ = nullptr;
  return temp;
}
inline ::msg::MessageRes* ServiceMap::_internal_mutable_response() {
  
  if (_impl_.response_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::MessageRes>(GetArenaForAllocation());
    _impl_.response_ = p;
  }
  return _impl_.response_;
}
inline ::msg::MessageRes* ServiceMap::mutable_response() {
  ::msg::MessageRes* _msg = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:msg.ServiceMap.response)
  return _msg;
}
inline void ServiceMap::set_allocated_response(::msg::MessageRes* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.response_;
  }
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(response);
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.response_ = response;
  // @@protoc_insertion_point(field_set_allocated:msg.ServiceMap.response)
}

// -------------------------------------------------------------------

// GetServiceReq

// string name = 1;
inline void GetServiceReq::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GetServiceReq::name() const {
  // @@protoc_insertion_point(field_get:msg.GetServiceReq.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetServiceReq::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.GetServiceReq.name)
}
inline std::string* GetServiceReq::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:msg.GetServiceReq.name)
  return _s;
}
inline const std::string& GetServiceReq::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GetServiceReq::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetServiceReq::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetServiceReq::release_name() {
  // @@protoc_insertion_point(field_release:msg.GetServiceReq.name)
  return _impl_.name_.Release();
}
inline void GetServiceReq::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.GetServiceReq.name)
}

// .msg.GetServiceReq.Type type = 2;
inline void GetServiceReq::clear_type() {
  _impl_.type_ = 0;
}
inline ::msg::GetServiceReq_Type GetServiceReq::_internal_type() const {
  return static_cast< ::msg::GetServiceReq_Type >(_impl_.type_);
}
inline ::msg::GetServiceReq_Type GetServiceReq::type() const {
  // @@protoc_insertion_point(field_get:msg.GetServiceReq.type)
  return _internal_type();
}
inline void GetServiceReq::_internal_set_type(::msg::GetServiceReq_Type value) {
  
  _impl_.type_ = value;
}
inline void GetServiceReq::set_type(::msg::GetServiceReq_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:msg.GetServiceReq.type)
}

// -------------------------------------------------------------------

// Config

// string service_name = 1;
inline void Config::clear_service_name() {
  _impl_.service_name_.ClearToEmpty();
}
inline const std::string& Config::service_name() const {
  // @@protoc_insertion_point(field_get:msg.Config.service_name)
  return _internal_service_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Config::set_service_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.service_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.Config.service_name)
}
inline std::string* Config::mutable_service_name() {
  std::string* _s = _internal_mutable_service_name();
  // @@protoc_insertion_point(field_mutable:msg.Config.service_name)
  return _s;
}
inline const std::string& Config::_internal_service_name() const {
  return _impl_.service_name_.Get();
}
inline void Config::_internal_set_service_name(const std::string& value) {
  
  _impl_.service_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Config::_internal_mutable_service_name() {
  
  return _impl_.service_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Config::release_service_name() {
  // @@protoc_insertion_point(field_release:msg.Config.service_name)
  return _impl_.service_name_.Release();
}
inline void Config::set_allocated_service_name(std::string* service_name) {
  if (service_name != nullptr) {
    
  } else {
    
  }
  _impl_.service_name_.SetAllocated(service_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.service_name_.IsDefault()) {
    _impl_.service_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.Config.service_name)
}

// int32 service_port = 2;
inline void Config::clear_service_port() {
  _impl_.service_port_ = 0;
}
inline int32_t Config::_internal_service_port() const {
  return _impl_.service_port_;
}
inline int32_t Config::service_port() const {
  // @@protoc_insertion_point(field_get:msg.Config.service_port)
  return _internal_service_port();
}
inline void Config::_internal_set_service_port(int32_t value) {
  
  _impl_.service_port_ = value;
}
inline void Config::set_service_port(int32_t value) {
  _internal_set_service_port(value);
  // @@protoc_insertion_point(field_set:msg.Config.service_port)
}

// string service_ip = 3;
inline void Config::clear_service_ip() {
  _impl_.service_ip_.ClearToEmpty();
}
inline const std::string& Config::service_ip() const {
  // @@protoc_insertion_point(field_get:msg.Config.service_ip)
  return _internal_service_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Config::set_service_ip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.service_ip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.Config.service_ip)
}
inline std::string* Config::mutable_service_ip() {
  std::string* _s = _internal_mutable_service_ip();
  // @@protoc_insertion_point(field_mutable:msg.Config.service_ip)
  return _s;
}
inline const std::string& Config::_internal_service_ip() const {
  return _impl_.service_ip_.Get();
}
inline void Config::_internal_set_service_ip(const std::string& value) {
  
  _impl_.service_ip_.Set(value, GetArenaForAllocation());
}
inline std::string* Config::_internal_mutable_service_ip() {
  
  return _impl_.service_ip_.Mutable(GetArenaForAllocation());
}
inline std::string* Config::release_service_ip() {
  // @@protoc_insertion_point(field_release:msg.Config.service_ip)
  return _impl_.service_ip_.Release();
}
inline void Config::set_allocated_service_ip(std::string* service_ip) {
  if (service_ip != nullptr) {
    
  } else {
    
  }
  _impl_.service_ip_.SetAllocated(service_ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.service_ip_.IsDefault()) {
    _impl_.service_ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.Config.service_ip)
}

// bytes private_pb = 4;
inline void Config::clear_private_pb() {
  _impl_.private_pb_.ClearToEmpty();
}
inline const std::string& Config::private_pb() const {
  // @@protoc_insertion_point(field_get:msg.Config.private_pb)
  return _internal_private_pb();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Config::set_private_pb(ArgT0&& arg0, ArgT... args) {
 
 _impl_.private_pb_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.Config.private_pb)
}
inline std::string* Config::mutable_private_pb() {
  std::string* _s = _internal_mutable_private_pb();
  // @@protoc_insertion_point(field_mutable:msg.Config.private_pb)
  return _s;
}
inline const std::string& Config::_internal_private_pb() const {
  return _impl_.private_pb_.Get();
}
inline void Config::_internal_set_private_pb(const std::string& value) {
  
  _impl_.private_pb_.Set(value, GetArenaForAllocation());
}
inline std::string* Config::_internal_mutable_private_pb() {
  
  return _impl_.private_pb_.Mutable(GetArenaForAllocation());
}
inline std::string* Config::release_private_pb() {
  // @@protoc_insertion_point(field_release:msg.Config.private_pb)
  return _impl_.private_pb_.Release();
}
inline void Config::set_allocated_private_pb(std::string* private_pb) {
  if (private_pb != nullptr) {
    
  } else {
    
  }
  _impl_.private_pb_.SetAllocated(private_pb, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.private_pb_.IsDefault()) {
    _impl_.private_pb_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.Config.private_pb)
}

// bytes protocol = 5;
inline void Config::clear_protocol() {
  _impl_.protocol_.ClearToEmpty();
}
inline const std::string& Config::protocol() const {
  // @@protoc_insertion_point(field_get:msg.Config.protocol)
  return _internal_protocol();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Config::set_protocol(ArgT0&& arg0, ArgT... args) {
 
 _impl_.protocol_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.Config.protocol)
}
inline std::string* Config::mutable_protocol() {
  std::string* _s = _internal_mutable_protocol();
  // @@protoc_insertion_point(field_mutable:msg.Config.protocol)
  return _s;
}
inline const std::string& Config::_internal_protocol() const {
  return _impl_.protocol_.Get();
}
inline void Config::_internal_set_protocol(const std::string& value) {
  
  _impl_.protocol_.Set(value, GetArenaForAllocation());
}
inline std::string* Config::_internal_mutable_protocol() {
  
  return _impl_.protocol_.Mutable(GetArenaForAllocation());
}
inline std::string* Config::release_protocol() {
  // @@protoc_insertion_point(field_release:msg.Config.protocol)
  return _impl_.protocol_.Release();
}
inline void Config::set_allocated_protocol(std::string* protocol) {
  if (protocol != nullptr) {
    
  } else {
    
  }
  _impl_.protocol_.SetAllocated(protocol, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.protocol_.IsDefault()) {
    _impl_.protocol_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.Config.protocol)
}

// -------------------------------------------------------------------

// LoadConfigReq

// string service_ip = 1;
inline void LoadConfigReq::clear_service_ip() {
  _impl_.service_ip_.ClearToEmpty();
}
inline const std::string& LoadConfigReq::service_ip() const {
  // @@protoc_insertion_point(field_get:msg.LoadConfigReq.service_ip)
  return _internal_service_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoadConfigReq::set_service_ip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.service_ip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.LoadConfigReq.service_ip)
}
inline std::string* LoadConfigReq::mutable_service_ip() {
  std::string* _s = _internal_mutable_service_ip();
  // @@protoc_insertion_point(field_mutable:msg.LoadConfigReq.service_ip)
  return _s;
}
inline const std::string& LoadConfigReq::_internal_service_ip() const {
  return _impl_.service_ip_.Get();
}
inline void LoadConfigReq::_internal_set_service_ip(const std::string& value) {
  
  _impl_.service_ip_.Set(value, GetArenaForAllocation());
}
inline std::string* LoadConfigReq::_internal_mutable_service_ip() {
  
  return _impl_.service_ip_.Mutable(GetArenaForAllocation());
}
inline std::string* LoadConfigReq::release_service_ip() {
  // @@protoc_insertion_point(field_release:msg.LoadConfigReq.service_ip)
  return _impl_.service_ip_.Release();
}
inline void LoadConfigReq::set_allocated_service_ip(std::string* service_ip) {
  if (service_ip != nullptr) {
    
  } else {
    
  }
  _impl_.service_ip_.SetAllocated(service_ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.service_ip_.IsDefault()) {
    _impl_.service_ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.LoadConfigReq.service_ip)
}

// int32 service_port = 2;
inline void LoadConfigReq::clear_service_port() {
  _impl_.service_port_ = 0;
}
inline int32_t LoadConfigReq::_internal_service_port() const {
  return _impl_.service_port_;
}
inline int32_t LoadConfigReq::service_port() const {
  // @@protoc_insertion_point(field_get:msg.LoadConfigReq.service_port)
  return _internal_service_port();
}
inline void LoadConfigReq::_internal_set_service_port(int32_t value) {
  
  _impl_.service_port_ = value;
}
inline void LoadConfigReq::set_service_port(int32_t value) {
  _internal_set_service_port(value);
  // @@protoc_insertion_point(field_set:msg.LoadConfigReq.service_port)
}

// -------------------------------------------------------------------

// DirConfig

// string root = 1;
inline void DirConfig::clear_root() {
  _impl_.root_.ClearToEmpty();
}
inline const std::string& DirConfig::root() const {
  // @@protoc_insertion_point(field_get:msg.DirConfig.root)
  return _internal_root();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DirConfig::set_root(ArgT0&& arg0, ArgT... args) {
 
 _impl_.root_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.DirConfig.root)
}
inline std::string* DirConfig::mutable_root() {
  std::string* _s = _internal_mutable_root();
  // @@protoc_insertion_point(field_mutable:msg.DirConfig.root)
  return _s;
}
inline const std::string& DirConfig::_internal_root() const {
  return _impl_.root_.Get();
}
inline void DirConfig::_internal_set_root(const std::string& value) {
  
  _impl_.root_.Set(value, GetArenaForAllocation());
}
inline std::string* DirConfig::_internal_mutable_root() {
  
  return _impl_.root_.Mutable(GetArenaForAllocation());
}
inline std::string* DirConfig::release_root() {
  // @@protoc_insertion_point(field_release:msg.DirConfig.root)
  return _impl_.root_.Release();
}
inline void DirConfig::set_allocated_root(std::string* root) {
  if (root != nullptr) {
    
  } else {
    
  }
  _impl_.root_.SetAllocated(root, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.root_.IsDefault()) {
    _impl_.root_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.DirConfig.root)
}

// -------------------------------------------------------------------

// LoadAllConfigReq

// int32 page = 1;
inline void LoadAllConfigReq::clear_page() {
  _impl_.page_ = 0;
}
inline int32_t LoadAllConfigReq::_internal_page() const {
  return _impl_.page_;
}
inline int32_t LoadAllConfigReq::page() const {
  // @@protoc_insertion_point(field_get:msg.LoadAllConfigReq.page)
  return _internal_page();
}
inline void LoadAllConfigReq::_internal_set_page(int32_t value) {
  
  _impl_.page_ = value;
}
inline void LoadAllConfigReq::set_page(int32_t value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:msg.LoadAllConfigReq.page)
}

// int32 page_count = 2;
inline void LoadAllConfigReq::clear_page_count() {
  _impl_.page_count_ = 0;
}
inline int32_t LoadAllConfigReq::_internal_page_count() const {
  return _impl_.page_count_;
}
inline int32_t LoadAllConfigReq::page_count() const {
  // @@protoc_insertion_point(field_get:msg.LoadAllConfigReq.page_count)
  return _internal_page_count();
}
inline void LoadAllConfigReq::_internal_set_page_count(int32_t value) {
  
  _impl_.page_count_ = value;
}
inline void LoadAllConfigReq::set_page_count(int32_t value) {
  _internal_set_page_count(value);
  // @@protoc_insertion_point(field_set:msg.LoadAllConfigReq.page_count)
}

// -------------------------------------------------------------------

// ConfigList

// repeated .msg.Config configs = 1;
inline int ConfigList::_internal_configs_size() const {
  return _impl_.configs_.size();
}
inline int ConfigList::configs_size() const {
  return _internal_configs_size();
}
inline void ConfigList::clear_configs() {
  _impl_.configs_.Clear();
}
inline ::msg::Config* ConfigList::mutable_configs(int index) {
  // @@protoc_insertion_point(field_mutable:msg.ConfigList.configs)
  return _impl_.configs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Config >*
ConfigList::mutable_configs() {
  // @@protoc_insertion_point(field_mutable_list:msg.ConfigList.configs)
  return &_impl_.configs_;
}
inline const ::msg::Config& ConfigList::_internal_configs(int index) const {
  return _impl_.configs_.Get(index);
}
inline const ::msg::Config& ConfigList::configs(int index) const {
  // @@protoc_insertion_point(field_get:msg.ConfigList.configs)
  return _internal_configs(index);
}
inline ::msg::Config* ConfigList::_internal_add_configs() {
  return _impl_.configs_.Add();
}
inline ::msg::Config* ConfigList::add_configs() {
  ::msg::Config* _add = _internal_add_configs();
  // @@protoc_insertion_point(field_add:msg.ConfigList.configs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Config >&
ConfigList::configs() const {
  // @@protoc_insertion_point(field_list:msg.ConfigList.configs)
  return _impl_.configs_;
}

// -------------------------------------------------------------------

// GatewayConfig

// bool is_ssl = 1;
inline void GatewayConfig::clear_is_ssl() {
  _impl_.is_ssl_ = false;
}
inline bool GatewayConfig::_internal_is_ssl() const {
  return _impl_.is_ssl_;
}
inline bool GatewayConfig::is_ssl() const {
  // @@protoc_insertion_point(field_get:msg.GatewayConfig.is_ssl)
  return _internal_is_ssl();
}
inline void GatewayConfig::_internal_set_is_ssl(bool value) {
  
  _impl_.is_ssl_ = value;
}
inline void GatewayConfig::set_is_ssl(bool value) {
  _internal_set_is_ssl(value);
  // @@protoc_insertion_point(field_set:msg.GatewayConfig.is_ssl)
}

// string crt_path = 2;
inline void GatewayConfig::clear_crt_path() {
  _impl_.crt_path_.ClearToEmpty();
}
inline const std::string& GatewayConfig::crt_path() const {
  // @@protoc_insertion_point(field_get:msg.GatewayConfig.crt_path)
  return _internal_crt_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GatewayConfig::set_crt_path(ArgT0&& arg0, ArgT... args) {
 
 _impl_.crt_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.GatewayConfig.crt_path)
}
inline std::string* GatewayConfig::mutable_crt_path() {
  std::string* _s = _internal_mutable_crt_path();
  // @@protoc_insertion_point(field_mutable:msg.GatewayConfig.crt_path)
  return _s;
}
inline const std::string& GatewayConfig::_internal_crt_path() const {
  return _impl_.crt_path_.Get();
}
inline void GatewayConfig::_internal_set_crt_path(const std::string& value) {
  
  _impl_.crt_path_.Set(value, GetArenaForAllocation());
}
inline std::string* GatewayConfig::_internal_mutable_crt_path() {
  
  return _impl_.crt_path_.Mutable(GetArenaForAllocation());
}
inline std::string* GatewayConfig::release_crt_path() {
  // @@protoc_insertion_point(field_release:msg.GatewayConfig.crt_path)
  return _impl_.crt_path_.Release();
}
inline void GatewayConfig::set_allocated_crt_path(std::string* crt_path) {
  if (crt_path != nullptr) {
    
  } else {
    
  }
  _impl_.crt_path_.SetAllocated(crt_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.crt_path_.IsDefault()) {
    _impl_.crt_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.GatewayConfig.crt_path)
}

// string key_path = 3;
inline void GatewayConfig::clear_key_path() {
  _impl_.key_path_.ClearToEmpty();
}
inline const std::string& GatewayConfig::key_path() const {
  // @@protoc_insertion_point(field_get:msg.GatewayConfig.key_path)
  return _internal_key_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GatewayConfig::set_key_path(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.GatewayConfig.key_path)
}
inline std::string* GatewayConfig::mutable_key_path() {
  std::string* _s = _internal_mutable_key_path();
  // @@protoc_insertion_point(field_mutable:msg.GatewayConfig.key_path)
  return _s;
}
inline const std::string& GatewayConfig::_internal_key_path() const {
  return _impl_.key_path_.Get();
}
inline void GatewayConfig::_internal_set_key_path(const std::string& value) {
  
  _impl_.key_path_.Set(value, GetArenaForAllocation());
}
inline std::string* GatewayConfig::_internal_mutable_key_path() {
  
  return _impl_.key_path_.Mutable(GetArenaForAllocation());
}
inline std::string* GatewayConfig::release_key_path() {
  // @@protoc_insertion_point(field_release:msg.GatewayConfig.key_path)
  return _impl_.key_path_.Release();
}
inline void GatewayConfig::set_allocated_key_path(std::string* key_path) {
  if (key_path != nullptr) {
    
  } else {
    
  }
  _impl_.key_path_.SetAllocated(key_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_path_.IsDefault()) {
    _impl_.key_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.GatewayConfig.key_path)
}

// string ca_path = 4;
inline void GatewayConfig::clear_ca_path() {
  _impl_.ca_path_.ClearToEmpty();
}
inline const std::string& GatewayConfig::ca_path() const {
  // @@protoc_insertion_point(field_get:msg.GatewayConfig.ca_path)
  return _internal_ca_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GatewayConfig::set_ca_path(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ca_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.GatewayConfig.ca_path)
}
inline std::string* GatewayConfig::mutable_ca_path() {
  std::string* _s = _internal_mutable_ca_path();
  // @@protoc_insertion_point(field_mutable:msg.GatewayConfig.ca_path)
  return _s;
}
inline const std::string& GatewayConfig::_internal_ca_path() const {
  return _impl_.ca_path_.Get();
}
inline void GatewayConfig::_internal_set_ca_path(const std::string& value) {
  
  _impl_.ca_path_.Set(value, GetArenaForAllocation());
}
inline std::string* GatewayConfig::_internal_mutable_ca_path() {
  
  return _impl_.ca_path_.Mutable(GetArenaForAllocation());
}
inline std::string* GatewayConfig::release_ca_path() {
  // @@protoc_insertion_point(field_release:msg.GatewayConfig.ca_path)
  return _impl_.ca_path_.Release();
}
inline void GatewayConfig::set_allocated_ca_path(std::string* ca_path) {
  if (ca_path != nullptr) {
    
  } else {
    
  }
  _impl_.ca_path_.SetAllocated(ca_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ca_path_.IsDefault()) {
    _impl_.ca_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.GatewayConfig.ca_path)
}

// int32 server_port = 5;
inline void GatewayConfig::clear_server_port() {
  _impl_.server_port_ = 0;
}
inline int32_t GatewayConfig::_internal_server_port() const {
  return _impl_.server_port_;
}
inline int32_t GatewayConfig::server_port() const {
  // @@protoc_insertion_point(field_get:msg.GatewayConfig.server_port)
  return _internal_server_port();
}
inline void GatewayConfig::_internal_set_server_port(int32_t value) {
  
  _impl_.server_port_ = value;
}
inline void GatewayConfig::set_server_port(int32_t value) {
  _internal_set_server_port(value);
  // @@protoc_insertion_point(field_set:msg.GatewayConfig.server_port)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace msg

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::msg::LoginRes_LoginResType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::LoginRes_LoginResType>() {
  return ::msg::LoginRes_LoginResType_descriptor();
}
template <> struct is_proto_enum< ::msg::DirRes_DirResType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::DirRes_DirResType>() {
  return ::msg::DirRes_DirResType_descriptor();
}
template <> struct is_proto_enum< ::msg::MessageRes_Return> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::MessageRes_Return>() {
  return ::msg::MessageRes_Return_descriptor();
}
template <> struct is_proto_enum< ::msg::GetServiceReq_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::GetServiceReq_Type>() {
  return ::msg::GetServiceReq_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_msg_5fcomm_2eproto
