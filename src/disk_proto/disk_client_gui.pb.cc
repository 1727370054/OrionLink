// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: disk_client_gui.proto

#include "disk_client_gui.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace disk {
PROTOBUF_CONSTEXPR GetDirReq::GetDirReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.root_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetDirReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetDirReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetDirReqDefaultTypeInternal() {}
  union {
    GetDirReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetDirReqDefaultTypeInternal _GetDirReq_default_instance_;
PROTOBUF_CONSTEXPR FileInfo::FileInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.filename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.filedir_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.filetime_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.md5_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.local_path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.filesize_)*/int64_t{0}
  , /*decltype(_impl_.net_size_)*/int64_t{0}
  , /*decltype(_impl_.ori_size_)*/int64_t{0}
  , /*decltype(_impl_.is_dir_)*/false
  , /*decltype(_impl_.is_enc_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FileInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FileInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FileInfoDefaultTypeInternal() {}
  union {
    FileInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FileInfoDefaultTypeInternal _FileInfo_default_instance_;
PROTOBUF_CONSTEXPR FileInfoList::FileInfoList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.files_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FileInfoListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FileInfoListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FileInfoListDefaultTypeInternal() {}
  union {
    FileInfoList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FileInfoListDefaultTypeInternal _FileInfoList_default_instance_;
}  // namespace disk
static ::_pb::Metadata file_level_metadata_disk_5fclient_5fgui_2eproto[3];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_disk_5fclient_5fgui_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_disk_5fclient_5fgui_2eproto = nullptr;

const uint32_t TableStruct_disk_5fclient_5fgui_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::disk::GetDirReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::disk::GetDirReq, _impl_.root_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::disk::FileInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::disk::FileInfo, _impl_.filename_),
  PROTOBUF_FIELD_OFFSET(::disk::FileInfo, _impl_.filedir_),
  PROTOBUF_FIELD_OFFSET(::disk::FileInfo, _impl_.filesize_),
  PROTOBUF_FIELD_OFFSET(::disk::FileInfo, _impl_.filetime_),
  PROTOBUF_FIELD_OFFSET(::disk::FileInfo, _impl_.is_dir_),
  PROTOBUF_FIELD_OFFSET(::disk::FileInfo, _impl_.md5_),
  PROTOBUF_FIELD_OFFSET(::disk::FileInfo, _impl_.local_path_),
  PROTOBUF_FIELD_OFFSET(::disk::FileInfo, _impl_.net_size_),
  PROTOBUF_FIELD_OFFSET(::disk::FileInfo, _impl_.is_enc_),
  PROTOBUF_FIELD_OFFSET(::disk::FileInfo, _impl_.ori_size_),
  PROTOBUF_FIELD_OFFSET(::disk::FileInfo, _impl_.password_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::disk::FileInfoList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::disk::FileInfoList, _impl_.files_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::disk::GetDirReq)},
  { 7, -1, -1, sizeof(::disk::FileInfo)},
  { 24, -1, -1, sizeof(::disk::FileInfoList)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::disk::_GetDirReq_default_instance_._instance,
  &::disk::_FileInfo_default_instance_._instance,
  &::disk::_FileInfoList_default_instance_._instance,
};

const char descriptor_table_protodef_disk_5fclient_5fgui_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025disk_client_gui.proto\022\004disk\"\031\n\tGetDirR"
  "eq\022\014\n\004root\030\001 \001(\014\"\310\001\n\010FileInfo\022\020\n\010filenam"
  "e\030\001 \001(\014\022\017\n\007filedir\030\002 \001(\014\022\020\n\010filesize\030\003 \001"
  "(\003\022\020\n\010filetime\030\004 \001(\t\022\016\n\006is_dir\030\005 \001(\010\022\013\n\003"
  "md5\030\006 \001(\014\022\022\n\nlocal_path\030\007 \001(\014\022\020\n\010net_siz"
  "e\030\010 \001(\003\022\016\n\006is_enc\030\t \001(\010\022\020\n\010ori_size\030\n \001("
  "\003\022\020\n\010password\030\013 \001(\014\"-\n\014FileInfoList\022\035\n\005f"
  "iles\030\004 \003(\0132\016.disk.FileInfo*D\n\013FileMsgTyp"
  "e\022\021\n\rFILE_MSG_NONE\020\000\022\020\n\013GET_DIR_REQ\020\351\007\022\020"
  "\n\013GET_DIR_RES\020\352\007b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_disk_5fclient_5fgui_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_disk_5fclient_5fgui_2eproto = {
    false, false, 384, descriptor_table_protodef_disk_5fclient_5fgui_2eproto,
    "disk_client_gui.proto",
    &descriptor_table_disk_5fclient_5fgui_2eproto_once, nullptr, 0, 3,
    schemas, file_default_instances, TableStruct_disk_5fclient_5fgui_2eproto::offsets,
    file_level_metadata_disk_5fclient_5fgui_2eproto, file_level_enum_descriptors_disk_5fclient_5fgui_2eproto,
    file_level_service_descriptors_disk_5fclient_5fgui_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_disk_5fclient_5fgui_2eproto_getter() {
  return &descriptor_table_disk_5fclient_5fgui_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_disk_5fclient_5fgui_2eproto(&descriptor_table_disk_5fclient_5fgui_2eproto);
namespace disk {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FileMsgType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_disk_5fclient_5fgui_2eproto);
  return file_level_enum_descriptors_disk_5fclient_5fgui_2eproto[0];
}
bool FileMsgType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1001:
    case 1002:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class GetDirReq::_Internal {
 public:
};

GetDirReq::GetDirReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:disk.GetDirReq)
}
GetDirReq::GetDirReq(const GetDirReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetDirReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.root_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.root_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_root().empty()) {
    _this->_impl_.root_.Set(from._internal_root(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:disk.GetDirReq)
}

inline void GetDirReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.root_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.root_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetDirReq::~GetDirReq() {
  // @@protoc_insertion_point(destructor:disk.GetDirReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetDirReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.root_.Destroy();
}

void GetDirReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetDirReq::Clear() {
// @@protoc_insertion_point(message_clear_start:disk.GetDirReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.root_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDirReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes root = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_root();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetDirReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:disk.GetDirReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes root = 1;
  if (!this->_internal_root().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_root(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:disk.GetDirReq)
  return target;
}

size_t GetDirReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:disk.GetDirReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes root = 1;
  if (!this->_internal_root().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_root());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetDirReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetDirReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetDirReq::GetClassData() const { return &_class_data_; }


void GetDirReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetDirReq*>(&to_msg);
  auto& from = static_cast<const GetDirReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:disk.GetDirReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_root().empty()) {
    _this->_internal_set_root(from._internal_root());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetDirReq::CopyFrom(const GetDirReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:disk.GetDirReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDirReq::IsInitialized() const {
  return true;
}

void GetDirReq::InternalSwap(GetDirReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.root_, lhs_arena,
      &other->_impl_.root_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDirReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_disk_5fclient_5fgui_2eproto_getter, &descriptor_table_disk_5fclient_5fgui_2eproto_once,
      file_level_metadata_disk_5fclient_5fgui_2eproto[0]);
}

// ===================================================================

class FileInfo::_Internal {
 public:
};

FileInfo::FileInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:disk.FileInfo)
}
FileInfo::FileInfo(const FileInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FileInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.filename_){}
    , decltype(_impl_.filedir_){}
    , decltype(_impl_.filetime_){}
    , decltype(_impl_.md5_){}
    , decltype(_impl_.local_path_){}
    , decltype(_impl_.password_){}
    , decltype(_impl_.filesize_){}
    , decltype(_impl_.net_size_){}
    , decltype(_impl_.ori_size_){}
    , decltype(_impl_.is_dir_){}
    , decltype(_impl_.is_enc_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_filename().empty()) {
    _this->_impl_.filename_.Set(from._internal_filename(), 
      _this->GetArenaForAllocation());
  }
  _impl_.filedir_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filedir_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_filedir().empty()) {
    _this->_impl_.filedir_.Set(from._internal_filedir(), 
      _this->GetArenaForAllocation());
  }
  _impl_.filetime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filetime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_filetime().empty()) {
    _this->_impl_.filetime_.Set(from._internal_filetime(), 
      _this->GetArenaForAllocation());
  }
  _impl_.md5_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.md5_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_md5().empty()) {
    _this->_impl_.md5_.Set(from._internal_md5(), 
      _this->GetArenaForAllocation());
  }
  _impl_.local_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.local_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_local_path().empty()) {
    _this->_impl_.local_path_.Set(from._internal_local_path(), 
      _this->GetArenaForAllocation());
  }
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    _this->_impl_.password_.Set(from._internal_password(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.filesize_, &from._impl_.filesize_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_enc_) -
    reinterpret_cast<char*>(&_impl_.filesize_)) + sizeof(_impl_.is_enc_));
  // @@protoc_insertion_point(copy_constructor:disk.FileInfo)
}

inline void FileInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.filename_){}
    , decltype(_impl_.filedir_){}
    , decltype(_impl_.filetime_){}
    , decltype(_impl_.md5_){}
    , decltype(_impl_.local_path_){}
    , decltype(_impl_.password_){}
    , decltype(_impl_.filesize_){int64_t{0}}
    , decltype(_impl_.net_size_){int64_t{0}}
    , decltype(_impl_.ori_size_){int64_t{0}}
    , decltype(_impl_.is_dir_){false}
    , decltype(_impl_.is_enc_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.filedir_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filedir_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.filetime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filetime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.md5_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.md5_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.local_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.local_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FileInfo::~FileInfo() {
  // @@protoc_insertion_point(destructor:disk.FileInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FileInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.filename_.Destroy();
  _impl_.filedir_.Destroy();
  _impl_.filetime_.Destroy();
  _impl_.md5_.Destroy();
  _impl_.local_path_.Destroy();
  _impl_.password_.Destroy();
}

void FileInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FileInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:disk.FileInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.filename_.ClearToEmpty();
  _impl_.filedir_.ClearToEmpty();
  _impl_.filetime_.ClearToEmpty();
  _impl_.md5_.ClearToEmpty();
  _impl_.local_path_.ClearToEmpty();
  _impl_.password_.ClearToEmpty();
  ::memset(&_impl_.filesize_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_enc_) -
      reinterpret_cast<char*>(&_impl_.filesize_)) + sizeof(_impl_.is_enc_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes filename = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_filename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes filedir = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_filedir();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 filesize = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.filesize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string filetime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_filetime();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "disk.FileInfo.filetime"));
        } else
          goto handle_unusual;
        continue;
      // bool is_dir = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.is_dir_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes md5 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_md5();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes local_path = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_local_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 net_size = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.net_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_enc = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.is_enc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 ori_size = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.ori_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes password = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FileInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:disk.FileInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes filename = 1;
  if (!this->_internal_filename().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_filename(), target);
  }

  // bytes filedir = 2;
  if (!this->_internal_filedir().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_filedir(), target);
  }

  // int64 filesize = 3;
  if (this->_internal_filesize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_filesize(), target);
  }

  // string filetime = 4;
  if (!this->_internal_filetime().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filetime().data(), static_cast<int>(this->_internal_filetime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "disk.FileInfo.filetime");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_filetime(), target);
  }

  // bool is_dir = 5;
  if (this->_internal_is_dir() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_is_dir(), target);
  }

  // bytes md5 = 6;
  if (!this->_internal_md5().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_md5(), target);
  }

  // bytes local_path = 7;
  if (!this->_internal_local_path().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_local_path(), target);
  }

  // int64 net_size = 8;
  if (this->_internal_net_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_net_size(), target);
  }

  // bool is_enc = 9;
  if (this->_internal_is_enc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_is_enc(), target);
  }

  // int64 ori_size = 10;
  if (this->_internal_ori_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(10, this->_internal_ori_size(), target);
  }

  // bytes password = 11;
  if (!this->_internal_password().empty()) {
    target = stream->WriteBytesMaybeAliased(
        11, this->_internal_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:disk.FileInfo)
  return target;
}

size_t FileInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:disk.FileInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes filename = 1;
  if (!this->_internal_filename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_filename());
  }

  // bytes filedir = 2;
  if (!this->_internal_filedir().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_filedir());
  }

  // string filetime = 4;
  if (!this->_internal_filetime().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filetime());
  }

  // bytes md5 = 6;
  if (!this->_internal_md5().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_md5());
  }

  // bytes local_path = 7;
  if (!this->_internal_local_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_local_path());
  }

  // bytes password = 11;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_password());
  }

  // int64 filesize = 3;
  if (this->_internal_filesize() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_filesize());
  }

  // int64 net_size = 8;
  if (this->_internal_net_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_net_size());
  }

  // int64 ori_size = 10;
  if (this->_internal_ori_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_ori_size());
  }

  // bool is_dir = 5;
  if (this->_internal_is_dir() != 0) {
    total_size += 1 + 1;
  }

  // bool is_enc = 9;
  if (this->_internal_is_enc() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FileInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FileInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FileInfo::GetClassData() const { return &_class_data_; }


void FileInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FileInfo*>(&to_msg);
  auto& from = static_cast<const FileInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:disk.FileInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_filename().empty()) {
    _this->_internal_set_filename(from._internal_filename());
  }
  if (!from._internal_filedir().empty()) {
    _this->_internal_set_filedir(from._internal_filedir());
  }
  if (!from._internal_filetime().empty()) {
    _this->_internal_set_filetime(from._internal_filetime());
  }
  if (!from._internal_md5().empty()) {
    _this->_internal_set_md5(from._internal_md5());
  }
  if (!from._internal_local_path().empty()) {
    _this->_internal_set_local_path(from._internal_local_path());
  }
  if (!from._internal_password().empty()) {
    _this->_internal_set_password(from._internal_password());
  }
  if (from._internal_filesize() != 0) {
    _this->_internal_set_filesize(from._internal_filesize());
  }
  if (from._internal_net_size() != 0) {
    _this->_internal_set_net_size(from._internal_net_size());
  }
  if (from._internal_ori_size() != 0) {
    _this->_internal_set_ori_size(from._internal_ori_size());
  }
  if (from._internal_is_dir() != 0) {
    _this->_internal_set_is_dir(from._internal_is_dir());
  }
  if (from._internal_is_enc() != 0) {
    _this->_internal_set_is_enc(from._internal_is_enc());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FileInfo::CopyFrom(const FileInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:disk.FileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileInfo::IsInitialized() const {
  return true;
}

void FileInfo::InternalSwap(FileInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.filename_, lhs_arena,
      &other->_impl_.filename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.filedir_, lhs_arena,
      &other->_impl_.filedir_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.filetime_, lhs_arena,
      &other->_impl_.filetime_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.md5_, lhs_arena,
      &other->_impl_.md5_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.local_path_, lhs_arena,
      &other->_impl_.local_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.password_, lhs_arena,
      &other->_impl_.password_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FileInfo, _impl_.is_enc_)
      + sizeof(FileInfo::_impl_.is_enc_)
      - PROTOBUF_FIELD_OFFSET(FileInfo, _impl_.filesize_)>(
          reinterpret_cast<char*>(&_impl_.filesize_),
          reinterpret_cast<char*>(&other->_impl_.filesize_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FileInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_disk_5fclient_5fgui_2eproto_getter, &descriptor_table_disk_5fclient_5fgui_2eproto_once,
      file_level_metadata_disk_5fclient_5fgui_2eproto[1]);
}

// ===================================================================

class FileInfoList::_Internal {
 public:
};

FileInfoList::FileInfoList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:disk.FileInfoList)
}
FileInfoList::FileInfoList(const FileInfoList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FileInfoList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.files_){from._impl_.files_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:disk.FileInfoList)
}

inline void FileInfoList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.files_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FileInfoList::~FileInfoList() {
  // @@protoc_insertion_point(destructor:disk.FileInfoList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FileInfoList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.files_.~RepeatedPtrField();
}

void FileInfoList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FileInfoList::Clear() {
// @@protoc_insertion_point(message_clear_start:disk.FileInfoList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.files_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileInfoList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .disk.FileInfo files = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_files(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FileInfoList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:disk.FileInfoList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .disk.FileInfo files = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_files_size()); i < n; i++) {
    const auto& repfield = this->_internal_files(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:disk.FileInfoList)
  return target;
}

size_t FileInfoList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:disk.FileInfoList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .disk.FileInfo files = 4;
  total_size += 1UL * this->_internal_files_size();
  for (const auto& msg : this->_impl_.files_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FileInfoList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FileInfoList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FileInfoList::GetClassData() const { return &_class_data_; }


void FileInfoList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FileInfoList*>(&to_msg);
  auto& from = static_cast<const FileInfoList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:disk.FileInfoList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.files_.MergeFrom(from._impl_.files_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FileInfoList::CopyFrom(const FileInfoList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:disk.FileInfoList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileInfoList::IsInitialized() const {
  return true;
}

void FileInfoList::InternalSwap(FileInfoList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.files_.InternalSwap(&other->_impl_.files_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FileInfoList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_disk_5fclient_5fgui_2eproto_getter, &descriptor_table_disk_5fclient_5fgui_2eproto_once,
      file_level_metadata_disk_5fclient_5fgui_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace disk
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::disk::GetDirReq*
Arena::CreateMaybeMessage< ::disk::GetDirReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::disk::GetDirReq >(arena);
}
template<> PROTOBUF_NOINLINE ::disk::FileInfo*
Arena::CreateMaybeMessage< ::disk::FileInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::disk::FileInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::disk::FileInfoList*
Arena::CreateMaybeMessage< ::disk::FileInfoList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::disk::FileInfoList >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
