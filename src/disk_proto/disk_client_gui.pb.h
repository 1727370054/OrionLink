// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: disk_client_gui.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_disk_5fclient_5fgui_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_disk_5fclient_5fgui_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021011 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_disk_5fclient_5fgui_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_disk_5fclient_5fgui_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_disk_5fclient_5fgui_2eproto;
namespace disk {
class DiskInfo;
struct DiskInfoDefaultTypeInternal;
extern DiskInfoDefaultTypeInternal _DiskInfo_default_instance_;
class FileInfo;
struct FileInfoDefaultTypeInternal;
extern FileInfoDefaultTypeInternal _FileInfo_default_instance_;
class FileInfoList;
struct FileInfoListDefaultTypeInternal;
extern FileInfoListDefaultTypeInternal _FileInfoList_default_instance_;
class FileSlice;
struct FileSliceDefaultTypeInternal;
extern FileSliceDefaultTypeInternal _FileSlice_default_instance_;
class FileTask;
struct FileTaskDefaultTypeInternal;
extern FileTaskDefaultTypeInternal _FileTask_default_instance_;
class GetDirReq;
struct GetDirReqDefaultTypeInternal;
extern GetDirReqDefaultTypeInternal _GetDirReq_default_instance_;
class RenameReq;
struct RenameReqDefaultTypeInternal;
extern RenameReqDefaultTypeInternal _RenameReq_default_instance_;
}  // namespace disk
PROTOBUF_NAMESPACE_OPEN
template<> ::disk::DiskInfo* Arena::CreateMaybeMessage<::disk::DiskInfo>(Arena*);
template<> ::disk::FileInfo* Arena::CreateMaybeMessage<::disk::FileInfo>(Arena*);
template<> ::disk::FileInfoList* Arena::CreateMaybeMessage<::disk::FileInfoList>(Arena*);
template<> ::disk::FileSlice* Arena::CreateMaybeMessage<::disk::FileSlice>(Arena*);
template<> ::disk::FileTask* Arena::CreateMaybeMessage<::disk::FileTask>(Arena*);
template<> ::disk::GetDirReq* Arena::CreateMaybeMessage<::disk::GetDirReq>(Arena*);
template<> ::disk::RenameReq* Arena::CreateMaybeMessage<::disk::RenameReq>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace disk {

enum FileMsgType : int {
  FILE_MSG_NONE = 0,
  GET_DIR_REQ = 1001,
  GET_DIR_RES = 1002,
  UPLOAD_FILE_REQ = 1003,
  UPLOAD_FILE_RES = 1004,
  SEND_SLICE_REQ = 1005,
  SEND_SLICE_RES = 1007,
  UPLOAD_FILE_END_REQ = 1008,
  UPLOAD_FILE_END_RES = 1009,
  DOWNLOAD_FILE_REQ = 1010,
  DOWNLOAD_FILE_RES = 1011,
  DOWNLOAD_FILE_BEGTIN = 10012,
  DOWNLOAD_SLICE_REQ = 1012,
  DOWNLOAD_SLICE_RES = 1013,
  DELETE_FILE_REQ = 1014,
  DELETE_FILE_RES = 1015,
  NEW_DIR_REQ = 1016,
  NEW_DIR_RES = 1017,
  GET_DISK_INFO_REQ = 1018,
  GET_DISK_INFO_RES = 1019,
  RENAME_REQ = 1020,
  RENAME_RES = 1021,
  FileMsgType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  FileMsgType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool FileMsgType_IsValid(int value);
constexpr FileMsgType FileMsgType_MIN = FILE_MSG_NONE;
constexpr FileMsgType FileMsgType_MAX = DOWNLOAD_FILE_BEGTIN;
constexpr int FileMsgType_ARRAYSIZE = FileMsgType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FileMsgType_descriptor();
template<typename T>
inline const std::string& FileMsgType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FileMsgType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FileMsgType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FileMsgType_descriptor(), enum_t_value);
}
inline bool FileMsgType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FileMsgType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FileMsgType>(
    FileMsgType_descriptor(), name, value);
}
// ===================================================================

class DiskInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:disk.DiskInfo) */ {
 public:
  inline DiskInfo() : DiskInfo(nullptr) {}
  ~DiskInfo() override;
  explicit PROTOBUF_CONSTEXPR DiskInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DiskInfo(const DiskInfo& from);
  DiskInfo(DiskInfo&& from) noexcept
    : DiskInfo() {
    *this = ::std::move(from);
  }

  inline DiskInfo& operator=(const DiskInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiskInfo& operator=(DiskInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DiskInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const DiskInfo* internal_default_instance() {
    return reinterpret_cast<const DiskInfo*>(
               &_DiskInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DiskInfo& a, DiskInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(DiskInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DiskInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DiskInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DiskInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DiskInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DiskInfo& from) {
    DiskInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiskInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "disk.DiskInfo";
  }
  protected:
  explicit DiskInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAvailFieldNumber = 1,
    kTotalFieldNumber = 2,
    kFreeFieldNumber = 3,
    kDirSizeFieldNumber = 4,
  };
  // int64 avail = 1;
  void clear_avail();
  int64_t avail() const;
  void set_avail(int64_t value);
  private:
  int64_t _internal_avail() const;
  void _internal_set_avail(int64_t value);
  public:

  // int64 total = 2;
  void clear_total();
  int64_t total() const;
  void set_total(int64_t value);
  private:
  int64_t _internal_total() const;
  void _internal_set_total(int64_t value);
  public:

  // int64 free = 3;
  void clear_free();
  int64_t free() const;
  void set_free(int64_t value);
  private:
  int64_t _internal_free() const;
  void _internal_set_free(int64_t value);
  public:

  // int64 dir_size = 4;
  void clear_dir_size();
  int64_t dir_size() const;
  void set_dir_size(int64_t value);
  private:
  int64_t _internal_dir_size() const;
  void _internal_set_dir_size(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:disk.DiskInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t avail_;
    int64_t total_;
    int64_t free_;
    int64_t dir_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_disk_5fclient_5fgui_2eproto;
};
// -------------------------------------------------------------------

class GetDirReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:disk.GetDirReq) */ {
 public:
  inline GetDirReq() : GetDirReq(nullptr) {}
  ~GetDirReq() override;
  explicit PROTOBUF_CONSTEXPR GetDirReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetDirReq(const GetDirReq& from);
  GetDirReq(GetDirReq&& from) noexcept
    : GetDirReq() {
    *this = ::std::move(from);
  }

  inline GetDirReq& operator=(const GetDirReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDirReq& operator=(GetDirReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetDirReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetDirReq* internal_default_instance() {
    return reinterpret_cast<const GetDirReq*>(
               &_GetDirReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetDirReq& a, GetDirReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDirReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDirReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetDirReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetDirReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetDirReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetDirReq& from) {
    GetDirReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDirReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "disk.GetDirReq";
  }
  protected:
  explicit GetDirReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRootFieldNumber = 1,
  };
  // bytes root = 1;
  void clear_root();
  const std::string& root() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_root(ArgT0&& arg0, ArgT... args);
  std::string* mutable_root();
  PROTOBUF_NODISCARD std::string* release_root();
  void set_allocated_root(std::string* root);
  private:
  const std::string& _internal_root() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_root(const std::string& value);
  std::string* _internal_mutable_root();
  public:

  // @@protoc_insertion_point(class_scope:disk.GetDirReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr root_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_disk_5fclient_5fgui_2eproto;
};
// -------------------------------------------------------------------

class FileInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:disk.FileInfo) */ {
 public:
  inline FileInfo() : FileInfo(nullptr) {}
  ~FileInfo() override;
  explicit PROTOBUF_CONSTEXPR FileInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileInfo(const FileInfo& from);
  FileInfo(FileInfo&& from) noexcept
    : FileInfo() {
    *this = ::std::move(from);
  }

  inline FileInfo& operator=(const FileInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileInfo& operator=(FileInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileInfo* internal_default_instance() {
    return reinterpret_cast<const FileInfo*>(
               &_FileInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FileInfo& a, FileInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(FileInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FileInfo& from) {
    FileInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "disk.FileInfo";
  }
  protected:
  explicit FileInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilenameFieldNumber = 1,
    kFiledirFieldNumber = 2,
    kFiletimeFieldNumber = 4,
    kMd5FieldNumber = 6,
    kLocalPathFieldNumber = 7,
    kPasswordFieldNumber = 11,
    kFilesizeFieldNumber = 3,
    kNetSizeFieldNumber = 8,
    kOriSizeFieldNumber = 10,
    kIsDirFieldNumber = 5,
    kIsEncFieldNumber = 9,
  };
  // bytes filename = 1;
  void clear_filename();
  const std::string& filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // bytes filedir = 2;
  void clear_filedir();
  const std::string& filedir() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filedir(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filedir();
  PROTOBUF_NODISCARD std::string* release_filedir();
  void set_allocated_filedir(std::string* filedir);
  private:
  const std::string& _internal_filedir() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filedir(const std::string& value);
  std::string* _internal_mutable_filedir();
  public:

  // string filetime = 4;
  void clear_filetime();
  const std::string& filetime() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filetime(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filetime();
  PROTOBUF_NODISCARD std::string* release_filetime();
  void set_allocated_filetime(std::string* filetime);
  private:
  const std::string& _internal_filetime() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filetime(const std::string& value);
  std::string* _internal_mutable_filetime();
  public:

  // bytes md5 = 6;
  void clear_md5();
  const std::string& md5() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_md5(ArgT0&& arg0, ArgT... args);
  std::string* mutable_md5();
  PROTOBUF_NODISCARD std::string* release_md5();
  void set_allocated_md5(std::string* md5);
  private:
  const std::string& _internal_md5() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_md5(const std::string& value);
  std::string* _internal_mutable_md5();
  public:

  // bytes local_path = 7;
  void clear_local_path();
  const std::string& local_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_local_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_local_path();
  PROTOBUF_NODISCARD std::string* release_local_path();
  void set_allocated_local_path(std::string* local_path);
  private:
  const std::string& _internal_local_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_local_path(const std::string& value);
  std::string* _internal_mutable_local_path();
  public:

  // bytes password = 11;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // int64 filesize = 3;
  void clear_filesize();
  int64_t filesize() const;
  void set_filesize(int64_t value);
  private:
  int64_t _internal_filesize() const;
  void _internal_set_filesize(int64_t value);
  public:

  // int64 net_size = 8;
  void clear_net_size();
  int64_t net_size() const;
  void set_net_size(int64_t value);
  private:
  int64_t _internal_net_size() const;
  void _internal_set_net_size(int64_t value);
  public:

  // int64 ori_size = 10;
  void clear_ori_size();
  int64_t ori_size() const;
  void set_ori_size(int64_t value);
  private:
  int64_t _internal_ori_size() const;
  void _internal_set_ori_size(int64_t value);
  public:

  // bool is_dir = 5;
  void clear_is_dir();
  bool is_dir() const;
  void set_is_dir(bool value);
  private:
  bool _internal_is_dir() const;
  void _internal_set_is_dir(bool value);
  public:

  // bool is_enc = 9;
  void clear_is_enc();
  bool is_enc() const;
  void set_is_enc(bool value);
  private:
  bool _internal_is_enc() const;
  void _internal_set_is_enc(bool value);
  public:

  // @@protoc_insertion_point(class_scope:disk.FileInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filedir_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filetime_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr md5_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr local_path_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
    int64_t filesize_;
    int64_t net_size_;
    int64_t ori_size_;
    bool is_dir_;
    bool is_enc_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_disk_5fclient_5fgui_2eproto;
};
// -------------------------------------------------------------------

class FileSlice final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:disk.FileSlice) */ {
 public:
  inline FileSlice() : FileSlice(nullptr) {}
  ~FileSlice() override;
  explicit PROTOBUF_CONSTEXPR FileSlice(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileSlice(const FileSlice& from);
  FileSlice(FileSlice&& from) noexcept
    : FileSlice() {
    *this = ::std::move(from);
  }

  inline FileSlice& operator=(const FileSlice& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileSlice& operator=(FileSlice&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileSlice& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileSlice* internal_default_instance() {
    return reinterpret_cast<const FileSlice*>(
               &_FileSlice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FileSlice& a, FileSlice& b) {
    a.Swap(&b);
  }
  inline void Swap(FileSlice* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileSlice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileSlice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileSlice>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileSlice& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FileSlice& from) {
    FileSlice::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileSlice* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "disk.FileSlice";
  }
  protected:
  explicit FileSlice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMd5FieldNumber = 4,
    kFileFieldNumber = 1,
    kSizeFieldNumber = 2,
    kOffsetFieldNumber = 3,
    kIsOkFieldNumber = 5,
  };
  // bytes md5 = 4;
  void clear_md5();
  const std::string& md5() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_md5(ArgT0&& arg0, ArgT... args);
  std::string* mutable_md5();
  PROTOBUF_NODISCARD std::string* release_md5();
  void set_allocated_md5(std::string* md5);
  private:
  const std::string& _internal_md5() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_md5(const std::string& value);
  std::string* _internal_mutable_md5();
  public:

  // .disk.FileInfo file = 1;
  bool has_file() const;
  private:
  bool _internal_has_file() const;
  public:
  void clear_file();
  const ::disk::FileInfo& file() const;
  PROTOBUF_NODISCARD ::disk::FileInfo* release_file();
  ::disk::FileInfo* mutable_file();
  void set_allocated_file(::disk::FileInfo* file);
  private:
  const ::disk::FileInfo& _internal_file() const;
  ::disk::FileInfo* _internal_mutable_file();
  public:
  void unsafe_arena_set_allocated_file(
      ::disk::FileInfo* file);
  ::disk::FileInfo* unsafe_arena_release_file();

  // int64 size = 2;
  void clear_size();
  int64_t size() const;
  void set_size(int64_t value);
  private:
  int64_t _internal_size() const;
  void _internal_set_size(int64_t value);
  public:

  // int64 offset = 3;
  void clear_offset();
  int64_t offset() const;
  void set_offset(int64_t value);
  private:
  int64_t _internal_offset() const;
  void _internal_set_offset(int64_t value);
  public:

  // bool is_ok = 5;
  void clear_is_ok();
  bool is_ok() const;
  void set_is_ok(bool value);
  private:
  bool _internal_is_ok() const;
  void _internal_set_is_ok(bool value);
  public:

  // @@protoc_insertion_point(class_scope:disk.FileSlice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr md5_;
    ::disk::FileInfo* file_;
    int64_t size_;
    int64_t offset_;
    bool is_ok_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_disk_5fclient_5fgui_2eproto;
};
// -------------------------------------------------------------------

class FileInfoList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:disk.FileInfoList) */ {
 public:
  inline FileInfoList() : FileInfoList(nullptr) {}
  ~FileInfoList() override;
  explicit PROTOBUF_CONSTEXPR FileInfoList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileInfoList(const FileInfoList& from);
  FileInfoList(FileInfoList&& from) noexcept
    : FileInfoList() {
    *this = ::std::move(from);
  }

  inline FileInfoList& operator=(const FileInfoList& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileInfoList& operator=(FileInfoList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileInfoList& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileInfoList* internal_default_instance() {
    return reinterpret_cast<const FileInfoList*>(
               &_FileInfoList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FileInfoList& a, FileInfoList& b) {
    a.Swap(&b);
  }
  inline void Swap(FileInfoList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileInfoList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileInfoList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileInfoList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileInfoList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FileInfoList& from) {
    FileInfoList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileInfoList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "disk.FileInfoList";
  }
  protected:
  explicit FileInfoList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilesFieldNumber = 4,
  };
  // repeated .disk.FileInfo files = 4;
  int files_size() const;
  private:
  int _internal_files_size() const;
  public:
  void clear_files();
  ::disk::FileInfo* mutable_files(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::disk::FileInfo >*
      mutable_files();
  private:
  const ::disk::FileInfo& _internal_files(int index) const;
  ::disk::FileInfo* _internal_add_files();
  public:
  const ::disk::FileInfo& files(int index) const;
  ::disk::FileInfo* add_files();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::disk::FileInfo >&
      files() const;

  // @@protoc_insertion_point(class_scope:disk.FileInfoList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::disk::FileInfo > files_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_disk_5fclient_5fgui_2eproto;
};
// -------------------------------------------------------------------

class FileTask final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:disk.FileTask) */ {
 public:
  inline FileTask() : FileTask(nullptr) {}
  ~FileTask() override;
  explicit PROTOBUF_CONSTEXPR FileTask(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileTask(const FileTask& from);
  FileTask(FileTask&& from) noexcept
    : FileTask() {
    *this = ::std::move(from);
  }

  inline FileTask& operator=(const FileTask& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileTask& operator=(FileTask&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileTask& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileTask* internal_default_instance() {
    return reinterpret_cast<const FileTask*>(
               &_FileTask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(FileTask& a, FileTask& b) {
    a.Swap(&b);
  }
  inline void Swap(FileTask* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileTask* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileTask* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileTask>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileTask& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FileTask& from) {
    FileTask::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileTask* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "disk.FileTask";
  }
  protected:
  explicit FileTask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTasktimeFieldNumber = 6,
    kFileFieldNumber = 9,
    kIndexFieldNumber = 1,
    kIsCompleteFieldNumber = 7,
    kIsSecFieldNumber = 8,
  };
  // string tasktime = 6;
  void clear_tasktime();
  const std::string& tasktime() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tasktime(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tasktime();
  PROTOBUF_NODISCARD std::string* release_tasktime();
  void set_allocated_tasktime(std::string* tasktime);
  private:
  const std::string& _internal_tasktime() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tasktime(const std::string& value);
  std::string* _internal_mutable_tasktime();
  public:

  // .disk.FileInfo file = 9;
  bool has_file() const;
  private:
  bool _internal_has_file() const;
  public:
  void clear_file();
  const ::disk::FileInfo& file() const;
  PROTOBUF_NODISCARD ::disk::FileInfo* release_file();
  ::disk::FileInfo* mutable_file();
  void set_allocated_file(::disk::FileInfo* file);
  private:
  const ::disk::FileInfo& _internal_file() const;
  ::disk::FileInfo* _internal_mutable_file();
  public:
  void unsafe_arena_set_allocated_file(
      ::disk::FileInfo* file);
  ::disk::FileInfo* unsafe_arena_release_file();

  // int32 index = 1;
  void clear_index();
  int32_t index() const;
  void set_index(int32_t value);
  private:
  int32_t _internal_index() const;
  void _internal_set_index(int32_t value);
  public:

  // bool is_complete = 7;
  void clear_is_complete();
  bool is_complete() const;
  void set_is_complete(bool value);
  private:
  bool _internal_is_complete() const;
  void _internal_set_is_complete(bool value);
  public:

  // bool is_sec = 8;
  void clear_is_sec();
  bool is_sec() const;
  void set_is_sec(bool value);
  private:
  bool _internal_is_sec() const;
  void _internal_set_is_sec(bool value);
  public:

  // @@protoc_insertion_point(class_scope:disk.FileTask)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tasktime_;
    ::disk::FileInfo* file_;
    int32_t index_;
    bool is_complete_;
    bool is_sec_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_disk_5fclient_5fgui_2eproto;
};
// -------------------------------------------------------------------

class RenameReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:disk.RenameReq) */ {
 public:
  inline RenameReq() : RenameReq(nullptr) {}
  ~RenameReq() override;
  explicit PROTOBUF_CONSTEXPR RenameReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RenameReq(const RenameReq& from);
  RenameReq(RenameReq&& from) noexcept
    : RenameReq() {
    *this = ::std::move(from);
  }

  inline RenameReq& operator=(const RenameReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline RenameReq& operator=(RenameReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RenameReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const RenameReq* internal_default_instance() {
    return reinterpret_cast<const RenameReq*>(
               &_RenameReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RenameReq& a, RenameReq& b) {
    a.Swap(&b);
  }
  inline void Swap(RenameReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RenameReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RenameReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RenameReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RenameReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RenameReq& from) {
    RenameReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RenameReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "disk.RenameReq";
  }
  protected:
  explicit RenameReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOldFilenameFieldNumber = 1,
    kNewFilenameFieldNumber = 2,
  };
  // bytes old_filename = 1;
  void clear_old_filename();
  const std::string& old_filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_old_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_old_filename();
  PROTOBUF_NODISCARD std::string* release_old_filename();
  void set_allocated_old_filename(std::string* old_filename);
  private:
  const std::string& _internal_old_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_old_filename(const std::string& value);
  std::string* _internal_mutable_old_filename();
  public:

  // bytes new_filename = 2;
  void clear_new_filename();
  const std::string& new_filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_new_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_new_filename();
  PROTOBUF_NODISCARD std::string* release_new_filename();
  void set_allocated_new_filename(std::string* new_filename);
  private:
  const std::string& _internal_new_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_new_filename(const std::string& value);
  std::string* _internal_mutable_new_filename();
  public:

  // @@protoc_insertion_point(class_scope:disk.RenameReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr old_filename_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr new_filename_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_disk_5fclient_5fgui_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DiskInfo

// int64 avail = 1;
inline void DiskInfo::clear_avail() {
  _impl_.avail_ = int64_t{0};
}
inline int64_t DiskInfo::_internal_avail() const {
  return _impl_.avail_;
}
inline int64_t DiskInfo::avail() const {
  // @@protoc_insertion_point(field_get:disk.DiskInfo.avail)
  return _internal_avail();
}
inline void DiskInfo::_internal_set_avail(int64_t value) {
  
  _impl_.avail_ = value;
}
inline void DiskInfo::set_avail(int64_t value) {
  _internal_set_avail(value);
  // @@protoc_insertion_point(field_set:disk.DiskInfo.avail)
}

// int64 total = 2;
inline void DiskInfo::clear_total() {
  _impl_.total_ = int64_t{0};
}
inline int64_t DiskInfo::_internal_total() const {
  return _impl_.total_;
}
inline int64_t DiskInfo::total() const {
  // @@protoc_insertion_point(field_get:disk.DiskInfo.total)
  return _internal_total();
}
inline void DiskInfo::_internal_set_total(int64_t value) {
  
  _impl_.total_ = value;
}
inline void DiskInfo::set_total(int64_t value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:disk.DiskInfo.total)
}

// int64 free = 3;
inline void DiskInfo::clear_free() {
  _impl_.free_ = int64_t{0};
}
inline int64_t DiskInfo::_internal_free() const {
  return _impl_.free_;
}
inline int64_t DiskInfo::free() const {
  // @@protoc_insertion_point(field_get:disk.DiskInfo.free)
  return _internal_free();
}
inline void DiskInfo::_internal_set_free(int64_t value) {
  
  _impl_.free_ = value;
}
inline void DiskInfo::set_free(int64_t value) {
  _internal_set_free(value);
  // @@protoc_insertion_point(field_set:disk.DiskInfo.free)
}

// int64 dir_size = 4;
inline void DiskInfo::clear_dir_size() {
  _impl_.dir_size_ = int64_t{0};
}
inline int64_t DiskInfo::_internal_dir_size() const {
  return _impl_.dir_size_;
}
inline int64_t DiskInfo::dir_size() const {
  // @@protoc_insertion_point(field_get:disk.DiskInfo.dir_size)
  return _internal_dir_size();
}
inline void DiskInfo::_internal_set_dir_size(int64_t value) {
  
  _impl_.dir_size_ = value;
}
inline void DiskInfo::set_dir_size(int64_t value) {
  _internal_set_dir_size(value);
  // @@protoc_insertion_point(field_set:disk.DiskInfo.dir_size)
}

// -------------------------------------------------------------------

// GetDirReq

// bytes root = 1;
inline void GetDirReq::clear_root() {
  _impl_.root_.ClearToEmpty();
}
inline const std::string& GetDirReq::root() const {
  // @@protoc_insertion_point(field_get:disk.GetDirReq.root)
  return _internal_root();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetDirReq::set_root(ArgT0&& arg0, ArgT... args) {
 
 _impl_.root_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:disk.GetDirReq.root)
}
inline std::string* GetDirReq::mutable_root() {
  std::string* _s = _internal_mutable_root();
  // @@protoc_insertion_point(field_mutable:disk.GetDirReq.root)
  return _s;
}
inline const std::string& GetDirReq::_internal_root() const {
  return _impl_.root_.Get();
}
inline void GetDirReq::_internal_set_root(const std::string& value) {
  
  _impl_.root_.Set(value, GetArenaForAllocation());
}
inline std::string* GetDirReq::_internal_mutable_root() {
  
  return _impl_.root_.Mutable(GetArenaForAllocation());
}
inline std::string* GetDirReq::release_root() {
  // @@protoc_insertion_point(field_release:disk.GetDirReq.root)
  return _impl_.root_.Release();
}
inline void GetDirReq::set_allocated_root(std::string* root) {
  if (root != nullptr) {
    
  } else {
    
  }
  _impl_.root_.SetAllocated(root, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.root_.IsDefault()) {
    _impl_.root_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:disk.GetDirReq.root)
}

// -------------------------------------------------------------------

// FileInfo

// bytes filename = 1;
inline void FileInfo::clear_filename() {
  _impl_.filename_.ClearToEmpty();
}
inline const std::string& FileInfo::filename() const {
  // @@protoc_insertion_point(field_get:disk.FileInfo.filename)
  return _internal_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileInfo::set_filename(ArgT0&& arg0, ArgT... args) {
 
 _impl_.filename_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:disk.FileInfo.filename)
}
inline std::string* FileInfo::mutable_filename() {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:disk.FileInfo.filename)
  return _s;
}
inline const std::string& FileInfo::_internal_filename() const {
  return _impl_.filename_.Get();
}
inline void FileInfo::_internal_set_filename(const std::string& value) {
  
  _impl_.filename_.Set(value, GetArenaForAllocation());
}
inline std::string* FileInfo::_internal_mutable_filename() {
  
  return _impl_.filename_.Mutable(GetArenaForAllocation());
}
inline std::string* FileInfo::release_filename() {
  // @@protoc_insertion_point(field_release:disk.FileInfo.filename)
  return _impl_.filename_.Release();
}
inline void FileInfo::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  _impl_.filename_.SetAllocated(filename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.filename_.IsDefault()) {
    _impl_.filename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:disk.FileInfo.filename)
}

// bytes filedir = 2;
inline void FileInfo::clear_filedir() {
  _impl_.filedir_.ClearToEmpty();
}
inline const std::string& FileInfo::filedir() const {
  // @@protoc_insertion_point(field_get:disk.FileInfo.filedir)
  return _internal_filedir();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileInfo::set_filedir(ArgT0&& arg0, ArgT... args) {
 
 _impl_.filedir_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:disk.FileInfo.filedir)
}
inline std::string* FileInfo::mutable_filedir() {
  std::string* _s = _internal_mutable_filedir();
  // @@protoc_insertion_point(field_mutable:disk.FileInfo.filedir)
  return _s;
}
inline const std::string& FileInfo::_internal_filedir() const {
  return _impl_.filedir_.Get();
}
inline void FileInfo::_internal_set_filedir(const std::string& value) {
  
  _impl_.filedir_.Set(value, GetArenaForAllocation());
}
inline std::string* FileInfo::_internal_mutable_filedir() {
  
  return _impl_.filedir_.Mutable(GetArenaForAllocation());
}
inline std::string* FileInfo::release_filedir() {
  // @@protoc_insertion_point(field_release:disk.FileInfo.filedir)
  return _impl_.filedir_.Release();
}
inline void FileInfo::set_allocated_filedir(std::string* filedir) {
  if (filedir != nullptr) {
    
  } else {
    
  }
  _impl_.filedir_.SetAllocated(filedir, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.filedir_.IsDefault()) {
    _impl_.filedir_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:disk.FileInfo.filedir)
}

// int64 filesize = 3;
inline void FileInfo::clear_filesize() {
  _impl_.filesize_ = int64_t{0};
}
inline int64_t FileInfo::_internal_filesize() const {
  return _impl_.filesize_;
}
inline int64_t FileInfo::filesize() const {
  // @@protoc_insertion_point(field_get:disk.FileInfo.filesize)
  return _internal_filesize();
}
inline void FileInfo::_internal_set_filesize(int64_t value) {
  
  _impl_.filesize_ = value;
}
inline void FileInfo::set_filesize(int64_t value) {
  _internal_set_filesize(value);
  // @@protoc_insertion_point(field_set:disk.FileInfo.filesize)
}

// string filetime = 4;
inline void FileInfo::clear_filetime() {
  _impl_.filetime_.ClearToEmpty();
}
inline const std::string& FileInfo::filetime() const {
  // @@protoc_insertion_point(field_get:disk.FileInfo.filetime)
  return _internal_filetime();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileInfo::set_filetime(ArgT0&& arg0, ArgT... args) {
 
 _impl_.filetime_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:disk.FileInfo.filetime)
}
inline std::string* FileInfo::mutable_filetime() {
  std::string* _s = _internal_mutable_filetime();
  // @@protoc_insertion_point(field_mutable:disk.FileInfo.filetime)
  return _s;
}
inline const std::string& FileInfo::_internal_filetime() const {
  return _impl_.filetime_.Get();
}
inline void FileInfo::_internal_set_filetime(const std::string& value) {
  
  _impl_.filetime_.Set(value, GetArenaForAllocation());
}
inline std::string* FileInfo::_internal_mutable_filetime() {
  
  return _impl_.filetime_.Mutable(GetArenaForAllocation());
}
inline std::string* FileInfo::release_filetime() {
  // @@protoc_insertion_point(field_release:disk.FileInfo.filetime)
  return _impl_.filetime_.Release();
}
inline void FileInfo::set_allocated_filetime(std::string* filetime) {
  if (filetime != nullptr) {
    
  } else {
    
  }
  _impl_.filetime_.SetAllocated(filetime, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.filetime_.IsDefault()) {
    _impl_.filetime_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:disk.FileInfo.filetime)
}

// bool is_dir = 5;
inline void FileInfo::clear_is_dir() {
  _impl_.is_dir_ = false;
}
inline bool FileInfo::_internal_is_dir() const {
  return _impl_.is_dir_;
}
inline bool FileInfo::is_dir() const {
  // @@protoc_insertion_point(field_get:disk.FileInfo.is_dir)
  return _internal_is_dir();
}
inline void FileInfo::_internal_set_is_dir(bool value) {
  
  _impl_.is_dir_ = value;
}
inline void FileInfo::set_is_dir(bool value) {
  _internal_set_is_dir(value);
  // @@protoc_insertion_point(field_set:disk.FileInfo.is_dir)
}

// bytes md5 = 6;
inline void FileInfo::clear_md5() {
  _impl_.md5_.ClearToEmpty();
}
inline const std::string& FileInfo::md5() const {
  // @@protoc_insertion_point(field_get:disk.FileInfo.md5)
  return _internal_md5();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileInfo::set_md5(ArgT0&& arg0, ArgT... args) {
 
 _impl_.md5_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:disk.FileInfo.md5)
}
inline std::string* FileInfo::mutable_md5() {
  std::string* _s = _internal_mutable_md5();
  // @@protoc_insertion_point(field_mutable:disk.FileInfo.md5)
  return _s;
}
inline const std::string& FileInfo::_internal_md5() const {
  return _impl_.md5_.Get();
}
inline void FileInfo::_internal_set_md5(const std::string& value) {
  
  _impl_.md5_.Set(value, GetArenaForAllocation());
}
inline std::string* FileInfo::_internal_mutable_md5() {
  
  return _impl_.md5_.Mutable(GetArenaForAllocation());
}
inline std::string* FileInfo::release_md5() {
  // @@protoc_insertion_point(field_release:disk.FileInfo.md5)
  return _impl_.md5_.Release();
}
inline void FileInfo::set_allocated_md5(std::string* md5) {
  if (md5 != nullptr) {
    
  } else {
    
  }
  _impl_.md5_.SetAllocated(md5, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.md5_.IsDefault()) {
    _impl_.md5_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:disk.FileInfo.md5)
}

// bytes local_path = 7;
inline void FileInfo::clear_local_path() {
  _impl_.local_path_.ClearToEmpty();
}
inline const std::string& FileInfo::local_path() const {
  // @@protoc_insertion_point(field_get:disk.FileInfo.local_path)
  return _internal_local_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileInfo::set_local_path(ArgT0&& arg0, ArgT... args) {
 
 _impl_.local_path_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:disk.FileInfo.local_path)
}
inline std::string* FileInfo::mutable_local_path() {
  std::string* _s = _internal_mutable_local_path();
  // @@protoc_insertion_point(field_mutable:disk.FileInfo.local_path)
  return _s;
}
inline const std::string& FileInfo::_internal_local_path() const {
  return _impl_.local_path_.Get();
}
inline void FileInfo::_internal_set_local_path(const std::string& value) {
  
  _impl_.local_path_.Set(value, GetArenaForAllocation());
}
inline std::string* FileInfo::_internal_mutable_local_path() {
  
  return _impl_.local_path_.Mutable(GetArenaForAllocation());
}
inline std::string* FileInfo::release_local_path() {
  // @@protoc_insertion_point(field_release:disk.FileInfo.local_path)
  return _impl_.local_path_.Release();
}
inline void FileInfo::set_allocated_local_path(std::string* local_path) {
  if (local_path != nullptr) {
    
  } else {
    
  }
  _impl_.local_path_.SetAllocated(local_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.local_path_.IsDefault()) {
    _impl_.local_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:disk.FileInfo.local_path)
}

// int64 net_size = 8;
inline void FileInfo::clear_net_size() {
  _impl_.net_size_ = int64_t{0};
}
inline int64_t FileInfo::_internal_net_size() const {
  return _impl_.net_size_;
}
inline int64_t FileInfo::net_size() const {
  // @@protoc_insertion_point(field_get:disk.FileInfo.net_size)
  return _internal_net_size();
}
inline void FileInfo::_internal_set_net_size(int64_t value) {
  
  _impl_.net_size_ = value;
}
inline void FileInfo::set_net_size(int64_t value) {
  _internal_set_net_size(value);
  // @@protoc_insertion_point(field_set:disk.FileInfo.net_size)
}

// bool is_enc = 9;
inline void FileInfo::clear_is_enc() {
  _impl_.is_enc_ = false;
}
inline bool FileInfo::_internal_is_enc() const {
  return _impl_.is_enc_;
}
inline bool FileInfo::is_enc() const {
  // @@protoc_insertion_point(field_get:disk.FileInfo.is_enc)
  return _internal_is_enc();
}
inline void FileInfo::_internal_set_is_enc(bool value) {
  
  _impl_.is_enc_ = value;
}
inline void FileInfo::set_is_enc(bool value) {
  _internal_set_is_enc(value);
  // @@protoc_insertion_point(field_set:disk.FileInfo.is_enc)
}

// int64 ori_size = 10;
inline void FileInfo::clear_ori_size() {
  _impl_.ori_size_ = int64_t{0};
}
inline int64_t FileInfo::_internal_ori_size() const {
  return _impl_.ori_size_;
}
inline int64_t FileInfo::ori_size() const {
  // @@protoc_insertion_point(field_get:disk.FileInfo.ori_size)
  return _internal_ori_size();
}
inline void FileInfo::_internal_set_ori_size(int64_t value) {
  
  _impl_.ori_size_ = value;
}
inline void FileInfo::set_ori_size(int64_t value) {
  _internal_set_ori_size(value);
  // @@protoc_insertion_point(field_set:disk.FileInfo.ori_size)
}

// bytes password = 11;
inline void FileInfo::clear_password() {
  _impl_.password_.ClearToEmpty();
}
inline const std::string& FileInfo::password() const {
  // @@protoc_insertion_point(field_get:disk.FileInfo.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileInfo::set_password(ArgT0&& arg0, ArgT... args) {
 
 _impl_.password_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:disk.FileInfo.password)
}
inline std::string* FileInfo::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:disk.FileInfo.password)
  return _s;
}
inline const std::string& FileInfo::_internal_password() const {
  return _impl_.password_.Get();
}
inline void FileInfo::_internal_set_password(const std::string& value) {
  
  _impl_.password_.Set(value, GetArenaForAllocation());
}
inline std::string* FileInfo::_internal_mutable_password() {
  
  return _impl_.password_.Mutable(GetArenaForAllocation());
}
inline std::string* FileInfo::release_password() {
  // @@protoc_insertion_point(field_release:disk.FileInfo.password)
  return _impl_.password_.Release();
}
inline void FileInfo::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  _impl_.password_.SetAllocated(password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:disk.FileInfo.password)
}

// -------------------------------------------------------------------

// FileSlice

// .disk.FileInfo file = 1;
inline bool FileSlice::_internal_has_file() const {
  return this != internal_default_instance() && _impl_.file_ != nullptr;
}
inline bool FileSlice::has_file() const {
  return _internal_has_file();
}
inline void FileSlice::clear_file() {
  if (GetArenaForAllocation() == nullptr && _impl_.file_ != nullptr) {
    delete _impl_.file_;
  }
  _impl_.file_ = nullptr;
}
inline const ::disk::FileInfo& FileSlice::_internal_file() const {
  const ::disk::FileInfo* p = _impl_.file_;
  return p != nullptr ? *p : reinterpret_cast<const ::disk::FileInfo&>(
      ::disk::_FileInfo_default_instance_);
}
inline const ::disk::FileInfo& FileSlice::file() const {
  // @@protoc_insertion_point(field_get:disk.FileSlice.file)
  return _internal_file();
}
inline void FileSlice::unsafe_arena_set_allocated_file(
    ::disk::FileInfo* file) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.file_);
  }
  _impl_.file_ = file;
  if (file) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:disk.FileSlice.file)
}
inline ::disk::FileInfo* FileSlice::release_file() {
  
  ::disk::FileInfo* temp = _impl_.file_;
  _impl_.file_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::disk::FileInfo* FileSlice::unsafe_arena_release_file() {
  // @@protoc_insertion_point(field_release:disk.FileSlice.file)
  
  ::disk::FileInfo* temp = _impl_.file_;
  _impl_.file_ = nullptr;
  return temp;
}
inline ::disk::FileInfo* FileSlice::_internal_mutable_file() {
  
  if (_impl_.file_ == nullptr) {
    auto* p = CreateMaybeMessage<::disk::FileInfo>(GetArenaForAllocation());
    _impl_.file_ = p;
  }
  return _impl_.file_;
}
inline ::disk::FileInfo* FileSlice::mutable_file() {
  ::disk::FileInfo* _msg = _internal_mutable_file();
  // @@protoc_insertion_point(field_mutable:disk.FileSlice.file)
  return _msg;
}
inline void FileSlice::set_allocated_file(::disk::FileInfo* file) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.file_;
  }
  if (file) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(file);
    if (message_arena != submessage_arena) {
      file = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, file, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.file_ = file;
  // @@protoc_insertion_point(field_set_allocated:disk.FileSlice.file)
}

// int64 size = 2;
inline void FileSlice::clear_size() {
  _impl_.size_ = int64_t{0};
}
inline int64_t FileSlice::_internal_size() const {
  return _impl_.size_;
}
inline int64_t FileSlice::size() const {
  // @@protoc_insertion_point(field_get:disk.FileSlice.size)
  return _internal_size();
}
inline void FileSlice::_internal_set_size(int64_t value) {
  
  _impl_.size_ = value;
}
inline void FileSlice::set_size(int64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:disk.FileSlice.size)
}

// int64 offset = 3;
inline void FileSlice::clear_offset() {
  _impl_.offset_ = int64_t{0};
}
inline int64_t FileSlice::_internal_offset() const {
  return _impl_.offset_;
}
inline int64_t FileSlice::offset() const {
  // @@protoc_insertion_point(field_get:disk.FileSlice.offset)
  return _internal_offset();
}
inline void FileSlice::_internal_set_offset(int64_t value) {
  
  _impl_.offset_ = value;
}
inline void FileSlice::set_offset(int64_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:disk.FileSlice.offset)
}

// bytes md5 = 4;
inline void FileSlice::clear_md5() {
  _impl_.md5_.ClearToEmpty();
}
inline const std::string& FileSlice::md5() const {
  // @@protoc_insertion_point(field_get:disk.FileSlice.md5)
  return _internal_md5();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileSlice::set_md5(ArgT0&& arg0, ArgT... args) {
 
 _impl_.md5_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:disk.FileSlice.md5)
}
inline std::string* FileSlice::mutable_md5() {
  std::string* _s = _internal_mutable_md5();
  // @@protoc_insertion_point(field_mutable:disk.FileSlice.md5)
  return _s;
}
inline const std::string& FileSlice::_internal_md5() const {
  return _impl_.md5_.Get();
}
inline void FileSlice::_internal_set_md5(const std::string& value) {
  
  _impl_.md5_.Set(value, GetArenaForAllocation());
}
inline std::string* FileSlice::_internal_mutable_md5() {
  
  return _impl_.md5_.Mutable(GetArenaForAllocation());
}
inline std::string* FileSlice::release_md5() {
  // @@protoc_insertion_point(field_release:disk.FileSlice.md5)
  return _impl_.md5_.Release();
}
inline void FileSlice::set_allocated_md5(std::string* md5) {
  if (md5 != nullptr) {
    
  } else {
    
  }
  _impl_.md5_.SetAllocated(md5, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.md5_.IsDefault()) {
    _impl_.md5_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:disk.FileSlice.md5)
}

// bool is_ok = 5;
inline void FileSlice::clear_is_ok() {
  _impl_.is_ok_ = false;
}
inline bool FileSlice::_internal_is_ok() const {
  return _impl_.is_ok_;
}
inline bool FileSlice::is_ok() const {
  // @@protoc_insertion_point(field_get:disk.FileSlice.is_ok)
  return _internal_is_ok();
}
inline void FileSlice::_internal_set_is_ok(bool value) {
  
  _impl_.is_ok_ = value;
}
inline void FileSlice::set_is_ok(bool value) {
  _internal_set_is_ok(value);
  // @@protoc_insertion_point(field_set:disk.FileSlice.is_ok)
}

// -------------------------------------------------------------------

// FileInfoList

// repeated .disk.FileInfo files = 4;
inline int FileInfoList::_internal_files_size() const {
  return _impl_.files_.size();
}
inline int FileInfoList::files_size() const {
  return _internal_files_size();
}
inline void FileInfoList::clear_files() {
  _impl_.files_.Clear();
}
inline ::disk::FileInfo* FileInfoList::mutable_files(int index) {
  // @@protoc_insertion_point(field_mutable:disk.FileInfoList.files)
  return _impl_.files_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::disk::FileInfo >*
FileInfoList::mutable_files() {
  // @@protoc_insertion_point(field_mutable_list:disk.FileInfoList.files)
  return &_impl_.files_;
}
inline const ::disk::FileInfo& FileInfoList::_internal_files(int index) const {
  return _impl_.files_.Get(index);
}
inline const ::disk::FileInfo& FileInfoList::files(int index) const {
  // @@protoc_insertion_point(field_get:disk.FileInfoList.files)
  return _internal_files(index);
}
inline ::disk::FileInfo* FileInfoList::_internal_add_files() {
  return _impl_.files_.Add();
}
inline ::disk::FileInfo* FileInfoList::add_files() {
  ::disk::FileInfo* _add = _internal_add_files();
  // @@protoc_insertion_point(field_add:disk.FileInfoList.files)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::disk::FileInfo >&
FileInfoList::files() const {
  // @@protoc_insertion_point(field_list:disk.FileInfoList.files)
  return _impl_.files_;
}

// -------------------------------------------------------------------

// FileTask

// int32 index = 1;
inline void FileTask::clear_index() {
  _impl_.index_ = 0;
}
inline int32_t FileTask::_internal_index() const {
  return _impl_.index_;
}
inline int32_t FileTask::index() const {
  // @@protoc_insertion_point(field_get:disk.FileTask.index)
  return _internal_index();
}
inline void FileTask::_internal_set_index(int32_t value) {
  
  _impl_.index_ = value;
}
inline void FileTask::set_index(int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:disk.FileTask.index)
}

// string tasktime = 6;
inline void FileTask::clear_tasktime() {
  _impl_.tasktime_.ClearToEmpty();
}
inline const std::string& FileTask::tasktime() const {
  // @@protoc_insertion_point(field_get:disk.FileTask.tasktime)
  return _internal_tasktime();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileTask::set_tasktime(ArgT0&& arg0, ArgT... args) {
 
 _impl_.tasktime_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:disk.FileTask.tasktime)
}
inline std::string* FileTask::mutable_tasktime() {
  std::string* _s = _internal_mutable_tasktime();
  // @@protoc_insertion_point(field_mutable:disk.FileTask.tasktime)
  return _s;
}
inline const std::string& FileTask::_internal_tasktime() const {
  return _impl_.tasktime_.Get();
}
inline void FileTask::_internal_set_tasktime(const std::string& value) {
  
  _impl_.tasktime_.Set(value, GetArenaForAllocation());
}
inline std::string* FileTask::_internal_mutable_tasktime() {
  
  return _impl_.tasktime_.Mutable(GetArenaForAllocation());
}
inline std::string* FileTask::release_tasktime() {
  // @@protoc_insertion_point(field_release:disk.FileTask.tasktime)
  return _impl_.tasktime_.Release();
}
inline void FileTask::set_allocated_tasktime(std::string* tasktime) {
  if (tasktime != nullptr) {
    
  } else {
    
  }
  _impl_.tasktime_.SetAllocated(tasktime, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tasktime_.IsDefault()) {
    _impl_.tasktime_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:disk.FileTask.tasktime)
}

// bool is_complete = 7;
inline void FileTask::clear_is_complete() {
  _impl_.is_complete_ = false;
}
inline bool FileTask::_internal_is_complete() const {
  return _impl_.is_complete_;
}
inline bool FileTask::is_complete() const {
  // @@protoc_insertion_point(field_get:disk.FileTask.is_complete)
  return _internal_is_complete();
}
inline void FileTask::_internal_set_is_complete(bool value) {
  
  _impl_.is_complete_ = value;
}
inline void FileTask::set_is_complete(bool value) {
  _internal_set_is_complete(value);
  // @@protoc_insertion_point(field_set:disk.FileTask.is_complete)
}

// bool is_sec = 8;
inline void FileTask::clear_is_sec() {
  _impl_.is_sec_ = false;
}
inline bool FileTask::_internal_is_sec() const {
  return _impl_.is_sec_;
}
inline bool FileTask::is_sec() const {
  // @@protoc_insertion_point(field_get:disk.FileTask.is_sec)
  return _internal_is_sec();
}
inline void FileTask::_internal_set_is_sec(bool value) {
  
  _impl_.is_sec_ = value;
}
inline void FileTask::set_is_sec(bool value) {
  _internal_set_is_sec(value);
  // @@protoc_insertion_point(field_set:disk.FileTask.is_sec)
}

// .disk.FileInfo file = 9;
inline bool FileTask::_internal_has_file() const {
  return this != internal_default_instance() && _impl_.file_ != nullptr;
}
inline bool FileTask::has_file() const {
  return _internal_has_file();
}
inline void FileTask::clear_file() {
  if (GetArenaForAllocation() == nullptr && _impl_.file_ != nullptr) {
    delete _impl_.file_;
  }
  _impl_.file_ = nullptr;
}
inline const ::disk::FileInfo& FileTask::_internal_file() const {
  const ::disk::FileInfo* p = _impl_.file_;
  return p != nullptr ? *p : reinterpret_cast<const ::disk::FileInfo&>(
      ::disk::_FileInfo_default_instance_);
}
inline const ::disk::FileInfo& FileTask::file() const {
  // @@protoc_insertion_point(field_get:disk.FileTask.file)
  return _internal_file();
}
inline void FileTask::unsafe_arena_set_allocated_file(
    ::disk::FileInfo* file) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.file_);
  }
  _impl_.file_ = file;
  if (file) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:disk.FileTask.file)
}
inline ::disk::FileInfo* FileTask::release_file() {
  
  ::disk::FileInfo* temp = _impl_.file_;
  _impl_.file_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::disk::FileInfo* FileTask::unsafe_arena_release_file() {
  // @@protoc_insertion_point(field_release:disk.FileTask.file)
  
  ::disk::FileInfo* temp = _impl_.file_;
  _impl_.file_ = nullptr;
  return temp;
}
inline ::disk::FileInfo* FileTask::_internal_mutable_file() {
  
  if (_impl_.file_ == nullptr) {
    auto* p = CreateMaybeMessage<::disk::FileInfo>(GetArenaForAllocation());
    _impl_.file_ = p;
  }
  return _impl_.file_;
}
inline ::disk::FileInfo* FileTask::mutable_file() {
  ::disk::FileInfo* _msg = _internal_mutable_file();
  // @@protoc_insertion_point(field_mutable:disk.FileTask.file)
  return _msg;
}
inline void FileTask::set_allocated_file(::disk::FileInfo* file) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.file_;
  }
  if (file) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(file);
    if (message_arena != submessage_arena) {
      file = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, file, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.file_ = file;
  // @@protoc_insertion_point(field_set_allocated:disk.FileTask.file)
}

// -------------------------------------------------------------------

// RenameReq

// bytes old_filename = 1;
inline void RenameReq::clear_old_filename() {
  _impl_.old_filename_.ClearToEmpty();
}
inline const std::string& RenameReq::old_filename() const {
  // @@protoc_insertion_point(field_get:disk.RenameReq.old_filename)
  return _internal_old_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RenameReq::set_old_filename(ArgT0&& arg0, ArgT... args) {
 
 _impl_.old_filename_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:disk.RenameReq.old_filename)
}
inline std::string* RenameReq::mutable_old_filename() {
  std::string* _s = _internal_mutable_old_filename();
  // @@protoc_insertion_point(field_mutable:disk.RenameReq.old_filename)
  return _s;
}
inline const std::string& RenameReq::_internal_old_filename() const {
  return _impl_.old_filename_.Get();
}
inline void RenameReq::_internal_set_old_filename(const std::string& value) {
  
  _impl_.old_filename_.Set(value, GetArenaForAllocation());
}
inline std::string* RenameReq::_internal_mutable_old_filename() {
  
  return _impl_.old_filename_.Mutable(GetArenaForAllocation());
}
inline std::string* RenameReq::release_old_filename() {
  // @@protoc_insertion_point(field_release:disk.RenameReq.old_filename)
  return _impl_.old_filename_.Release();
}
inline void RenameReq::set_allocated_old_filename(std::string* old_filename) {
  if (old_filename != nullptr) {
    
  } else {
    
  }
  _impl_.old_filename_.SetAllocated(old_filename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.old_filename_.IsDefault()) {
    _impl_.old_filename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:disk.RenameReq.old_filename)
}

// bytes new_filename = 2;
inline void RenameReq::clear_new_filename() {
  _impl_.new_filename_.ClearToEmpty();
}
inline const std::string& RenameReq::new_filename() const {
  // @@protoc_insertion_point(field_get:disk.RenameReq.new_filename)
  return _internal_new_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RenameReq::set_new_filename(ArgT0&& arg0, ArgT... args) {
 
 _impl_.new_filename_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:disk.RenameReq.new_filename)
}
inline std::string* RenameReq::mutable_new_filename() {
  std::string* _s = _internal_mutable_new_filename();
  // @@protoc_insertion_point(field_mutable:disk.RenameReq.new_filename)
  return _s;
}
inline const std::string& RenameReq::_internal_new_filename() const {
  return _impl_.new_filename_.Get();
}
inline void RenameReq::_internal_set_new_filename(const std::string& value) {
  
  _impl_.new_filename_.Set(value, GetArenaForAllocation());
}
inline std::string* RenameReq::_internal_mutable_new_filename() {
  
  return _impl_.new_filename_.Mutable(GetArenaForAllocation());
}
inline std::string* RenameReq::release_new_filename() {
  // @@protoc_insertion_point(field_release:disk.RenameReq.new_filename)
  return _impl_.new_filename_.Release();
}
inline void RenameReq::set_allocated_new_filename(std::string* new_filename) {
  if (new_filename != nullptr) {
    
  } else {
    
  }
  _impl_.new_filename_.SetAllocated(new_filename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.new_filename_.IsDefault()) {
    _impl_.new_filename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:disk.RenameReq.new_filename)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace disk

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::disk::FileMsgType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::disk::FileMsgType>() {
  return ::disk::FileMsgType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_disk_5fclient_5fgui_2eproto
