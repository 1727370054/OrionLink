// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: disk_client_gui.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_disk_5fclient_5fgui_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_disk_5fclient_5fgui_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_disk_5fclient_5fgui_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_disk_5fclient_5fgui_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_disk_5fclient_5fgui_2eproto;
namespace disk {
class FileInfo;
class FileInfoDefaultTypeInternal;
extern FileInfoDefaultTypeInternal _FileInfo_default_instance_;
class FileInfoList;
class FileInfoListDefaultTypeInternal;
extern FileInfoListDefaultTypeInternal _FileInfoList_default_instance_;
class GetDirReq;
class GetDirReqDefaultTypeInternal;
extern GetDirReqDefaultTypeInternal _GetDirReq_default_instance_;
}  // namespace disk
PROTOBUF_NAMESPACE_OPEN
template<> ::disk::FileInfo* Arena::CreateMaybeMessage<::disk::FileInfo>(Arena*);
template<> ::disk::FileInfoList* Arena::CreateMaybeMessage<::disk::FileInfoList>(Arena*);
template<> ::disk::GetDirReq* Arena::CreateMaybeMessage<::disk::GetDirReq>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace disk {

enum FileMsgType : int {
  FILE_MSG_NONE = 0,
  GET_DIR_REQ = 1001,
  GET_DIR_RES = 1002,
  DELETE_FILE_REQ = 1014,
  DELETE_FILE_RES = 1015,
  NEW_DIR_REQ = 1016,
  NEW_DIR_RES = 1017,
  FileMsgType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  FileMsgType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool FileMsgType_IsValid(int value);
constexpr FileMsgType FileMsgType_MIN = FILE_MSG_NONE;
constexpr FileMsgType FileMsgType_MAX = NEW_DIR_RES;
constexpr int FileMsgType_ARRAYSIZE = FileMsgType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FileMsgType_descriptor();
template<typename T>
inline const std::string& FileMsgType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FileMsgType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FileMsgType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FileMsgType_descriptor(), enum_t_value);
}
inline bool FileMsgType_Parse(
    const std::string& name, FileMsgType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FileMsgType>(
    FileMsgType_descriptor(), name, value);
}
// ===================================================================

class GetDirReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:disk.GetDirReq) */ {
 public:
  GetDirReq();
  virtual ~GetDirReq();

  GetDirReq(const GetDirReq& from);
  GetDirReq(GetDirReq&& from) noexcept
    : GetDirReq() {
    *this = ::std::move(from);
  }

  inline GetDirReq& operator=(const GetDirReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDirReq& operator=(GetDirReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDirReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDirReq* internal_default_instance() {
    return reinterpret_cast<const GetDirReq*>(
               &_GetDirReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetDirReq& a, GetDirReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDirReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDirReq* New() const final {
    return CreateMaybeMessage<GetDirReq>(nullptr);
  }

  GetDirReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDirReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDirReq& from);
  void MergeFrom(const GetDirReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDirReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "disk.GetDirReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_disk_5fclient_5fgui_2eproto);
    return ::descriptor_table_disk_5fclient_5fgui_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRootFieldNumber = 1,
  };
  // bytes root = 1;
  void clear_root();
  const std::string& root() const;
  void set_root(const std::string& value);
  void set_root(std::string&& value);
  void set_root(const char* value);
  void set_root(const void* value, size_t size);
  std::string* mutable_root();
  std::string* release_root();
  void set_allocated_root(std::string* root);
  private:
  const std::string& _internal_root() const;
  void _internal_set_root(const std::string& value);
  std::string* _internal_mutable_root();
  public:

  // @@protoc_insertion_point(class_scope:disk.GetDirReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr root_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_disk_5fclient_5fgui_2eproto;
};
// -------------------------------------------------------------------

class FileInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:disk.FileInfo) */ {
 public:
  FileInfo();
  virtual ~FileInfo();

  FileInfo(const FileInfo& from);
  FileInfo(FileInfo&& from) noexcept
    : FileInfo() {
    *this = ::std::move(from);
  }

  inline FileInfo& operator=(const FileInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileInfo& operator=(FileInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FileInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileInfo* internal_default_instance() {
    return reinterpret_cast<const FileInfo*>(
               &_FileInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FileInfo& a, FileInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(FileInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FileInfo* New() const final {
    return CreateMaybeMessage<FileInfo>(nullptr);
  }

  FileInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FileInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FileInfo& from);
  void MergeFrom(const FileInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "disk.FileInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_disk_5fclient_5fgui_2eproto);
    return ::descriptor_table_disk_5fclient_5fgui_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilenameFieldNumber = 1,
    kFiledirFieldNumber = 2,
    kFiletimeFieldNumber = 4,
    kMd5FieldNumber = 6,
    kLocalPathFieldNumber = 7,
    kPasswordFieldNumber = 11,
    kFilesizeFieldNumber = 3,
    kNetSizeFieldNumber = 8,
    kOriSizeFieldNumber = 10,
    kIsDirFieldNumber = 5,
    kIsEncFieldNumber = 9,
  };
  // bytes filename = 1;
  void clear_filename();
  const std::string& filename() const;
  void set_filename(const std::string& value);
  void set_filename(std::string&& value);
  void set_filename(const char* value);
  void set_filename(const void* value, size_t size);
  std::string* mutable_filename();
  std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // bytes filedir = 2;
  void clear_filedir();
  const std::string& filedir() const;
  void set_filedir(const std::string& value);
  void set_filedir(std::string&& value);
  void set_filedir(const char* value);
  void set_filedir(const void* value, size_t size);
  std::string* mutable_filedir();
  std::string* release_filedir();
  void set_allocated_filedir(std::string* filedir);
  private:
  const std::string& _internal_filedir() const;
  void _internal_set_filedir(const std::string& value);
  std::string* _internal_mutable_filedir();
  public:

  // string filetime = 4;
  void clear_filetime();
  const std::string& filetime() const;
  void set_filetime(const std::string& value);
  void set_filetime(std::string&& value);
  void set_filetime(const char* value);
  void set_filetime(const char* value, size_t size);
  std::string* mutable_filetime();
  std::string* release_filetime();
  void set_allocated_filetime(std::string* filetime);
  private:
  const std::string& _internal_filetime() const;
  void _internal_set_filetime(const std::string& value);
  std::string* _internal_mutable_filetime();
  public:

  // bytes md5 = 6;
  void clear_md5();
  const std::string& md5() const;
  void set_md5(const std::string& value);
  void set_md5(std::string&& value);
  void set_md5(const char* value);
  void set_md5(const void* value, size_t size);
  std::string* mutable_md5();
  std::string* release_md5();
  void set_allocated_md5(std::string* md5);
  private:
  const std::string& _internal_md5() const;
  void _internal_set_md5(const std::string& value);
  std::string* _internal_mutable_md5();
  public:

  // bytes local_path = 7;
  void clear_local_path();
  const std::string& local_path() const;
  void set_local_path(const std::string& value);
  void set_local_path(std::string&& value);
  void set_local_path(const char* value);
  void set_local_path(const void* value, size_t size);
  std::string* mutable_local_path();
  std::string* release_local_path();
  void set_allocated_local_path(std::string* local_path);
  private:
  const std::string& _internal_local_path() const;
  void _internal_set_local_path(const std::string& value);
  std::string* _internal_mutable_local_path();
  public:

  // bytes password = 11;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const void* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // int64 filesize = 3;
  void clear_filesize();
  ::PROTOBUF_NAMESPACE_ID::int64 filesize() const;
  void set_filesize(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 net_size = 8;
  void clear_net_size();
  ::PROTOBUF_NAMESPACE_ID::int64 net_size() const;
  void set_net_size(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 ori_size = 10;
  void clear_ori_size();
  ::PROTOBUF_NAMESPACE_ID::int64 ori_size() const;
  void set_ori_size(::PROTOBUF_NAMESPACE_ID::int64 value);

  // bool is_dir = 5;
  void clear_is_dir();
  bool is_dir() const;
  void set_is_dir(bool value);

  // bool is_enc = 9;
  void clear_is_enc();
  bool is_enc() const;
  void set_is_enc(bool value);

  // @@protoc_insertion_point(class_scope:disk.FileInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filedir_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filetime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr md5_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr local_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::int64 filesize_;
  ::PROTOBUF_NAMESPACE_ID::int64 net_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 ori_size_;
  bool is_dir_;
  bool is_enc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_disk_5fclient_5fgui_2eproto;
};
// -------------------------------------------------------------------

class FileInfoList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:disk.FileInfoList) */ {
 public:
  FileInfoList();
  virtual ~FileInfoList();

  FileInfoList(const FileInfoList& from);
  FileInfoList(FileInfoList&& from) noexcept
    : FileInfoList() {
    *this = ::std::move(from);
  }

  inline FileInfoList& operator=(const FileInfoList& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileInfoList& operator=(FileInfoList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FileInfoList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileInfoList* internal_default_instance() {
    return reinterpret_cast<const FileInfoList*>(
               &_FileInfoList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FileInfoList& a, FileInfoList& b) {
    a.Swap(&b);
  }
  inline void Swap(FileInfoList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FileInfoList* New() const final {
    return CreateMaybeMessage<FileInfoList>(nullptr);
  }

  FileInfoList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FileInfoList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FileInfoList& from);
  void MergeFrom(const FileInfoList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileInfoList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "disk.FileInfoList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_disk_5fclient_5fgui_2eproto);
    return ::descriptor_table_disk_5fclient_5fgui_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilesFieldNumber = 4,
  };
  // repeated .disk.FileInfo files = 4;
  int files_size() const;
  void clear_files();
  ::disk::FileInfo* mutable_files(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::disk::FileInfo >*
      mutable_files();
  const ::disk::FileInfo& files(int index) const;
  ::disk::FileInfo* add_files();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::disk::FileInfo >&
      files() const;

  // @@protoc_insertion_point(class_scope:disk.FileInfoList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::disk::FileInfo > files_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_disk_5fclient_5fgui_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetDirReq

// bytes root = 1;
inline void GetDirReq::clear_root() {
  root_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetDirReq::root() const {
  // @@protoc_insertion_point(field_get:disk.GetDirReq.root)
  return _internal_root();
}
inline void GetDirReq::set_root(const std::string& value) {
  _internal_set_root(value);
  // @@protoc_insertion_point(field_set:disk.GetDirReq.root)
}
inline std::string* GetDirReq::mutable_root() {
  // @@protoc_insertion_point(field_mutable:disk.GetDirReq.root)
  return _internal_mutable_root();
}
inline const std::string& GetDirReq::_internal_root() const {
  return root_.GetNoArena();
}
inline void GetDirReq::_internal_set_root(const std::string& value) {
  
  root_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetDirReq::set_root(std::string&& value) {
  
  root_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:disk.GetDirReq.root)
}
inline void GetDirReq::set_root(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  root_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:disk.GetDirReq.root)
}
inline void GetDirReq::set_root(const void* value, size_t size) {
  
  root_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:disk.GetDirReq.root)
}
inline std::string* GetDirReq::_internal_mutable_root() {
  
  return root_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetDirReq::release_root() {
  // @@protoc_insertion_point(field_release:disk.GetDirReq.root)
  
  return root_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetDirReq::set_allocated_root(std::string* root) {
  if (root != nullptr) {
    
  } else {
    
  }
  root_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), root);
  // @@protoc_insertion_point(field_set_allocated:disk.GetDirReq.root)
}

// -------------------------------------------------------------------

// FileInfo

// bytes filename = 1;
inline void FileInfo::clear_filename() {
  filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FileInfo::filename() const {
  // @@protoc_insertion_point(field_get:disk.FileInfo.filename)
  return _internal_filename();
}
inline void FileInfo::set_filename(const std::string& value) {
  _internal_set_filename(value);
  // @@protoc_insertion_point(field_set:disk.FileInfo.filename)
}
inline std::string* FileInfo::mutable_filename() {
  // @@protoc_insertion_point(field_mutable:disk.FileInfo.filename)
  return _internal_mutable_filename();
}
inline const std::string& FileInfo::_internal_filename() const {
  return filename_.GetNoArena();
}
inline void FileInfo::_internal_set_filename(const std::string& value) {
  
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FileInfo::set_filename(std::string&& value) {
  
  filename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:disk.FileInfo.filename)
}
inline void FileInfo::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:disk.FileInfo.filename)
}
inline void FileInfo::set_filename(const void* value, size_t size) {
  
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:disk.FileInfo.filename)
}
inline std::string* FileInfo::_internal_mutable_filename() {
  
  return filename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FileInfo::release_filename() {
  // @@protoc_insertion_point(field_release:disk.FileInfo.filename)
  
  return filename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FileInfo::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:disk.FileInfo.filename)
}

// bytes filedir = 2;
inline void FileInfo::clear_filedir() {
  filedir_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FileInfo::filedir() const {
  // @@protoc_insertion_point(field_get:disk.FileInfo.filedir)
  return _internal_filedir();
}
inline void FileInfo::set_filedir(const std::string& value) {
  _internal_set_filedir(value);
  // @@protoc_insertion_point(field_set:disk.FileInfo.filedir)
}
inline std::string* FileInfo::mutable_filedir() {
  // @@protoc_insertion_point(field_mutable:disk.FileInfo.filedir)
  return _internal_mutable_filedir();
}
inline const std::string& FileInfo::_internal_filedir() const {
  return filedir_.GetNoArena();
}
inline void FileInfo::_internal_set_filedir(const std::string& value) {
  
  filedir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FileInfo::set_filedir(std::string&& value) {
  
  filedir_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:disk.FileInfo.filedir)
}
inline void FileInfo::set_filedir(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filedir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:disk.FileInfo.filedir)
}
inline void FileInfo::set_filedir(const void* value, size_t size) {
  
  filedir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:disk.FileInfo.filedir)
}
inline std::string* FileInfo::_internal_mutable_filedir() {
  
  return filedir_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FileInfo::release_filedir() {
  // @@protoc_insertion_point(field_release:disk.FileInfo.filedir)
  
  return filedir_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FileInfo::set_allocated_filedir(std::string* filedir) {
  if (filedir != nullptr) {
    
  } else {
    
  }
  filedir_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filedir);
  // @@protoc_insertion_point(field_set_allocated:disk.FileInfo.filedir)
}

// int64 filesize = 3;
inline void FileInfo::clear_filesize() {
  filesize_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FileInfo::filesize() const {
  // @@protoc_insertion_point(field_get:disk.FileInfo.filesize)
  return filesize_;
}
inline void FileInfo::set_filesize(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  filesize_ = value;
  // @@protoc_insertion_point(field_set:disk.FileInfo.filesize)
}

// string filetime = 4;
inline void FileInfo::clear_filetime() {
  filetime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FileInfo::filetime() const {
  // @@protoc_insertion_point(field_get:disk.FileInfo.filetime)
  return _internal_filetime();
}
inline void FileInfo::set_filetime(const std::string& value) {
  _internal_set_filetime(value);
  // @@protoc_insertion_point(field_set:disk.FileInfo.filetime)
}
inline std::string* FileInfo::mutable_filetime() {
  // @@protoc_insertion_point(field_mutable:disk.FileInfo.filetime)
  return _internal_mutable_filetime();
}
inline const std::string& FileInfo::_internal_filetime() const {
  return filetime_.GetNoArena();
}
inline void FileInfo::_internal_set_filetime(const std::string& value) {
  
  filetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FileInfo::set_filetime(std::string&& value) {
  
  filetime_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:disk.FileInfo.filetime)
}
inline void FileInfo::set_filetime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:disk.FileInfo.filetime)
}
inline void FileInfo::set_filetime(const char* value, size_t size) {
  
  filetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:disk.FileInfo.filetime)
}
inline std::string* FileInfo::_internal_mutable_filetime() {
  
  return filetime_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FileInfo::release_filetime() {
  // @@protoc_insertion_point(field_release:disk.FileInfo.filetime)
  
  return filetime_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FileInfo::set_allocated_filetime(std::string* filetime) {
  if (filetime != nullptr) {
    
  } else {
    
  }
  filetime_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filetime);
  // @@protoc_insertion_point(field_set_allocated:disk.FileInfo.filetime)
}

// bool is_dir = 5;
inline void FileInfo::clear_is_dir() {
  is_dir_ = false;
}
inline bool FileInfo::is_dir() const {
  // @@protoc_insertion_point(field_get:disk.FileInfo.is_dir)
  return is_dir_;
}
inline void FileInfo::set_is_dir(bool value) {
  
  is_dir_ = value;
  // @@protoc_insertion_point(field_set:disk.FileInfo.is_dir)
}

// bytes md5 = 6;
inline void FileInfo::clear_md5() {
  md5_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FileInfo::md5() const {
  // @@protoc_insertion_point(field_get:disk.FileInfo.md5)
  return _internal_md5();
}
inline void FileInfo::set_md5(const std::string& value) {
  _internal_set_md5(value);
  // @@protoc_insertion_point(field_set:disk.FileInfo.md5)
}
inline std::string* FileInfo::mutable_md5() {
  // @@protoc_insertion_point(field_mutable:disk.FileInfo.md5)
  return _internal_mutable_md5();
}
inline const std::string& FileInfo::_internal_md5() const {
  return md5_.GetNoArena();
}
inline void FileInfo::_internal_set_md5(const std::string& value) {
  
  md5_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FileInfo::set_md5(std::string&& value) {
  
  md5_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:disk.FileInfo.md5)
}
inline void FileInfo::set_md5(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  md5_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:disk.FileInfo.md5)
}
inline void FileInfo::set_md5(const void* value, size_t size) {
  
  md5_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:disk.FileInfo.md5)
}
inline std::string* FileInfo::_internal_mutable_md5() {
  
  return md5_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FileInfo::release_md5() {
  // @@protoc_insertion_point(field_release:disk.FileInfo.md5)
  
  return md5_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FileInfo::set_allocated_md5(std::string* md5) {
  if (md5 != nullptr) {
    
  } else {
    
  }
  md5_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), md5);
  // @@protoc_insertion_point(field_set_allocated:disk.FileInfo.md5)
}

// bytes local_path = 7;
inline void FileInfo::clear_local_path() {
  local_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FileInfo::local_path() const {
  // @@protoc_insertion_point(field_get:disk.FileInfo.local_path)
  return _internal_local_path();
}
inline void FileInfo::set_local_path(const std::string& value) {
  _internal_set_local_path(value);
  // @@protoc_insertion_point(field_set:disk.FileInfo.local_path)
}
inline std::string* FileInfo::mutable_local_path() {
  // @@protoc_insertion_point(field_mutable:disk.FileInfo.local_path)
  return _internal_mutable_local_path();
}
inline const std::string& FileInfo::_internal_local_path() const {
  return local_path_.GetNoArena();
}
inline void FileInfo::_internal_set_local_path(const std::string& value) {
  
  local_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FileInfo::set_local_path(std::string&& value) {
  
  local_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:disk.FileInfo.local_path)
}
inline void FileInfo::set_local_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  local_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:disk.FileInfo.local_path)
}
inline void FileInfo::set_local_path(const void* value, size_t size) {
  
  local_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:disk.FileInfo.local_path)
}
inline std::string* FileInfo::_internal_mutable_local_path() {
  
  return local_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FileInfo::release_local_path() {
  // @@protoc_insertion_point(field_release:disk.FileInfo.local_path)
  
  return local_path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FileInfo::set_allocated_local_path(std::string* local_path) {
  if (local_path != nullptr) {
    
  } else {
    
  }
  local_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), local_path);
  // @@protoc_insertion_point(field_set_allocated:disk.FileInfo.local_path)
}

// int64 net_size = 8;
inline void FileInfo::clear_net_size() {
  net_size_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FileInfo::net_size() const {
  // @@protoc_insertion_point(field_get:disk.FileInfo.net_size)
  return net_size_;
}
inline void FileInfo::set_net_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  net_size_ = value;
  // @@protoc_insertion_point(field_set:disk.FileInfo.net_size)
}

// bool is_enc = 9;
inline void FileInfo::clear_is_enc() {
  is_enc_ = false;
}
inline bool FileInfo::is_enc() const {
  // @@protoc_insertion_point(field_get:disk.FileInfo.is_enc)
  return is_enc_;
}
inline void FileInfo::set_is_enc(bool value) {
  
  is_enc_ = value;
  // @@protoc_insertion_point(field_set:disk.FileInfo.is_enc)
}

// int64 ori_size = 10;
inline void FileInfo::clear_ori_size() {
  ori_size_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FileInfo::ori_size() const {
  // @@protoc_insertion_point(field_get:disk.FileInfo.ori_size)
  return ori_size_;
}
inline void FileInfo::set_ori_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  ori_size_ = value;
  // @@protoc_insertion_point(field_set:disk.FileInfo.ori_size)
}

// bytes password = 11;
inline void FileInfo::clear_password() {
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FileInfo::password() const {
  // @@protoc_insertion_point(field_get:disk.FileInfo.password)
  return _internal_password();
}
inline void FileInfo::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:disk.FileInfo.password)
}
inline std::string* FileInfo::mutable_password() {
  // @@protoc_insertion_point(field_mutable:disk.FileInfo.password)
  return _internal_mutable_password();
}
inline const std::string& FileInfo::_internal_password() const {
  return password_.GetNoArena();
}
inline void FileInfo::_internal_set_password(const std::string& value) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FileInfo::set_password(std::string&& value) {
  
  password_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:disk.FileInfo.password)
}
inline void FileInfo::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:disk.FileInfo.password)
}
inline void FileInfo::set_password(const void* value, size_t size) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:disk.FileInfo.password)
}
inline std::string* FileInfo::_internal_mutable_password() {
  
  return password_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FileInfo::release_password() {
  // @@protoc_insertion_point(field_release:disk.FileInfo.password)
  
  return password_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FileInfo::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:disk.FileInfo.password)
}

// -------------------------------------------------------------------

// FileInfoList

// repeated .disk.FileInfo files = 4;
inline int FileInfoList::files_size() const {
  return files_.size();
}
inline void FileInfoList::clear_files() {
  files_.Clear();
}
inline ::disk::FileInfo* FileInfoList::mutable_files(int index) {
  // @@protoc_insertion_point(field_mutable:disk.FileInfoList.files)
  return files_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::disk::FileInfo >*
FileInfoList::mutable_files() {
  // @@protoc_insertion_point(field_mutable_list:disk.FileInfoList.files)
  return &files_;
}
inline const ::disk::FileInfo& FileInfoList::files(int index) const {
  // @@protoc_insertion_point(field_get:disk.FileInfoList.files)
  return files_.Get(index);
}
inline ::disk::FileInfo* FileInfoList::add_files() {
  // @@protoc_insertion_point(field_add:disk.FileInfoList.files)
  return files_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::disk::FileInfo >&
FileInfoList::files() const {
  // @@protoc_insertion_point(field_list:disk.FileInfoList.files)
  return files_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace disk

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::disk::FileMsgType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::disk::FileMsgType>() {
  return ::disk::FileMsgType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_disk_5fclient_5fgui_2eproto
